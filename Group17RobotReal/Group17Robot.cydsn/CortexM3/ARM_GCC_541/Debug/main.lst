ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.TIH,"ax",%progbits
  20              		.align	2
  21              		.global	TIH
  22              		.thumb
  23              		.thumb_func
  24              		.type	TIH, %function
  25              	TIH:
  26              	.LFB64:
  27              		.file 1 "main.c"
   1:main.c        **** 
   2:main.c        **** /* ========================================
   3:main.c        ****  *
   4:main.c        ****  * Copyright Group 17, 2019
   5:main.c        ****  * All Rights Reserved
   6:main.c        ****  * UNPUBLISHED, LICENSED SOFTWARE.
   7:main.c        ****  *
   8:main.c        ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   9:main.c        ****  * WHICH IS THE PROPERTY OF Blayke, Misha, Nidhin.
  10:main.c        ****  *
  11:main.c        ****  * ========================================
  12:main.c        **** */
  13:main.c        **** 
  14:main.c        **** // * PSOC LIBRARY * //
  15:main.c        **** #include "project.h"
  16:main.c        **** 
  17:main.c        **** // * C LIBRARIES * // 
  18:main.c        **** #include <stdlib.h>
  19:main.c        **** #include <stdio.h>
  20:main.c        **** #include <math.h>
  21:main.c        **** 
  22:main.c        **** // * OUR LIBRARIES * //
  23:main.c        **** #include "main.h"
  24:main.c        **** #include "colour.h"
  25:main.c        **** #include "ultrasonic.h" 
  26:main.c        **** #include "servo.h"
  27:main.c        **** #include "mishamotor.h"
  28:main.c        **** #include "customMath.h"
  29:main.c        **** 
  30:main.c        **** 
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 2


  31:main.c        **** extern char output[32];   
  32:main.c        **** 
  33:main.c        **** // * STATE VARIABLES * //
  34:main.c        **** int state = STATE_SCAN_PLAN;
  35:main.c        **** int running = 1;
  36:main.c        **** int sweeping = 0;
  37:main.c        **** float block_edge_location[4] = {0,0,0,0}; // N E S W edge positions respectively
  38:main.c        **** 
  39:main.c        **** // * PUCK CONSTRUCTION VARIABLES * //
  40:main.c        **** int currentPuckStackSize = 0; // How many pucks are currently on the construction plate
  41:main.c        **** int puckRackColours[5] = {BLANK,BLANK,BLANK,BLANK,BLANK}; // 5 slots in puck rack.
  42:main.c        **** int puckConstructionPlan[3] = {BLANK,BLANK,BLANK};
  43:main.c        **** int currentPuckRackScanningIndex = 0;
  44:main.c        **** int puckRackOffsetsFromWest[5] = {PUCK_RACK_0_WEST_DISTANCE,
  45:main.c        ****                                 PUCK_RACK_1_WEST_DISTANCE,
  46:main.c        ****                                 PUCK_RACK_2_WEST_DISTANCE,
  47:main.c        ****                                 PUCK_RACK_3_WEST_DISTANCE,
  48:main.c        ****                                 PUCK_RACK_4_WEST_DISTANCE };
  49:main.c        **** 
  50:main.c        **** float horizontalPuckGrid = 0;
  51:main.c        **** 
  52:main.c        **** // * NAVIGATION AND POSITION VARIABLES * //
  53:main.c        **** 
  54:main.c        **** int beginNavigation = 0; // Allow us to break out of the intial phase when powered up
  55:main.c        **** 
  56:main.c        **** int pathToPucks; // This will give us a corridor that we should initially take when trying to go to
  57:main.c        **** int pathPastBlock;
  58:main.c        **** 
  59:main.c        **** // These block clearance variables are only true if we have enough room either side of the block to
  60:main.c        **** // And only true for the puck clearance variables if there is enough room to be able to turn at the
  61:main.c        **** short int blockEastClearance = 0;
  62:main.c        **** short int blockWestClearance = 0;
  63:main.c        **** short int puckEastClearance = 0;
  64:main.c        **** short int puckWestClearance = 0;
  65:main.c        **** 
  66:main.c        **** float currentPosition[2] = {0,0};
  67:main.c        **** float desiredPosition[2];
  68:main.c        **** int currentOrientation = 90; //in degrees (convert to radians when needed)- 90 assuming we start fa
  69:main.c        **** int desiredOrientation;
  70:main.c        **** 
  71:main.c        **** short int moveNow = 1; //This is a flag that lets the main program tell the moving functions
  72:main.c        **** //whethe we want the robot to be moving or not. For example, when we need to operate servos
  73:main.c        **** //the main program would set moveNow to FALSE.
  74:main.c        **** 
  75:main.c        **** //The four flags below let the rest of the program know if the robot is trying to drive 
  76:main.c        **** //forward or back, turn left or right. At the start of every motion, turn these flags on
  77:main.c        **** //at the end turn them off.
  78:main.c        **** short int drivingForwardFlag = 0;
  79:main.c        **** short int drivingBackwardFlag = 0;
  80:main.c        **** short int turningLeftFlag = 0;
  81:main.c        **** short int turningRightFlag = 0;
  82:main.c        **** 
  83:main.c        **** //These flags will be used by the main program to allow the robot to move in certain directions
  84:main.c        **** short int moveLeftAllowed;
  85:main.c        **** short int moveRightAllowed;
  86:main.c        **** short int moveForwardAllowed;
  87:main.c        **** short int moveBackwardAllowed;
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 3


  88:main.c        **** 
  89:main.c        **** 
  90:main.c        **** // * COLOUR VARIABLES * //
  91:main.c        **** 
  92:main.c        **** int idac_value = 0;  
  93:main.c        **** int colour_flag = 1;                    // sets which photodiode to use 
  94:main.c        **** int colour_sensing_algorithm = 0;      // Determines which colour sensing algorithm to use:
  95:main.c        ****                                                 // 0: Wall algorithm
  96:main.c        ****                                             // 1: Claw algorithm
  97:main.c        ****                                                 // 2: old algorithm
  98:main.c        **** 
  99:main.c        **** int moving = 0; // Temp to stop while loop from repeated runs of scanning plan code
 100:main.c        **** 
 101:main.c        **** const int PLAN_SCAN_VERTICAL = 10; // Set to ultrasonic distance at the home base 
 102:main.c        **** 
 103:main.c        **** int current_stage = 1;      // There are 3 stages, we start at 1
 104:main.c        **** 
 105:main.c        **** 
 106:main.c        **** // GLOBAL VARIABLE
 107:main.c        **** int distance_returned_global;
 108:main.c        **** 
 109:main.c        **** 
 110:main.c        **** // * INTERRUPT HANDLING * // 
 111:main.c        **** CY_ISR(TIH)                             // Ultrasonic ISR Definition
 112:main.c        **** {
  28              		.loc 1 112 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 08B5     		push	{r3, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 3, -8
  35              		.cfi_offset 14, -4
 113:main.c        ****     ultrasonicInterruptHandler();
  36              		.loc 1 113 0
  37 0002 FFF7FEFF 		bl	ultrasonicInterruptHandler
  38              	.LVL0:
  39 0006 08BD     		pop	{r3, pc}
  40              		.cfi_endproc
  41              	.LFE64:
  42              		.size	TIH, .-TIH
  43              		.section	.text.StartIH,"ax",%progbits
  44              		.align	2
  45              		.global	StartIH
  46              		.thumb
  47              		.thumb_func
  48              		.type	StartIH, %function
  49              	StartIH:
  50              	.LFB65:
 114:main.c        **** }
 115:main.c        **** 
 116:main.c        **** CY_ISR(StartIH)                             // Ultrasonic ISR Definition
 117:main.c        **** {
  51              		.loc 1 117 0
  52              		.cfi_startproc
  53              		@ args = 0, pretend = 0, frame = 0
  54              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 4


  55 0000 08B5     		push	{r3, lr}
  56              		.cfi_def_cfa_offset 8
  57              		.cfi_offset 3, -8
  58              		.cfi_offset 14, -4
 118:main.c        ****     CyDelay(100);
  59              		.loc 1 118 0
  60 0002 6420     		movs	r0, #100
  61 0004 FFF7FEFF 		bl	CyDelay
  62              	.LVL1:
 119:main.c        ****     
 120:main.c        ****     beginNavigation = 1;
  63              		.loc 1 120 0
  64 0008 0122     		movs	r2, #1
  65 000a 034B     		ldr	r3, .L5
  66 000c 1A60     		str	r2, [r3]
 121:main.c        ****     colour_flag = 0; 
  67              		.loc 1 121 0
  68 000e 0022     		movs	r2, #0
  69 0010 024B     		ldr	r3, .L5+4
  70 0012 1A60     		str	r2, [r3]
  71 0014 08BD     		pop	{r3, pc}
  72              	.L6:
  73 0016 00BF     		.align	2
  74              	.L5:
  75 0018 00000000 		.word	.LANCHOR0
  76 001c 00000000 		.word	.LANCHOR1
  77              		.cfi_endproc
  78              	.LFE65:
  79              		.size	StartIH, .-StartIH
  80              		.section	.text.armMoving,"ax",%progbits
  81              		.align	2
  82              		.global	armMoving
  83              		.thumb
  84              		.thumb_func
  85              		.type	armMoving, %function
  86              	armMoving:
  87              	.LFB67:
 122:main.c        **** }
 123:main.c        ****  
 124:main.c        **** //Interrupt service routines for dcmotor function
 125:main.c        **** /*
 126:main.c        **** CY_ISR(Encoder_Counts_1_IH){
 127:main.c        ****     stopMotor1AndUpdate();
 128:main.c        **** }
 129:main.c        **** 
 130:main.c        **** CY_ISR(Encoder_Counts_2_IH){
 131:main.c        ****     stopMotor2AndUpdate();
 132:main.c        **** }
 133:main.c        **** 
 134:main.c        **** CY_ISR(Drift_Check_IH){    
 135:main.c        ****     Drift_Check_Timer_ReadStatusRegister(); //Clears the interrupt
 136:main.c        ****     Drift_Check_Timer_Stop(); //Stops the timer
 137:main.c        ****     motor1EncoderCounts = Motor_1_Encoder_Counts_ReadCounter();
 138:main.c        ****     motor2EncoderCounts = Motor_2_Encoder_Counts_ReadCounter();
 139:main.c        ****     driftCorrect(); //Does checking
 140:main.c        **** }
 141:main.c        **** */
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 5


 142:main.c        **** 
 143:main.c        **** int main(void)
 144:main.c        **** {
 145:main.c        ****     CyGlobalIntEnable; /* Enable global interrupts. */
 146:main.c        **** 
 147:main.c        ****     
 148:main.c        ****     TIA_1_Start();
 149:main.c        ****     UART_1_Start();
 150:main.c        ****     UART_1_PutString("UART commencing... \n");
 151:main.c        ****     ADC_Start();
 152:main.c        ****     IDAC8_1_Start();
 153:main.c        ****     
 154:main.c        ****     // DEBUGGING:
 155:main.c        ****     int colour_calibration = FALSE;             // Do we want to calibrate the sensor? 
 156:main.c        ****     int servo_testing = FALSE;                  // Do the servos need to be tested?      
 157:main.c        ****     int motor_testing = FALSE;
 158:main.c        ****     int ultrasonic_testing = FALSE;  
 159:main.c        ****     
 160:main.c        ****     
 161:main.c        ****     // IDAC initialisation: 
 162:main.c        ****     IDAC8_1_SetRange(IDAC8_1_RANGE_32uA);       // Sets the range between 0 and 32uA
 163:main.c        ****     IDAC8_1_SetValue(idac_value);               // set a value between 0 and 255
 164:main.c        ****     
 165:main.c        ****     // Colour Sensing Initialisation & Debugging:
 166:main.c        ****     colour_sensing_algorithm = 0;
 167:main.c        ****     control_photodiode_Write(colour_sensing_algorithm);            // controls which photodiode is 
 168:main.c        ****                                                 // 0: wall
 169:main.c        ****                                                 // 1: claw
 170:main.c        ****     control_led_Write(1);   CyDelay(500);  // Ensures all the RGBs are working
 171:main.c        ****     control_led_Write(2);   CyDelay(500);
 172:main.c        ****     control_led_Write(3);   CyDelay(500);
 173:main.c        ****     control_led_Write(0);   CyDelay(500);
 174:main.c        ****     colourSensingInitialise();                  // Initialises the colour sensor
 175:main.c        ****     
 176:main.c        **** 
 177:main.c        ****     //Servos for the arm instatination
 178:main.c        ****     Rack_Servo_PWM_Start();
 179:main.c        ****     Rack_Servo_PWM_WriteCompare(1000);          // BRINGs rack to highest position, so not to mess 
 180:main.c        ****     CyDelay(500);
 181:main.c        ****     Rack_Servo_PWM_Sleep();
 182:main.c        ****     
 183:main.c        ****     Gripper_Servo_PWM_Start();
 184:main.c        ****     Gripper_Servo_PWM_WriteCompare(1120);       //This is the open gripper position
 185:main.c        ****     CyDelay(500);
 186:main.c        ****     Gripper_Servo_PWM_Sleep();
 187:main.c        ****     
 188:main.c        ****     // Misha Motors Initialisation:
 189:main.c        ****     Motor_Left_Driver_Start();
 190:main.c        ****     Motor_Left_Driver_Sleep();                  // Puts motor to sleep
 191:main.c        ****     Motor_Right_Driver_Start();
 192:main.c        ****     Motor_Right_Driver_Sleep();                 // Puts motor to sleep
 193:main.c        ****     
 194:main.c        ****     Motor_Left_Decoder_Start();
 195:main.c        ****     Motor_Right_Decoder_Start();
 196:main.c        ****     
 197:main.c        ****     // Ultrasonic Initialisation: 
 198:main.c        ****     
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 6


 199:main.c        ****     for (int i = 0; i < 5; i++)
 200:main.c        ****     {
 201:main.c        ****         distanceSensor(i);
 202:main.c        ****         CyDelay(100);
 203:main.c        ****         sprintf(output, "%d \t", ultrasonic_distances_mm[i]);
 204:main.c        ****         UART_1_PutString(output);
 205:main.c        ****     }
 206:main.c        ****     UART_1_PutString("\n");
 207:main.c        ****     
 208:main.c        ****     for (int i = 0; i < 5; i++)
 209:main.c        ****     {
 210:main.c        ****         distanceSensor(i);
 211:main.c        ****         CyDelay(100);
 212:main.c        ****         sprintf(output, "%d \t", ultrasonic_distances_mm[i]);
 213:main.c        ****         UART_1_PutString(output);
 214:main.c        ****     }
 215:main.c        ****     UART_1_PutString("\n");
 216:main.c        ****     
 217:main.c        ****         
 218:main.c        ****     // Timer and ISR instantiation
 219:main.c        ****     Timer_1_Start();
 220:main.c        ****     Timer_1_ReadStatusRegister();
 221:main.c        ****     Sonic_StartEx(TIH);
 222:main.c        ****     Start_StartEx(StartIH);
 223:main.c        ****     beginNavigation = 0;
 224:main.c        ****     
 225:main.c        ****     /*  OLD CODE FROM NIDHIN:
 226:main.c        ****     //Initialising DC motors
 227:main.c        ****     Motor_1_driver_Start();
 228:main.c        ****     Motor_2_driver_Start();
 229:main.c        ****     motorDutyCycleUpdate(0,0,0,0);//Have the motors stand still
 230:main.c        ****     
 231:main.c        ****     
 232:main.c        ****     //Initialising counters
 233:main.c        ****     Motor_1_Encoder_Counts_Start();
 234:main.c        ****     Motor_2_Encoder_Counts_Start();
 235:main.c        ****     
 236:main.c        ****     //Initialising timers
 237:main.c        ****     Drift_Check_Timer_Start();
 238:main.c        ****     
 239:main.c        ****     //Starts and enables the interrupts for the motor encoder counts
 240:main.c        ****     Encoder_Counts_1_Interrupt_StartEx(Encoder_Counts_1_IH); 
 241:main.c        ****     Encoder_Counts_2_Interrupt_StartEx(Encoder_Counts_2_IH);
 242:main.c        ****     Drift_Check_Interrupt_StartEx(Drift_Check_IH);		
 243:main.c        ****     */
 244:main.c        **** 
 245:main.c        ****     // Main Loop for States
 246:main.c        ****         
 247:main.c        ****     for(;;)
 248:main.c        ****     {   
 249:main.c        ****         // Start button is pressed so quit sensing
 250:main.c        **** 
 251:main.c        ****         /*
 252:main.c        ****         while (beginNavigation == 0) {
 253:main.c        ****             distanceCheck();           
 254:main.c        ****             UART_1_PutString("\n");
 255:main.c        ****             CyDelay(1000); // Check distance once a second.
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 7


 256:main.c        ****                 
 257:main.c        ****         }
 258:main.c        ****         */
 259:main.c        ****         
 260:main.c        ****         
 261:main.c        ****         // Enter picking up puck state for the moment FOR TESTING
 262:main.c        ****         //colour_sensing_algorithm = 1;
 263:main.c        ****         //control_photodiode_Write(1);
 264:main.c        ****         //state = STATE_FIND_REQUIRED_PUCK;
 265:main.c        ****         
 266:main.c        ****         // Colour Calibration: 
 267:main.c        ****         if (colour_calibration)
 268:main.c        ****         {
 269:main.c        ****             int lock = FALSE;   
 270:main.c        ****             do 
 271:main.c        ****                 {   
 272:main.c        ****                     if (lock == FALSE) 
 273:main.c        ****                     {
 274:main.c        ****                         
 275:main.c        ****                         control_photodiode_Write(1);    // Claw
 276:main.c        ****                         changeHeightToPuck(0);
 277:main.c        **** 
 278:main.c        ****                         UART_1_PutString("Count \t BLANK \t RED \t GREEN \t BLUE \t \n");
 279:main.c        ****                         for (int i = 0; i < 50; i++)
 280:main.c        ****                         {
 281:main.c        ****                         sprintf(output, "%d \t", i);
 282:main.c        ****                         UART_1_PutString(output);
 283:main.c        ****                         colourSensingCalibration(); 
 284:main.c        ****                         UART_1_PutString("\n");
 285:main.c        ****                         }         
 286:main.c        ****                         lock = TRUE;    
 287:main.c        ****                     }
 288:main.c        ****             } while (lock == TRUE);    
 289:main.c        ****         }
 290:main.c        ****         
 291:main.c        ****         // Servo Testing:
 292:main.c        ****         if (servo_testing) 
 293:main.c        ****         {
 294:main.c        ****             int lock = FALSE;
 295:main.c        ****             do 
 296:main.c        ****                 {   
 297:main.c        ****                     if (lock == FALSE) 
 298:main.c        ****                     {
 299:main.c        ****                         UART_1_PutString("Servo Testing: ");
 300:main.c        ****                         
 301:main.c        ****                         armMoving();
 302:main.c        ****                         
 303:main.c        ****                         
 304:main.c        ****                         for(int i = 0; i < 4; i++)
 305:main.c        ****                         {
 306:main.c        ****                             changeHeightToPuck(i);
 307:main.c        ****                             CyDelay(1000);
 308:main.c        ****                         }
 309:main.c        **** 
 310:main.c        ****                         lock = TRUE;    
 311:main.c        ****                     }
 312:main.c        ****             } while (lock == TRUE);    
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 8


 313:main.c        ****         }    
 314:main.c        ****                 
 315:main.c        ****         // Motor Testing: 
 316:main.c        ****         if (motor_testing)
 317:main.c        ****         {
 318:main.c        ****             int lock = FALSE;
 319:main.c        ****             do 
 320:main.c        ****                 {   
 321:main.c        ****                     if (lock == FALSE) 
 322:main.c        ****                     {
 323:main.c        ****                         UART_1_PutString("Motor Testing: \n");
 324:main.c        **** 
 325:main.c        ****                         //mishaMoveForward();
 326:main.c        ****                         //mishaMoveBackward();
 327:main.c        ****                         //mishaMoveDynamic(-300);
 328:main.c        ****                         
 329:main.c        ****                         mishaSwivel(-180);
 330:main.c        ****                         
 331:main.c        ****                         lock = TRUE;    
 332:main.c        ****                     }
 333:main.c        ****             } while (lock == TRUE);    
 334:main.c        ****         }    
 335:main.c        ****         
 336:main.c        ****         // Ultrasonic Testing:
 337:main.c        ****         
 338:main.c        ****         if (ultrasonic_testing) 
 339:main.c        ****         {
 340:main.c        ****             int lock = FALSE;
 341:main.c        ****             do 
 342:main.c        ****                 {   
 343:main.c        ****                     if (lock == FALSE) 
 344:main.c        ****                     {
 345:main.c        ****                         UART_1_PutString("Ultrasonic Testing: \n");
 346:main.c        ****                         
 347:main.c        ****                         //armMoving();
 348:main.c        ****                         //straightAdjust();
 349:main.c        ****                         
 350:main.c        ****                         int dick = 2;
 351:main.c        ****                         while(0) {
 352:main.c        ****                             distanceSensor(dick);
 353:main.c        ****                             CyDelay(500);
 354:main.c        ****                             sprintf(output, "%d \t %d \t %d \t %d \t %d \n", ultrasonic_distances_m
 355:main.c        ****                                                      ultrasonic_distances_mm[1],
 356:main.c        ****                                                      ultrasonic_distances_mm[2],
 357:main.c        ****                                                         ultrasonic_distances_mm[3],
 358:main.c        ****                                                         ultrasonic_distances_mm[4]);
 359:main.c        ****                             UART_1_PutString(output);
 360:main.c        ****                         }
 361:main.c        ****                         // 0 gave front left    // front left
 362:main.c        ****                         // 1 gave front right   // front right 
 363:main.c        ****                         // 2 gave back sensor   // side left now??? 
 364:main.c        ****                         // 3 gave side right    // side right 
 365:main.c        ****                         // 4 gave back sensor   // back sensor
 366:main.c        ****                         
 367:main.c        ****                         while(0) {
 368:main.c        ****                             for (int i = 0; i < 5; i++)
 369:main.c        ****                             {
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 9


 370:main.c        ****                                 distanceSensor(i);
 371:main.c        ****                                 CyDelay(100);
 372:main.c        ****                                 sprintf(output, "%d \t", ultrasonic_distances_mm[i]);
 373:main.c        ****                                 UART_1_PutString(output);
 374:main.c        ****                             }
 375:main.c        ****                             UART_1_PutString("\n");
 376:main.c        ****                         }
 377:main.c        ****                         
 378:main.c        ****                         
 379:main.c        ****                         
 380:main.c        ****                         
 381:main.c        ****                         // TEST FIRING
 382:main.c        ****                         for (int i = 0; i < 5; i++)
 383:main.c        ****                             {
 384:main.c        ****                                 distanceSensor(i);
 385:main.c        ****                                 CyDelay(100);
 386:main.c        ****                                 sprintf(output, "%d \t", ultrasonic_distances_mm[i]);
 387:main.c        ****                                 UART_1_PutString(output);
 388:main.c        ****                             }
 389:main.c        ****                         UART_1_PutString("\n");
 390:main.c        ****                         
 391:main.c        ****                         
 392:main.c        ****                         moveUntil(-150);              // should keep moving until we approach 50mm 
 393:main.c        ****                         straightAdjust();
 394:main.c        ****                         
 395:main.c        ****                         
 396:main.c        ****                         /*
 397:main.c        ****                         for (int i = 0; i < 5; i++)
 398:main.c        ****                         {
 399:main.c        ****                             sprintf(output, "%d: \t", i);       
 400:main.c        ****                             UART_1_PutString(output);
 401:main.c        ****                         }
 402:main.c        ****                         UART_1_PutString("\n");   
 403:main.c        ****                         
 404:main.c        ****                         
 405:main.c        ****                         for (int i = 0; i < 50; i++) {
 406:main.c        ****                         distanceCheck();
 407:main.c        ****                         CyDelay(200);
 408:main.c        ****                         }
 409:main.c        ****                         
 410:main.c        ****                         */
 411:main.c        ****                         
 412:main.c        ****                         //straightAdjust();
 413:main.c        ****                         
 414:main.c        ****                         
 415:main.c        ****                         lock = TRUE;    
 416:main.c        ****                     }
 417:main.c        ****             } while (lock == TRUE);    
 418:main.c        ****         }    
 419:main.c        ****         
 420:main.c        ****                    
 421:main.c        ****         // MOVEMENT TESTING:
 422:main.c        ****         
 423:main.c        ****         //mishaMoveDynamic(850);
 424:main.c        ****         //mishaMoveDynamic(-850);
 425:main.c        ****         
 426:main.c        ****         //mishaMoveDynamic(230);
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 10


 427:main.c        ****         //while(1) {};  
 428:main.c        **** 
 429:main.c        ****         if (state == STATE_SCAN_PLAN) {              // colour sensing, while switch has not been p
 430:main.c        ****             
 431:main.c        ****             while(0){
 432:main.c        ****             moveUntil(400);
 433:main.c        ****             mishaMoveDynamic(-450);
 434:main.c        ****             CyDelay(500);
 435:main.c        ****             colourSensingInitialise();      // Initialises wall colour sensor against the black wal
 436:main.c        ****             CyDelay(500);
 437:main.c        ****             mishaMoveDynamic(170);
 438:main.c        ****             CyDelay(500);
 439:main.c        ****             
 440:main.c        ****             for (int i = 0; i < 5; i++) {                       // scan each of the pucks 
 441:main.c        ****                 puckRackColours[i] = colourSensingOutput();
 442:main.c        ****                 CyDelay(500);
 443:main.c        ****                 mishaMoveDynamic(61);
 444:main.c        ****                 CyDelay(500);
 445:main.c        ****             }
 446:main.c        ****             }
 447:main.c        ****             
 448:main.c        ****             straightAdjust();
 449:main.c        ****             moveUntil(-100);
 450:main.c        ****             colourSensingInitialise();      // Initialises wall colour sensor against the black wal
 451:main.c        ****                         
 452:main.c        ****             for (int i = 0; i < 5; i++) { 
 453:main.c        ****                 // scan each of the pucks 
 454:main.c        ****                 moveUntil(puckRackOffsetsFromWest[i]);
 455:main.c        ****                 CyDelay(500);
 456:main.c        ****                 puckRackColours[i] = colourSensingOutput();
 457:main.c        ****                 CyDelay(500);
 458:main.c        ****                                 
 459:main.c        ****             
 460:main.c        ****             
 461:main.c        ****             straightAdjust();
 462:main.c        ****             }
 463:main.c        ****                        
 464:main.c        ****             UART_1_PutString("Found Colours: \n");
 465:main.c        ****             for (int i = 0; i < 5; i++) 
 466:main.c        ****             {
 467:main.c        ****                 sprintf(output, "%i \n", puckRackColours[i]);    // updates UART showing values of 
 468:main.c        ****                 UART_1_PutString(output);
 469:main.c        ****             }
 470:main.c        ****             
 471:main.c        ****             
 472:main.c        ****             control_photodiode_Write(1);    // changes to claw photodiode
 473:main.c        ****             colour_sensing_algorithm = 1;   // changes it to claw algorithm
 474:main.c        ****                        
 475:main.c        ****             //while(1) {}
 476:main.c        ****             
 477:main.c        ****             // THEN WE FILTER THE NO PUCK VALUES:
 478:main.c        ****             int puckConstructionPlanIndex = 0; // Will be used to iterate through the 3 puck colour
 479:main.c        ****             
 480:main.c        ****             // Iterate over all 5 rack slots and place the 3 colours into puckConstructionPlan.
 481:main.c        ****             for (int puckRackIndex = 0; puckRackIndex < 5; puckRackIndex++){
 482:main.c        ****                 if (puckRackColours[puckRackIndex] != BLANK && puckConstructionPlanIndex != 3){
 483:main.c        ****                     puckConstructionPlan[puckConstructionPlanIndex] = puckRackColours[puckRackIndex
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 11


 484:main.c        ****                     puckConstructionPlanIndex++;
 485:main.c        ****                 }
 486:main.c        ****             }
 487:main.c        ****                     
 488:main.c        ****             // MOVE into the next state: 
 489:main.c        ****             state = STATE_LOCATE_BLOCK_AND_PUCKS;
 490:main.c        ****             
 491:main.c        ****             /*
 492:main.c        ****             if (!moving){
 493:main.c        ****                 moving = 1;
 494:main.c        ****             if (initialisation){moveBackwardIndefinitely(); initialisation = 0;}
 495:main.c        ****             else {moveForwardIndefinitely();}        
 496:main.c        ****            
 497:main.c        ****             
 498:main.c        ****             moveAndAngle(SCAN_INITIALISE_HORIZONTAL,PLAN_SCAN_VERTICAL,WEST_ANGLE); // Move beyond 
 499:main.c        ****             
 500:main.c        ****             // Read the black wall
 501:main.c        ****             
 502:main.c        ****             for (currentPuckRackScanningIndex = 0; currentPuckRackScanningIndex <= 4; currentPuckRa
 503:main.c        ****                 moveAndAngle(puckRackOffsetsFromWest[currentPuckRackScanningIndex],PLAN_SCAN_VERTIC
 504:main.c        ****                 puckRackColours[currentPuckRackScanningIndex] = colourSensingOutput();
 505:main.c        ****             }
 506:main.c        **** 
 507:main.c        ****             
 508:main.c        ****             */
 509:main.c        ****         }
 510:main.c        ****         
 511:main.c        ****         
 512:main.c        **** 
 513:main.c        ****     	if (state == STATE_LOCATE_BLOCK_AND_PUCKS){
 514:main.c        ****             
 515:main.c        ****             mishaSwivel(-45);  
 516:main.c        ****             mishaMoveDynamic(-150);
 517:main.c        ****             mishaSwivel(45);
 518:main.c        ****             mishaMoveDynamic(200);
 519:main.c        ****             mishaSwivel(90);
 520:main.c        ****             mishaMoveDynamic(500);
 521:main.c        ****             
 522:main.c        ****             
 523:main.c        ****             // Finding where the boundaries of the block are
 524:main.c        ****     		// Sweep across WEST to EAST until discrepancy
 525:main.c        ****             // But first sense the construction plan and then drive to wall and turn around to prep
 526:main.c        ****             
 527:main.c        ****             /*
 528:main.c        ****     		moveForwardIndefinitely();
 529:main.c        ****     		turnRight(180); // Now facing EAST wall
 530:main.c        ****     		moveForwardIndefinitely(); // Do this until we get to EAST wall
 531:main.c        ****             */
 532:main.c        ****             
 533:main.c        ****             //moveAndAngle(20,20,EAST_ANGLE); // Move to a position near construction base in an EA
 534:main.c        ****             //moveForwardIndefinitely(); // Scan until we reach EAST wall.
 535:main.c        ****             
 536:main.c        ****             // Will now know the boundaries of the block.
 537:main.c        ****             // Figure out direction we want to travel
 538:main.c        ****             
 539:main.c        **** 
 540:main.c        ****             //pathPastBlock = (block_edge_location[WEST] >= WIDTH_SENSOR_TO_SENSOR + SAFETY_MARGIN 
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 12


 541:main.c        ****             //pathToPucks = (puckPileLocation < ARENA_WIDTH / 2 ? WEST:EAST);
 542:main.c        ****             
 543:main.c        ****             state = STATE_GO_TO_PUCKS;
 544:main.c        **** 	    }
 545:main.c        ****         
 546:main.c        ****         
 547:main.c        ****         
 548:main.c        **** /*
 549:main.c        ****         if (state == STATE_GO_TO_PUCKS){
 550:main.c        ****             
 551:main.c        ****             
 552:main.c        ****             if (pathPastBlock == WEST){
 553:main.c        ****                 if (pathToPucks != WEST) {
 554:main.c        ****                     moveAndAngle(SAFETY_MARGIN / 2 + WIDTH_SENSOR_TO_SENSOR / 2, ARENA_LENGTH - FRO
 555:main.c        ****                 }
 556:main.c        ****                 else {moveAndAngle(SAFETY_MARGIN / 2 + WIDTH_SENSOR_TO_SENSOR / 2, ARENA_LENGTH - F
 557:main.c        ****             }
 558:main.c        ****             else {
 559:main.c        ****                 if (pathToPucks != EAST) {
 560:main.c        ****                     moveAndAngle(ARENA_WIDTH - SAFETY_MARGIN / 2 - WIDTH_SENSOR_TO_SENSOR / 2, AREN
 561:main.c        ****                 }
 562:main.c        ****                 else {moveAndAngle(ARENA_WIDTH - SAFETY_MARGIN / 2 - WIDTH_SENSOR_TO_SENSOR / 2, AR
 563:main.c        ****             }
 564:main.c        ****             
 565:main.c        ****             // Now depending on if the pucks are in the corner or not, 
 566:main.c        ****             
 567:main.c        ****             // We are now in front of the pucks
 568:main.c        ****             
 569:main.c        ****             
 570:main.c        ****             state = STATE_FIND_REQUIRED_PUCK;
 571:main.c        ****         }
 572:main.c        ****         
 573:main.c        ****         */
 574:main.c        ****         
 575:main.c        ****         #define CLEARANCE_RADIUS_CENTER_TO_BACK 24 // Smallest circle centered about turning point 
 576:main.c        ****         #define CLEARANCE_RADIUS_CENTER_TO_FRONT 13 // Smallest circle centered about turning point
 577:main.c        ****         #define FRONT 0
 578:main.c        ****         //#define BACK 1
 579:main.c        ****         //#define LEFT 0
 580:main.c        ****         //#define RIGHT 1
 581:main.c        ****         
 582:main.c        ****         /*
 583:main.c        ****         // Ensure that we are @ east wall facing east at a minimum verticaldistance so we can turn 
 584:main.c        ****         if (state == STATE_GO_TO_PUCKS){
 585:main.c        ****             
 586:main.c        ****             if (blockEastClearance && puckEastClearance){
 587:main.c        ****                 
 588:main.c        ****                 moveBackwardUntil(CLEARANCE_RADIUS_CENTER_TO_FRONT,FRONT);
 589:main.c        ****                 faceDirection(NORTH_ANGLE);
 590:main.c        ****                 moveForwardUntil(CLEARANCE_RADIUS_CENTER_TO_FRONT,FRONT);
 591:main.c        ****                 //displaceLeft(); Repeatedly call this if below function not implemented
 592:main.c        ****                 //displaceLeftUntil(CLEARANCE_RADIUS_CENTER_TO_BACK,RIGHT);
 593:main.c        ****                 faceDirection(WEST_ANGLE);
 594:main.c        ****                 //displaceLeft();
 595:main.c        ****                 //displaceLeftUntil(DISTANCE_PUCKS_FROM_NORTH + WIDTH_SENSOR_TO_CENTER ,RIGHT);
 596:main.c        ****                 moveForwardUntil(DISTANCE_STOPPED_FROM_PUCK,FRONT); // Can change 10 to any value r
 597:main.c        ****                 // Now front sensor 10cm away from puck, ready to pick up puck
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 13


 598:main.c        ****                 moveForward(DISTANCE_STOPPED_FROM_PUCK + 3); // Adding 3 should move the claw enoug
 599:main.c        ****                 
 600:main.c        ****             }
 601:main.c        ****             
 602:main.c        ****             else if (blockWestClearance && puckWestClearance){
 603:main.c        ****                 
 604:main.c        ****                 moveBackwardUntil(CLEARANCE_RADIUS_CENTER_TO_FRONT,FRONT);
 605:main.c        ****                 faceDirection(NORTH_ANGLE);
 606:main.c        ****                 moveForwardUntil(CLEARANCE_RADIUS_CENTER_TO_FRONT,FRONT);
 607:main.c        ****                 //displaceLeft(); Repeatedly call this if below function not implemented
 608:main.c        ****                 //displaceLeftUntil(CLEARANCE_RADIUS_CENTER_TO_BACK,RIGHT);
 609:main.c        ****                 faceDirection(WEST_ANGLE);
 610:main.c        ****                 //displaceLeft();
 611:main.c        ****                 //displaceLeftUntil(DISTANCE_PUCKS_FROM_NORTH + WIDTH_SENSOR_TO_CENTER ,RIGHT);
 612:main.c        ****                 moveForwardUntil(DISTANCE_STOPPED_FROM_PUCK,FRONT); // Can change 10 to any value r
 613:main.c        ****                 // Now front sensor 10cm away from puck, ready to pick up puck
 614:main.c        ****                 moveForward(DISTANCE_STOPPED_FROM_PUCK + 3); // Adding 3 should move the claw enoug
 615:main.c        ****                 
 616:main.c        ****             }
 617:main.c        ****             
 618:main.c        ****             else if (blockEastClearance && puckWestClearance){
 619:main.c        ****                 
 620:main.c        ****             }
 621:main.c        ****             
 622:main.c        ****             else if (blockWestClearance && puckEastClearance){
 623:main.c        ****                 
 624:main.c        ****             }
 625:main.c        ****             
 626:main.c        ****             
 627:main.c        ****             
 628:main.c        ****         }
 629:main.c        ****         */
 630:main.c        ****         
 631:main.c        ****         
 632:main.c        ****         if (state == STATE_FIND_REQUIRED_PUCK)
 633:main.c        ****         {
 634:main.c        ****             
 635:main.c        ****             
 636:main.c        ****         SPEED = 70;    
 637:main.c        ****         int puck_correct = FALSE;   // A flag to determine if the correct puck has been picked up
 638:main.c        ****         int puck_scan;
 639:main.c        ****         
 640:main.c        ****     
 641:main.c        ****         puckConstructionPlan[1] = RED;
 642:main.c        ****     
 643:main.c        ****         // Scanning puck:
 644:main.c        **** 
 645:main.c        ****         while (puck_correct == FALSE) 
 646:main.c        ****         {
 647:main.c        ****             mishaMoveDynamic(50);  // robot moves forward towards puck
 648:main.c        ****                                     // could replace this with the distance gathered from the ultra
 649:main.c        ****             changeHeightToPuck(1);  // arm lowers onto robot
 650:main.c        ****             puck_scan = colourSensingOutput();  // colour sensor takes a scan
 651:main.c        ****             changeHeightToPuck(3);  // arm returns to high position
 652:main.c        ****             mishaMoveDynamic(-50);   // robot moves backwards
 653:main.c        ****             if (puck_scan == puckConstructionPlan[1]) {puck_correct = TRUE;}
 654:main.c        ****                                     // if colour == true:
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 14


 655:main.c        ****                 
 656:main.c        ****             else 
 657:main.c        ****             {
 658:main.c        ****                                     // if colour == false
 659:main.c        ****                                         // robot translates to side to see next puck, and performs 
 660:main.c        ****             }
 661:main.c        ****         }
 662:main.c        ****                 
 663:main.c        ****         // Picking Up puck from pile:
 664:main.c        ****         changeHeightToPuck(0);      // arm lowers to ground
 665:main.c        ****         //changeHeightToPuck(1);
 666:main.c        ****         moveUntilPuck();
 667:main.c        ****         //mishaMoveDynamic(60);       // robot moves forward
 668:main.c        ****         armClose();                 // claw closes on puck
 669:main.c        ****         changeHeightToPuck(3);      // arm lifts up to highest position
 670:main.c        ****         mishaMoveDynamic(-60);       // robot moves back away from puck area 
 671:main.c        ****         
 672:main.c        ****             
 673:main.c        ****         while(1) {};           
 674:main.c        ****             
 675:main.c        ****             /*
 676:main.c        ****             int requiredColour = puckConstructionPlan[currentPuckStackSize];
 677:main.c        ****             int puckFound = 0;
 678:main.c        ****             
 679:main.c        ****             
 680:main.c        ****             // Let's assume that we get to the east or west of the puck pile and we are as close to
 681:main.c        ****             if (roundDirection() == NORTH){
 682:main.c        **** 
 683:main.c        ****             }
 684:main.c        ****             else if (roundDirection() == EAST){
 685:main.c        ****                 // Poll ultrasonics, displaceRight until no longer see the pucks
 686:main.c        ****                 // Drive up to the middle puck
 687:main.c        ****                 // We know that we used moveAndAngle() to get to the exact vertical position of the
 688:main.c        ****                 moveForwardIndefinitely();
 689:main.c        ****                 
 690:main.c        ****                 // May need to displaceRight a bit to ensure that we are perfectly centered with th
 691:main.c        ****                 // Now we need to inch forward with the claw lifted
 692:main.c        ****                 // Also store the horizontal location of the pucks based off our current position. 
 693:main.c        ****                 
 694:main.c        ****                 horizontalPuckGrid = currentPosition[0]; // Take our horizontal position as a refer
 695:main.c        ****                 
 696:main.c        ****                 changeHeightToPuck(1); // Lift up enough so we dont hit the pucks when scanning the
 697:main.c        ****                 moveForward(DISTANCE_STOPPED_FROM_PUCK); // Move forward until colour sensor above 
 698:main.c        ****                
 699:main.c        ****                 if (colourSensingOutput() == puckConstructionPlan[currentPuckStackSize]){ 
 700:main.c        ****                     // This is the puck we need
 701:main.c        ****                     moveBackward(DISTANCE_STOPPED_FROM_PUCK); // Reverse to make room for lowering 
 702:main.c        ****                     lowerAndOpen(0); // We are grabbing the pucks from the ground.
 703:main.c        ****                     moveForward(DISTANCE_STOPPED_FROM_PUCK);
 704:main.c        ****                     closeAndRaise(1); // Lift above the height of the ground pucks
 705:main.c        **** 
 706:main.c        ****                 }
 707:main.c        ****                 
 708:main.c        ****                 // If the colour isn't what we need, we could pick it up and drop it somewhere out 
 709:main.c        ****                 else {
 710:main.c        ****                     moveBackward(DISTANCE_STOPPED_FROM_PUCK); // Need to check the next puck
 711:main.c        ****                     displaceLeft(5,22);
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 15


 712:main.c        ****                     changeHeightToPuck(1); // Lift up enough so we dont hit the pucks when scanning
 713:main.c        ****                     moveForward(DISTANCE_STOPPED_FROM_PUCK); // Move forward until colour sensor ab
 714:main.c        ****                     
 715:main.c        ****                     // Scan the next puck
 716:main.c        ****                     if (colourSensingOutput() == puckConstructionPlan[currentPuckStackSize]){ 
 717:main.c        ****                         // This is the puck we need
 718:main.c        ****                         moveBackward(DISTANCE_STOPPED_FROM_PUCK); // Reverse to make room for lower
 719:main.c        ****                         lowerAndOpen(0); // We are grabbing the pucks from the ground.
 720:main.c        ****                         moveForward(DISTANCE_STOPPED_FROM_PUCK);
 721:main.c        ****                         closeAndRaise(1); // Lift above the height of the ground pucks
 722:main.c        **** 
 723:main.c        ****                     }
 724:main.c        ****                     
 725:main.c        ****                     else {
 726:main.c        ****                         moveBackward(DISTANCE_STOPPED_FROM_PUCK); // Need to check the next puck
 727:main.c        ****                         displaceLeft(5,22);
 728:main.c        ****                         changeHeightToPuck(1); // Lift up enough so we dont hit the pucks when scan
 729:main.c        ****                         moveForward(DISTANCE_STOPPED_FROM_PUCK); // Move forward until colour senso
 730:main.c        ****                         
 731:main.c        ****                         if (colourSensingOutput() == puckConstructionPlan[currentPuckStackSize]){ 
 732:main.c        ****                             // This is the puck we need
 733:main.c        ****                             moveBackward(DISTANCE_STOPPED_FROM_PUCK); // Reverse to make room for l
 734:main.c        ****                             lowerAndOpen(0); // We are grabbing the pucks from the ground.
 735:main.c        ****                             moveForward(DISTANCE_STOPPED_FROM_PUCK);
 736:main.c        ****                             closeAndRaise(1); // Lift above the height of the ground pucks
 737:main.c        **** 
 738:main.c        ****                         }
 739:main.c        ****                     
 740:main.c        ****                     }
 741:main.c        ****                 }
 742:main.c        ****                 
 743:main.c        ****                 if (colourSensingOutput() == puckConstructionPlan[currentPuckStackSize]){ 
 744:main.c        ****                     // This is the puck we need
 745:main.c        ****                     moveBackward(DISTANCE_STOPPED_FROM_PUCK); // Reverse to make room for lowering 
 746:main.c        ****                     lowerAndOpen(0); // We are grabbing the pucks from the ground.
 747:main.c        ****                     moveForward(DISTANCE_STOPPED_FROM_PUCK);
 748:main.c        ****                     closeAndRaise(1); // Lift above the height of the ground pucks
 749:main.c        **** 
 750:main.c        ****                 }
 751:main.c        ****                 
 752:main.c        ****             }
 753:main.c        ****             
 754:main.c        ****             else if (roundDirection() == WEST){
 755:main.c        ****                 // Poll ultrasonics, displaceRight until no longer see the pucks
 756:main.c        ****                 // Drive up to the middle puck
 757:main.c        ****                 // We know that we used moveAndAngle() to get to the exact vertical position of the
 758:main.c        ****                 moveForwardIndefinitely();
 759:main.c        ****             }
 760:main.c        ****             
 761:main.c        ****             */
 762:main.c        ****             
 763:main.c        ****             /*
 764:main.c        ****             while(!puckFound){
 765:main.c        ****                   
 766:main.c        ****             }
 767:main.c        ****             */
 768:main.c        ****             
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 16


 769:main.c        ****             
 770:main.c        ****         }
 771:main.c        ****         
 772:main.c        ****         if (state == STATE_DEPOSIT_PUCK){
 773:main.c        **** 
 774:main.c        ****             /*
 775:main.c        ****             moveAndAngle(CONSTRUCTION_MIDPOINT,CONSTRUCTION_DISTANCE_FROM_WALL + 10, SOUTH_ANGLE); 
 776:main.c        ****             lowerAndOpen(currentPuckStackSize);
 777:main.c        ****             moveAndAngle(CONSTRUCTION_MIDPOINT,CONSTRUCTION_DISTANCE_FROM_WALL, SOUTH_ANGLE); // Ta
 778:main.c        ****             changeHeightToPuck(currentPuckStackSize + 1); // Lift claw above stack to avoid hitting
 779:main.c        ****             moveAndAngle(CONSTRUCTION_MIDPOINT,CONSTRUCTION_DISTANCE_FROM_WALL, SOUTH_ANGLE); // Ta
 780:main.c        **** 
 781:main.c        ****             
 782:main.c        ****             lowerAndOpen(current_stage);
 783:main.c        ****             changeHeightToPuck(current_stage + 1); // Lift claw above stack to avoid hitting the st
 784:main.c        ****             
 785:main.c        ****             current_stage++;
 786:main.c        ****             
 787:main.c        ****             if (current_stage == 3){state = STATE_PARK_HOME;}        // Returns to home 
 788:main.c        ****             */
 789:main.c        ****             
 790:main.c        ****         }
 791:main.c        ****         
 792:main.c        ****         if (state == STATE_PARK_HOME){
 793:main.c        ****             
 794:main.c        ****             //moveAndAngle(HOME_MIDPOINT, HOME_PARKING_DISTANCE, NORTH_ANGLE); // Should reverse in
 795:main.c        ****             
 796:main.c        ****             // Run code to stop robot entirely.
 797:main.c        ****         }
 798:main.c        ****         
 799:main.c        ****         
 800:main.c        ****     }    
 801:main.c        **** }
 802:main.c        **** 
 803:main.c        **** void armMoving(void){
  88              		.loc 1 803 0
  89              		.cfi_startproc
  90              		@ args = 0, pretend = 0, frame = 0
  91              		@ frame_needed = 0, uses_anonymous_args = 0
  92 0000 38B5     		push	{r3, r4, r5, lr}
  93              		.cfi_def_cfa_offset 16
  94              		.cfi_offset 3, -16
  95              		.cfi_offset 4, -12
  96              		.cfi_offset 5, -8
  97              		.cfi_offset 14, -4
  98              	.LVL2:
 804:main.c        ****     
 805:main.c        ****     int puck_correct = FALSE;   // A flag to determine if the correct puck has been picked up
 806:main.c        ****     int puck_scan;
 807:main.c        ****     
 808:main.c        ****     puckConstructionPlan[1] = RED;
  99              		.loc 1 808 0
 100 0002 0122     		movs	r2, #1
 101 0004 0D4B     		ldr	r3, .L13
 102 0006 9A60     		str	r2, [r3, #8]
 809:main.c        ****     
 810:main.c        **** // States
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 17


 811:main.c        ****     // moving
 812:main.c        ****     changeHeightToPuck(3);  // Arm has to be lifted to highest position
 103              		.loc 1 812 0
 104 0008 0320     		movs	r0, #3
 105 000a FFF7FEFF 		bl	changeHeightToPuck
 106              	.LVL3:
 805:main.c        ****     int puck_scan;
 107              		.loc 1 805 0
 108 000e 0025     		movs	r5, #0
 813:main.c        ****         // THIS WILL be ensured by always returning the claw to the highest position after completi
 814:main.c        ****         
 815:main.c        ****     // Scanning puck:
 816:main.c        ****     while (puck_correct == FALSE) 
 109              		.loc 1 816 0
 110 0010 11E0     		b	.L8
 111              	.LVL4:
 112              	.L10:
 817:main.c        ****     {
 818:main.c        ****                                 // robot moves forward towards puck
 819:main.c        ****         changeHeightToPuck(1);  // arm lowers onto robot
 113              		.loc 1 819 0
 114 0012 0120     		movs	r0, #1
 115 0014 FFF7FEFF 		bl	changeHeightToPuck
 116              	.LVL5:
 820:main.c        ****         puck_scan = colourSensingOutput();  // colour sensor takes a scan
 117              		.loc 1 820 0
 118 0018 FFF7FEFF 		bl	colourSensingOutput
 119              	.LVL6:
 120 001c 0446     		mov	r4, r0
 121              	.LVL7:
 821:main.c        ****         changeHeightToPuck(3);  // arm returns to high position
 122              		.loc 1 821 0
 123 001e 0320     		movs	r0, #3
 124              	.LVL8:
 125 0020 FFF7FEFF 		bl	changeHeightToPuck
 126              	.LVL9:
 822:main.c        ****                                 // robot moves backwards
 823:main.c        ****         if (puck_scan == puckConstructionPlan[current_stage]) {puck_correct = TRUE;}
 127              		.loc 1 823 0
 128 0024 064B     		ldr	r3, .L13+4
 129 0026 5A68     		ldr	r2, [r3, #4]
 130 0028 044B     		ldr	r3, .L13
 131 002a 03EB8203 		add	r3, r3, r2, lsl #2
 132 002e 5B68     		ldr	r3, [r3, #4]
 133 0030 9C42     		cmp	r4, r3
 134 0032 00D1     		bne	.L8
 135 0034 0125     		movs	r5, #1
 136              	.LVL10:
 137              	.L8:
 816:main.c        ****     {
 138              		.loc 1 816 0
 139 0036 002D     		cmp	r5, #0
 140 0038 EBD0     		beq	.L10
 824:main.c        ****                                 // if colour == true:
 825:main.c        ****                                     // enter picking up puck from 
 826:main.c        ****         else 
 827:main.c        ****         {
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 18


 828:main.c        ****                                 // if colour == false
 829:main.c        ****                                     // robot translates to side to see next puck, and performs scan
 830:main.c        ****         }
 831:main.c        ****     }
 832:main.c        ****     
 833:main.c        ****     /*
 834:main.c        ****     
 835:main.c        ****     // Picking Up puck from pile:
 836:main.c        ****     changeHeightToPuck(0);      // arm lowers to ground
 837:main.c        ****                                 // robot moves forward
 838:main.c        ****     armClose();                 // claw closes on puck
 839:main.c        ****     changeHeightToPuck(3);      // arm lifts up to highest position
 840:main.c        ****                                 // robot moves back away from puck area   
 841:main.c        ****       
 842:main.c        ****     
 843:main.c        ****     // Deposition puck in construction zone:
 844:main.c        ****                                 // arm will be in highest position from moving
 845:main.c        ****         changeHeightToPuck(current_stage-1);    // arm moves to position of stacking pucks         
 846:main.c        ****                                                 // stage 1st = ground/0
 847:main.c        ****                                                 // stage 2nd = 1
 848:main.c        ****                                                 // stage 3rd = 2
 849:main.c        ****         armOpen();              // gripper releases puck
 850:main.c        ****         changeHeightToPuck(3);  // arm moves back to highest position availabe
 851:main.c        ****                                 // robot moves away 
 852:main.c        ****     */
 853:main.c        ****     
 854:main.c        **** }
 141              		.loc 1 854 0
 142 003a 38BD     		pop	{r3, r4, r5, pc}
 143              	.LVL11:
 144              	.L14:
 145              		.align	2
 146              	.L13:
 147 003c 00000000 		.word	.LANCHOR0
 148 0040 00000000 		.word	.LANCHOR1
 149              		.cfi_endproc
 150              	.LFE67:
 151              		.size	armMoving, .-armMoving
 152              		.section	.text.moveUntilPuck,"ax",%progbits
 153              		.align	2
 154              		.global	moveUntilPuck
 155              		.thumb
 156              		.thumb_func
 157              		.type	moveUntilPuck, %function
 158              	moveUntilPuck:
 159              	.LFB68:
 855:main.c        **** 
 856:main.c        **** void moveUntilPuck(void) {
 160              		.loc 1 856 0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 0, uses_anonymous_args = 0
 164 0000 10B5     		push	{r4, lr}
 165              		.cfi_def_cfa_offset 8
 166              		.cfi_offset 4, -8
 167              		.cfi_offset 14, -4
 168              	.LVL12:
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 19


 857:main.c        ****     int puck_detect = 0;
 858:main.c        ****     Motor_Left_Control_Write(0);
 169              		.loc 1 858 0
 170 0002 0020     		movs	r0, #0
 171 0004 FFF7FEFF 		bl	Motor_Left_Control_Write
 172              	.LVL13:
 859:main.c        ****     Motor_Right_Control_Write(0);
 173              		.loc 1 859 0
 174 0008 0020     		movs	r0, #0
 175 000a FFF7FEFF 		bl	Motor_Right_Control_Write
 176              	.LVL14:
 860:main.c        ****     
 861:main.c        ****     Motor_Left_Driver_Wakeup();
 177              		.loc 1 861 0
 178 000e FFF7FEFF 		bl	Motor_Left_Driver_Wakeup
 179              	.LVL15:
 862:main.c        ****     Motor_Left_Driver_WriteCompare(SPEED);
 180              		.loc 1 862 0
 181 0012 124C     		ldr	r4, .L19
 182 0014 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 183 0016 FFF7FEFF 		bl	Motor_Left_Driver_WriteCompare
 184              	.LVL16:
 863:main.c        ****     Motor_Right_Driver_Wakeup();
 185              		.loc 1 863 0
 186 001a FFF7FEFF 		bl	Motor_Right_Driver_Wakeup
 187              	.LVL17:
 864:main.c        ****     Motor_Right_Driver_WriteCompare(SPEED);
 188              		.loc 1 864 0
 189 001e 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 190 0020 FFF7FEFF 		bl	Motor_Right_Driver_WriteCompare
 191              	.LVL18:
 865:main.c        ****     
 866:main.c        ****     colour_sensing_algorithm = 2;       
 192              		.loc 1 866 0
 193 0024 0222     		movs	r2, #2
 194 0026 0E4B     		ldr	r3, .L19+4
 195 0028 1A61     		str	r2, [r3, #16]
 857:main.c        ****     Motor_Left_Control_Write(0);
 196              		.loc 1 857 0
 197 002a 0024     		movs	r4, #0
 867:main.c        ****     
 868:main.c        ****     while (puck_detect == 0) 
 198              		.loc 1 868 0
 199 002c 05E0     		b	.L16
 200              	.LVL19:
 201              	.L17:
 869:main.c        ****     {
 870:main.c        ****         puck_detect = colourSensingOutput();
 202              		.loc 1 870 0
 203 002e FFF7FEFF 		bl	colourSensingOutput
 204              	.LVL20:
 205 0032 0446     		mov	r4, r0
 206              	.LVL21:
 871:main.c        ****         CyDelay(10);
 207              		.loc 1 871 0
 208 0034 0A20     		movs	r0, #10
 209              	.LVL22:
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 20


 210 0036 FFF7FEFF 		bl	CyDelay
 211              	.LVL23:
 212              	.L16:
 868:main.c        ****     {
 213              		.loc 1 868 0
 214 003a 002C     		cmp	r4, #0
 215 003c F7D0     		beq	.L17
 872:main.c        ****         //sprintf(output, "%i \t", puck_detect);       
 873:main.c        ****         //UART_1_PutString(output);
 874:main.c        ****     }
 875:main.c        ****        
 876:main.c        ****     Motor_Left_Decoder_SetCounter(0);
 216              		.loc 1 876 0
 217 003e 0020     		movs	r0, #0
 218 0040 FFF7FEFF 		bl	Motor_Left_Decoder_SetCounter
 219              	.LVL24:
 877:main.c        ****     Motor_Right_Decoder_SetCounter(0);
 220              		.loc 1 877 0
 221 0044 0020     		movs	r0, #0
 222 0046 FFF7FEFF 		bl	Motor_Right_Decoder_SetCounter
 223              	.LVL25:
 878:main.c        ****     
 879:main.c        ****     Motor_Left_Driver_Sleep();
 224              		.loc 1 879 0
 225 004a FFF7FEFF 		bl	Motor_Left_Driver_Sleep
 226              	.LVL26:
 880:main.c        ****     Motor_Right_Driver_Sleep();
 227              		.loc 1 880 0
 228 004e FFF7FEFF 		bl	Motor_Right_Driver_Sleep
 229              	.LVL27:
 881:main.c        ****     
 882:main.c        ****     mishaMoveDynamic(30);
 230              		.loc 1 882 0
 231 0052 1E20     		movs	r0, #30
 232 0054 FFF7FEFF 		bl	mishaMoveDynamic
 233              	.LVL28:
 234 0058 10BD     		pop	{r4, pc}
 235              	.LVL29:
 236              	.L20:
 237 005a 00BF     		.align	2
 238              	.L19:
 239 005c 00000000 		.word	SPEED
 240 0060 00000000 		.word	.LANCHOR0
 241              		.cfi_endproc
 242              	.LFE68:
 243              		.size	moveUntilPuck, .-moveUntilPuck
 244              		.section	.text.straightAdjust,"ax",%progbits
 245              		.align	2
 246              		.global	straightAdjust
 247              		.thumb
 248              		.thumb_func
 249              		.type	straightAdjust, %function
 250              	straightAdjust:
 251              	.LFB69:
 883:main.c        ****     
 884:main.c        **** }
 885:main.c        **** 
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 21


 886:main.c        **** 
 887:main.c        **** void straightAdjust(void) {
 252              		.loc 1 887 0
 253              		.cfi_startproc
 254              		@ args = 0, pretend = 0, frame = 0
 255              		@ frame_needed = 0, uses_anonymous_args = 0
 256 0000 70B5     		push	{r4, r5, r6, lr}
 257              		.cfi_def_cfa_offset 16
 258              		.cfi_offset 4, -16
 259              		.cfi_offset 5, -12
 260              		.cfi_offset 6, -8
 261              		.cfi_offset 14, -4
 262              	.LVL30:
 888:main.c        ****        
 889:main.c        ****     int front_left;
 890:main.c        ****     int front_right;
 891:main.c        ****     int difference = 300;
 263              		.loc 1 891 0
 264 0002 4FF49674 		mov	r4, #300
 892:main.c        ****     int tolerance = 3;
 893:main.c        ****     
 894:main.c        ****     //distanceCheck(); 
 895:main.c        ****     
 896:main.c        ****     while (abs(difference) > 200) {              // ensures the initial readings are accurate
 265              		.loc 1 896 0
 266 0006 29E0     		b	.L22
 267              	.LVL31:
 268              	.L23:
 897:main.c        ****         distanceSensor(FRONT_LEFT);
 269              		.loc 1 897 0
 270 0008 0020     		movs	r0, #0
 271 000a FFF7FEFF 		bl	distanceSensor
 272              	.LVL32:
 898:main.c        ****         CyDelay(50);                        // 50ms might not be enough ???
 273              		.loc 1 898 0
 274 000e 3220     		movs	r0, #50
 275 0010 FFF7FEFF 		bl	CyDelay
 276              	.LVL33:
 899:main.c        ****         sprintf(output, "%d \t", ultrasonic_distances_mm[FRONT_LEFT]);
 277              		.loc 1 899 0
 278 0014 674E     		ldr	r6, .L32
 279 0016 684C     		ldr	r4, .L32+4
 280              	.LVL34:
 281 0018 684D     		ldr	r5, .L32+8
 282 001a 3268     		ldr	r2, [r6]
 283 001c 2146     		mov	r1, r4
 284 001e 2846     		mov	r0, r5
 285 0020 FFF7FEFF 		bl	sprintf
 286              	.LVL35:
 900:main.c        ****         UART_1_PutString(output);
 287              		.loc 1 900 0
 288 0024 2846     		mov	r0, r5
 289 0026 FFF7FEFF 		bl	UART_1_PutString
 290              	.LVL36:
 901:main.c        ****         
 902:main.c        ****         distanceSensor(FRONT_RIGHT);
 291              		.loc 1 902 0
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 22


 292 002a 0120     		movs	r0, #1
 293 002c FFF7FEFF 		bl	distanceSensor
 294              	.LVL37:
 903:main.c        ****         CyDelay(50);
 295              		.loc 1 903 0
 296 0030 3220     		movs	r0, #50
 297 0032 FFF7FEFF 		bl	CyDelay
 298              	.LVL38:
 904:main.c        ****         sprintf(output, "%d \t", ultrasonic_distances_mm[FRONT_RIGHT]);
 299              		.loc 1 904 0
 300 0036 7268     		ldr	r2, [r6, #4]
 301 0038 2146     		mov	r1, r4
 302 003a 2846     		mov	r0, r5
 303 003c FFF7FEFF 		bl	sprintf
 304              	.LVL39:
 905:main.c        ****         UART_1_PutString(output);
 305              		.loc 1 905 0
 306 0040 2846     		mov	r0, r5
 307 0042 FFF7FEFF 		bl	UART_1_PutString
 308              	.LVL40:
 906:main.c        ****         
 907:main.c        ****         difference = ultrasonic_distances_mm[FRONT_LEFT] - ultrasonic_distances_mm[FRONT_RIGHT];
 309              		.loc 1 907 0
 310 0046 3468     		ldr	r4, [r6]
 311 0048 7368     		ldr	r3, [r6, #4]
 312 004a E41A     		subs	r4, r4, r3
 313              	.LVL41:
 908:main.c        ****         sprintf(output, "difference = %d, \n", difference);       
 314              		.loc 1 908 0
 315 004c 2246     		mov	r2, r4
 316 004e 5C49     		ldr	r1, .L32+12
 317 0050 2846     		mov	r0, r5
 318 0052 FFF7FEFF 		bl	sprintf
 319              	.LVL42:
 909:main.c        ****         UART_1_PutString(output);
 320              		.loc 1 909 0
 321 0056 2846     		mov	r0, r5
 322 0058 FFF7FEFF 		bl	UART_1_PutString
 323              	.LVL43:
 324              	.L22:
 896:main.c        ****         distanceSensor(FRONT_LEFT);
 325              		.loc 1 896 0
 326 005c 84EAE473 		eor	r3, r4, r4, asr #31
 327 0060 A3EBE473 		sub	r3, r3, r4, asr #31
 328 0064 C82B     		cmp	r3, #200
 329 0066 CFDC     		bgt	.L23
 330              	.L30:
 910:main.c        ****     }
 911:main.c        ****     
 912:main.c        ****     
 913:main.c        ****     int speed_left = 30;        // slow speed
 914:main.c        ****     int speed_right = 30;
 915:main.c        ****     
 916:main.c        ****     do {
 917:main.c        ****         if (difference > 0)             // This means we need to move it right
 331              		.loc 1 917 0
 332 0068 002C     		cmp	r4, #0
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 23


 333 006a 3BDD     		ble	.L24
 918:main.c        ****         {
 919:main.c        ****             Motor_Left_Control_Write(0); Motor_Right_Control_Write(1); 
 334              		.loc 1 919 0
 335 006c 0020     		movs	r0, #0
 336 006e FFF7FEFF 		bl	Motor_Left_Control_Write
 337              	.LVL44:
 338 0072 0120     		movs	r0, #1
 339 0074 FFF7FEFF 		bl	Motor_Right_Control_Write
 340              	.LVL45:
 920:main.c        ****             while (abs(difference) > tolerance && abs(difference) < 200)     // ensures working cor
 341              		.loc 1 920 0
 342 0078 29E0     		b	.L25
 343              	.LVL46:
 344              	.L27:
 921:main.c        ****             {
 922:main.c        ****             Motor_Left_Driver_Wakeup();
 345              		.loc 1 922 0
 346 007a FFF7FEFF 		bl	Motor_Left_Driver_Wakeup
 347              	.LVL47:
 923:main.c        ****             Motor_Left_Driver_WriteCompare(speed_left);
 348              		.loc 1 923 0
 349 007e 1E20     		movs	r0, #30
 350 0080 FFF7FEFF 		bl	Motor_Left_Driver_WriteCompare
 351              	.LVL48:
 924:main.c        ****             Motor_Right_Driver_Wakeup();
 352              		.loc 1 924 0
 353 0084 FFF7FEFF 		bl	Motor_Right_Driver_Wakeup
 354              	.LVL49:
 925:main.c        ****             Motor_Right_Driver_WriteCompare(speed_right);
 355              		.loc 1 925 0
 356 0088 1E20     		movs	r0, #30
 357 008a FFF7FEFF 		bl	Motor_Right_Driver_WriteCompare
 358              	.LVL50:
 926:main.c        **** 
 927:main.c        ****             distanceSensor(FRONT_LEFT);
 359              		.loc 1 927 0
 360 008e 0020     		movs	r0, #0
 361 0090 FFF7FEFF 		bl	distanceSensor
 362              	.LVL51:
 928:main.c        ****             CyDelay(50);
 363              		.loc 1 928 0
 364 0094 3220     		movs	r0, #50
 365 0096 FFF7FEFF 		bl	CyDelay
 366              	.LVL52:
 929:main.c        ****             distanceSensor(FRONT_RIGHT);
 367              		.loc 1 929 0
 368 009a 0120     		movs	r0, #1
 369 009c FFF7FEFF 		bl	distanceSensor
 370              	.LVL53:
 930:main.c        ****             CyDelay(50);
 371              		.loc 1 930 0
 372 00a0 3220     		movs	r0, #50
 373 00a2 FFF7FEFF 		bl	CyDelay
 374              	.LVL54:
 931:main.c        ****                       
 932:main.c        ****             difference = ultrasonic_distances_mm[FRONT_LEFT] - ultrasonic_distances_mm[FRONT_RIGHT]
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 24


 375              		.loc 1 932 0
 376 00a6 434B     		ldr	r3, .L32
 377 00a8 1A68     		ldr	r2, [r3]
 378 00aa 5B68     		ldr	r3, [r3, #4]
 379 00ac D41A     		subs	r4, r2, r3
 380              	.LVL55:
 933:main.c        ****             
 934:main.c        ****             sprintf(output, "%d, %d \n", ultrasonic_distances_mm[FRONT_LEFT], ultrasonic_distances_
 381              		.loc 1 934 0
 382 00ae 434D     		ldr	r5, .L32+8
 383 00b0 4449     		ldr	r1, .L32+16
 384 00b2 2846     		mov	r0, r5
 385 00b4 FFF7FEFF 		bl	sprintf
 386              	.LVL56:
 935:main.c        ****             UART_1_PutString(output);
 387              		.loc 1 935 0
 388 00b8 2846     		mov	r0, r5
 389 00ba FFF7FEFF 		bl	UART_1_PutString
 390              	.LVL57:
 936:main.c        ****             
 937:main.c        ****             sprintf(output, "difference = %d, \n", difference);       
 391              		.loc 1 937 0
 392 00be 2246     		mov	r2, r4
 393 00c0 3F49     		ldr	r1, .L32+12
 394 00c2 2846     		mov	r0, r5
 395 00c4 FFF7FEFF 		bl	sprintf
 396              	.LVL58:
 938:main.c        ****             UART_1_PutString(output);
 397              		.loc 1 938 0
 398 00c8 2846     		mov	r0, r5
 399 00ca FFF7FEFF 		bl	UART_1_PutString
 400              	.LVL59:
 401              	.L25:
 920:main.c        ****             {
 402              		.loc 1 920 0
 403 00ce 84EAE473 		eor	r3, r4, r4, asr #31
 404 00d2 A3EBE473 		sub	r3, r3, r4, asr #31
 405 00d6 032B     		cmp	r3, #3
 406 00d8 3FDD     		ble	.L26
 920:main.c        ****             {
 407              		.loc 1 920 0 is_stmt 0 discriminator 1
 408 00da C734     		adds	r4, r4, #199
 409              	.LVL60:
 410 00dc B4F5C77F 		cmp	r4, #398
 411 00e0 CBD9     		bls	.L27
 412 00e2 3AE0     		b	.L26
 413              	.LVL61:
 414              	.L24:
 939:main.c        ****             
 940:main.c        ****             
 941:main.c        ****             }
 942:main.c        ****             
 943:main.c        ****         }
 944:main.c        ****         else {
 945:main.c        ****             Motor_Left_Control_Write(1); Motor_Right_Control_Write(0);
 415              		.loc 1 945 0 is_stmt 1
 416 00e4 0120     		movs	r0, #1
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 25


 417 00e6 FFF7FEFF 		bl	Motor_Left_Control_Write
 418              	.LVL62:
 419 00ea 0020     		movs	r0, #0
 420 00ec FFF7FEFF 		bl	Motor_Right_Control_Write
 421              	.LVL63:
 946:main.c        ****             while (abs(difference) > tolerance && abs(difference) < 200) 
 422              		.loc 1 946 0
 423 00f0 29E0     		b	.L28
 424              	.LVL64:
 425              	.L29:
 947:main.c        ****             {
 948:main.c        ****             Motor_Left_Driver_Wakeup();
 426              		.loc 1 948 0
 427 00f2 FFF7FEFF 		bl	Motor_Left_Driver_Wakeup
 428              	.LVL65:
 949:main.c        ****             Motor_Left_Driver_WriteCompare(speed_left);
 429              		.loc 1 949 0
 430 00f6 1E20     		movs	r0, #30
 431 00f8 FFF7FEFF 		bl	Motor_Left_Driver_WriteCompare
 432              	.LVL66:
 950:main.c        ****             Motor_Right_Driver_Wakeup();
 433              		.loc 1 950 0
 434 00fc FFF7FEFF 		bl	Motor_Right_Driver_Wakeup
 435              	.LVL67:
 951:main.c        ****             Motor_Right_Driver_WriteCompare(speed_right); 
 436              		.loc 1 951 0
 437 0100 1E20     		movs	r0, #30
 438 0102 FFF7FEFF 		bl	Motor_Right_Driver_WriteCompare
 439              	.LVL68:
 952:main.c        ****             
 953:main.c        ****             distanceSensor(FRONT_LEFT);
 440              		.loc 1 953 0
 441 0106 0020     		movs	r0, #0
 442 0108 FFF7FEFF 		bl	distanceSensor
 443              	.LVL69:
 954:main.c        ****             CyDelay(50);
 444              		.loc 1 954 0
 445 010c 3220     		movs	r0, #50
 446 010e FFF7FEFF 		bl	CyDelay
 447              	.LVL70:
 955:main.c        ****             distanceSensor(FRONT_RIGHT);
 448              		.loc 1 955 0
 449 0112 0120     		movs	r0, #1
 450 0114 FFF7FEFF 		bl	distanceSensor
 451              	.LVL71:
 956:main.c        ****             CyDelay(50);
 452              		.loc 1 956 0
 453 0118 3220     		movs	r0, #50
 454 011a FFF7FEFF 		bl	CyDelay
 455              	.LVL72:
 957:main.c        ****                       
 958:main.c        ****             difference = ultrasonic_distances_mm[FRONT_LEFT] - ultrasonic_distances_mm[FRONT_RIGHT]
 456              		.loc 1 958 0
 457 011e 254B     		ldr	r3, .L32
 458 0120 1A68     		ldr	r2, [r3]
 459 0122 5B68     		ldr	r3, [r3, #4]
 460 0124 D41A     		subs	r4, r2, r3
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 26


 461              	.LVL73:
 959:main.c        ****             
 960:main.c        ****             sprintf(output, " %d , %d \t", ultrasonic_distances_mm[FRONT_LEFT], ultrasonic_distance
 462              		.loc 1 960 0
 463 0126 254D     		ldr	r5, .L32+8
 464 0128 2749     		ldr	r1, .L32+20
 465 012a 2846     		mov	r0, r5
 466 012c FFF7FEFF 		bl	sprintf
 467              	.LVL74:
 961:main.c        ****             UART_1_PutString(output);
 468              		.loc 1 961 0
 469 0130 2846     		mov	r0, r5
 470 0132 FFF7FEFF 		bl	UART_1_PutString
 471              	.LVL75:
 962:main.c        ****             
 963:main.c        ****             sprintf(output, "dif: %d, \n", difference);       
 472              		.loc 1 963 0
 473 0136 2246     		mov	r2, r4
 474 0138 2449     		ldr	r1, .L32+24
 475 013a 2846     		mov	r0, r5
 476 013c FFF7FEFF 		bl	sprintf
 477              	.LVL76:
 964:main.c        ****             UART_1_PutString(output);
 478              		.loc 1 964 0
 479 0140 2846     		mov	r0, r5
 480 0142 FFF7FEFF 		bl	UART_1_PutString
 481              	.LVL77:
 482              	.L28:
 946:main.c        ****             {
 483              		.loc 1 946 0
 484 0146 84EAE473 		eor	r3, r4, r4, asr #31
 485 014a A3EBE473 		sub	r3, r3, r4, asr #31
 486 014e 032B     		cmp	r3, #3
 487 0150 03DD     		ble	.L26
 946:main.c        ****             {
 488              		.loc 1 946 0 is_stmt 0 discriminator 1
 489 0152 C734     		adds	r4, r4, #199
 490              	.LVL78:
 491 0154 B4F5C77F 		cmp	r4, #398
 492 0158 CBD9     		bls	.L29
 493              	.LVL79:
 494              	.L26:
 965:main.c        ****             
 966:main.c        ****             }
 967:main.c        ****             
 968:main.c        ****         }
 969:main.c        ****         
 970:main.c        ****         
 971:main.c        ****         // CHECKS one more time to ensure the difference is accurate: 
 972:main.c        ****         distanceSensor(FRONT_LEFT);
 495              		.loc 1 972 0 is_stmt 1
 496 015a 0020     		movs	r0, #0
 497 015c FFF7FEFF 		bl	distanceSensor
 498              	.LVL80:
 973:main.c        ****         CyDelay(50);
 499              		.loc 1 973 0
 500 0160 3220     		movs	r0, #50
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 27


 501 0162 FFF7FEFF 		bl	CyDelay
 502              	.LVL81:
 974:main.c        ****         distanceSensor(FRONT_RIGHT);
 503              		.loc 1 974 0
 504 0166 0120     		movs	r0, #1
 505 0168 FFF7FEFF 		bl	distanceSensor
 506              	.LVL82:
 975:main.c        ****         CyDelay(50);
 507              		.loc 1 975 0
 508 016c 3220     		movs	r0, #50
 509 016e FFF7FEFF 		bl	CyDelay
 510              	.LVL83:
 976:main.c        ****                       
 977:main.c        ****         difference = ultrasonic_distances_mm[FRONT_LEFT] - ultrasonic_distances_mm[FRONT_RIGHT];
 511              		.loc 1 977 0
 512 0172 104B     		ldr	r3, .L32
 513 0174 1A68     		ldr	r2, [r3]
 514 0176 5B68     		ldr	r3, [r3, #4]
 515 0178 D41A     		subs	r4, r2, r3
 516              	.LVL84:
 978:main.c        ****         sprintf(output, "%d, %d \n", ultrasonic_distances_mm[FRONT_LEFT], ultrasonic_distances_mm[F
 517              		.loc 1 978 0
 518 017a 104D     		ldr	r5, .L32+8
 519 017c 1149     		ldr	r1, .L32+16
 520 017e 2846     		mov	r0, r5
 521 0180 FFF7FEFF 		bl	sprintf
 522              	.LVL85:
 979:main.c        ****         UART_1_PutString(output);
 523              		.loc 1 979 0
 524 0184 2846     		mov	r0, r5
 525 0186 FFF7FEFF 		bl	UART_1_PutString
 526              	.LVL86:
 980:main.c        ****         sprintf(output, "difference = %d, \n", difference);       
 527              		.loc 1 980 0
 528 018a 2246     		mov	r2, r4
 529 018c 0C49     		ldr	r1, .L32+12
 530 018e 2846     		mov	r0, r5
 531 0190 FFF7FEFF 		bl	sprintf
 532              	.LVL87:
 981:main.c        ****         UART_1_PutString(output);
 533              		.loc 1 981 0
 534 0194 2846     		mov	r0, r5
 535 0196 FFF7FEFF 		bl	UART_1_PutString
 536              	.LVL88:
 982:main.c        ****         
 983:main.c        ****     } while (abs(difference) > 10);        // This ensures that the turning worked correctly
 537              		.loc 1 983 0
 538 019a 84EAE473 		eor	r3, r4, r4, asr #31
 539 019e A3EBE473 		sub	r3, r3, r4, asr #31
 540 01a2 0A2B     		cmp	r3, #10
 541 01a4 3FF760AF 		bgt	.L30
 984:main.c        ****     
 985:main.c        ****     Motor_Left_Driver_Sleep();
 542              		.loc 1 985 0
 543 01a8 FFF7FEFF 		bl	Motor_Left_Driver_Sleep
 544              	.LVL89:
 986:main.c        ****     Motor_Right_Driver_Sleep();
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 28


 545              		.loc 1 986 0
 546 01ac FFF7FEFF 		bl	Motor_Right_Driver_Sleep
 547              	.LVL90:
 548 01b0 70BD     		pop	{r4, r5, r6, pc}
 549              	.LVL91:
 550              	.L33:
 551 01b2 00BF     		.align	2
 552              	.L32:
 553 01b4 00000000 		.word	ultrasonic_distances_mm
 554 01b8 00000000 		.word	.LC0
 555 01bc 00000000 		.word	output
 556 01c0 08000000 		.word	.LC1
 557 01c4 1C000000 		.word	.LC2
 558 01c8 28000000 		.word	.LC3
 559 01cc 34000000 		.word	.LC4
 560              		.cfi_endproc
 561              	.LFE69:
 562              		.size	straightAdjust, .-straightAdjust
 563              		.section	.text.moveUntil,"ax",%progbits
 564              		.align	2
 565              		.global	moveUntil
 566              		.thumb
 567              		.thumb_func
 568              		.type	moveUntil, %function
 569              	moveUntil:
 570              	.LFB70:
 987:main.c        ****     
 988:main.c        ****     // I WANT TO CREATE A FUNCTION THAT TAKES A CONTINOUS POLL OF THE UTLRASONICS 
 989:main.c        ****     
 990:main.c        ****     
 991:main.c        ****     /*
 992:main.c        **** 
 993:main.c        ****     while(abs(difference) > tolerance)
 994:main.c        ****     {
 995:main.c        ****         distanceCheck();         // updates the distances
 996:main.c        ****         difference = ultrasonic_distances_mm[FRONT_LEFT] - ultrasonic_distances_mm[FRONT_RIGHT];
 997:main.c        ****         sprintf(output, "%d, \t", ultrasonic_distances_mm[FRONT_LEFT]);       
 998:main.c        ****         UART_1_PutString(output);
 999:main.c        ****         sprintf(output, "%d \n", ultrasonic_distances_mm[FRONT_RIGHT]);      
1000:main.c        ****         UART_1_PutString(output);
1001:main.c        ****         
1002:main.c        ****         if (ultrasonic_distances_mm[FRONT_LEFT] < ultrasonic_distances_mm[FRONT_RIGHT] 
1003:main.c        ****                 || ultrasonic_distances_mm[FRONT_LEFT] > 8000) 
1004:main.c        ****         {
1005:main.c        ****             mishaSwivel(-1);    // we want to swivel left
1006:main.c        ****         }
1007:main.c        ****         else if (ultrasonic_distances_mm[FRONT_LEFT] > ultrasonic_distances_mm[FRONT_RIGHT])
1008:main.c        ****         {
1009:main.c        ****             mishaSwivel(1);    // want to swivel right
1010:main.c        ****         }
1011:main.c        ****         
1012:main.c        ****     }
1013:main.c        ****     
1014:main.c        ****     */
1015:main.c        **** 
1016:main.c        **** }
1017:main.c        **** 
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 29


1018:main.c        **** 
1019:main.c        **** void moveUntil(int distance_set) {
 571              		.loc 1 1019 0
 572              		.cfi_startproc
 573              		@ args = 0, pretend = 0, frame = 0
 574              		@ frame_needed = 0, uses_anonymous_args = 0
 575              	.LVL92:
 576 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 577              		.cfi_def_cfa_offset 24
 578              		.cfi_offset 3, -24
 579              		.cfi_offset 4, -20
 580              		.cfi_offset 5, -16
 581              		.cfi_offset 6, -12
 582              		.cfi_offset 7, -8
 583              		.cfi_offset 14, -4
1020:main.c        ****     // distance_set is in millimeteres
1021:main.c        ****     // will check the front two ultrasonics 
1022:main.c        ****     // will move until distance specified in function 
1023:main.c        ****     
1024:main.c        ****     int count_left;                 // counts the encoder values
1025:main.c        ****     int count_right;
1026:main.c        ****     int speed_left = SPEED;         // the set speed of the motors
 584              		.loc 1 1026 0
 585 0002 294B     		ldr	r3, .L40
 586 0004 1C68     		ldr	r4, [r3]
 587              	.LVL93:
1027:main.c        ****     int speed_right = SPEED;
1028:main.c        ****     int compare;                    
1029:main.c        ****     int ultrasonic_sensor;          // the ultrasonic sensor we will be using 
1030:main.c        ****     int distance_sensor;            // the measured distance of the sensor
1031:main.c        ****     
1032:main.c        ****     
1033:main.c        ****     
1034:main.c        ****     
1035:main.c        ****     // The distance is in millimetres 
1036:main.c        ****     // Is the distance negative or positive? 
1037:main.c        ****     if (distance_set > 0) { 
 588              		.loc 1 1037 0
 589 0006 071E     		subs	r7, r0, #0
 590 0008 07DD     		ble	.L35
1038:main.c        ****         Motor_Left_Control_Write(0); 
 591              		.loc 1 1038 0
 592 000a 0020     		movs	r0, #0
 593              	.LVL94:
 594 000c FFF7FEFF 		bl	Motor_Left_Control_Write
 595              	.LVL95:
1039:main.c        ****         Motor_Right_Control_Write(0); 
 596              		.loc 1 1039 0
 597 0010 0020     		movs	r0, #0
 598 0012 FFF7FEFF 		bl	Motor_Right_Control_Write
 599              	.LVL96:
1040:main.c        ****         ultrasonic_sensor = FRONT_LEFT;       // use the back ultrasonic to test our distance
 600              		.loc 1 1040 0
 601 0016 0026     		movs	r6, #0
 602 0018 06E0     		b	.L36
 603              	.LVL97:
 604              	.L35:
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 30


1041:main.c        ****                                         // THIS CHECKS THE FRONT LEFT SENSOR, for some reason?
1042:main.c        ****         compare = 32000;                // max compare value
1043:main.c        ****     }
1044:main.c        ****     else {
1045:main.c        ****         Motor_Left_Control_Write(1); 
 605              		.loc 1 1045 0
 606 001a 0120     		movs	r0, #1
 607              	.LVL98:
 608 001c FFF7FEFF 		bl	Motor_Left_Control_Write
 609              	.LVL99:
1046:main.c        ****         Motor_Right_Control_Write(1);
 610              		.loc 1 1046 0
 611 0020 0120     		movs	r0, #1
 612 0022 FFF7FEFF 		bl	Motor_Right_Control_Write
 613              	.LVL100:
1047:main.c        ****         ultrasonic_sensor = BACK; // We just use one ultrasonic front sensor
 614              		.loc 1 1047 0
 615 0026 0426     		movs	r6, #4
 616              	.LVL101:
 617              	.L36:
1048:main.c        ****         compare = -32000;               // min compare value
1049:main.c        ****     }
1050:main.c        ****     
1051:main.c        ****     Motor_Left_Driver_Wakeup();
 618              		.loc 1 1051 0
 619 0028 FFF7FEFF 		bl	Motor_Left_Driver_Wakeup
 620              	.LVL102:
1052:main.c        ****     Motor_Left_Driver_WriteCompare(speed_left);
 621              		.loc 1 1052 0
 622 002c E4B2     		uxtb	r4, r4
 623              	.LVL103:
 624 002e 2046     		mov	r0, r4
 625 0030 FFF7FEFF 		bl	Motor_Left_Driver_WriteCompare
 626              	.LVL104:
1053:main.c        ****     Motor_Right_Driver_Wakeup();
 627              		.loc 1 1053 0
 628 0034 FFF7FEFF 		bl	Motor_Right_Driver_Wakeup
 629              	.LVL105:
1054:main.c        ****     Motor_Right_Driver_WriteCompare(speed_right);
 630              		.loc 1 1054 0
 631 0038 2046     		mov	r0, r4
 632 003a FFF7FEFF 		bl	Motor_Right_Driver_WriteCompare
 633              	.LVL106:
1055:main.c        ****     
1056:main.c        ****     count_left = Motor_Left_Decoder_GetCounter();       
 634              		.loc 1 1056 0
 635 003e FFF7FEFF 		bl	Motor_Left_Decoder_GetCounter
 636              	.LVL107:
1057:main.c        ****     count_right = Motor_Right_Decoder_GetCounter();     
 637              		.loc 1 1057 0
 638 0042 FFF7FEFF 		bl	Motor_Right_Decoder_GetCounter
 639              	.LVL108:
1058:main.c        ****     //distanceCheckOne(ultrasonic_sensor);                            // checks the distance
1059:main.c        ****     distanceSensor(ultrasonic_sensor);
 640              		.loc 1 1059 0
 641 0046 3046     		mov	r0, r6
 642 0048 FFF7FEFF 		bl	distanceSensor
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 31


 643              	.LVL109:
1060:main.c        ****     CyDelay(50);
 644              		.loc 1 1060 0
 645 004c 3220     		movs	r0, #50
 646 004e FFF7FEFF 		bl	CyDelay
 647              	.LVL110:
1061:main.c        ****     distance_sensor = ultrasonic_distances_mm[ultrasonic_sensor];   // checks the distance measured
 648              		.loc 1 1061 0
 649 0052 164B     		ldr	r3, .L40+4
 650 0054 53F82640 		ldr	r4, [r3, r6, lsl #2]
 651              	.LVL111:
1062:main.c        ****     
1063:main.c        ****     while (distance_sensor > abs(distance_set)) {                // This adjusts for drift 
 652              		.loc 1 1063 0
 653 0058 15E0     		b	.L37
 654              	.L38:
1064:main.c        ****         count_left = Motor_Left_Decoder_GetCounter();
 655              		.loc 1 1064 0
 656 005a FFF7FEFF 		bl	Motor_Left_Decoder_GetCounter
 657              	.LVL112:
1065:main.c        ****         count_right = Motor_Right_Decoder_GetCounter();
 658              		.loc 1 1065 0
 659 005e FFF7FEFF 		bl	Motor_Right_Decoder_GetCounter
 660              	.LVL113:
1066:main.c        ****         if (count_left > count_right) {
1067:main.c        ****         speed_left -= 2;
1068:main.c        ****         }
1069:main.c        ****         if (count_right > count_left) {
1070:main.c        ****         speed_right -=2; 
1071:main.c        ****         }
1072:main.c        ****         distanceSensor(ultrasonic_sensor);
 661              		.loc 1 1072 0
 662 0062 3046     		mov	r0, r6
 663 0064 FFF7FEFF 		bl	distanceSensor
 664              	.LVL114:
1073:main.c        ****         CyDelay(50);
 665              		.loc 1 1073 0
 666 0068 3220     		movs	r0, #50
 667 006a FFF7FEFF 		bl	CyDelay
 668              	.LVL115:
1074:main.c        ****         //distanceCheckOne(ultrasonic_sensor);                            // checks the distance
1075:main.c        ****         distance_sensor = ultrasonic_distances_mm[ultrasonic_sensor];   // checks the distance meas
 669              		.loc 1 1075 0
 670 006e 0F4B     		ldr	r3, .L40+4
 671 0070 53F82640 		ldr	r4, [r3, r6, lsl #2]
 672              	.LVL116:
1076:main.c        ****         sprintf(output, "%d \t", distance_sensor);       
 673              		.loc 1 1076 0
 674 0074 0E4D     		ldr	r5, .L40+8
 675 0076 2246     		mov	r2, r4
 676 0078 0E49     		ldr	r1, .L40+12
 677 007a 2846     		mov	r0, r5
 678 007c FFF7FEFF 		bl	sprintf
 679              	.LVL117:
1077:main.c        ****         UART_1_PutString(output);
 680              		.loc 1 1077 0
 681 0080 2846     		mov	r0, r5
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 32


 682 0082 FFF7FEFF 		bl	UART_1_PutString
 683              	.LVL118:
 684              	.L37:
1063:main.c        ****         count_left = Motor_Left_Decoder_GetCounter();
 685              		.loc 1 1063 0
 686 0086 87EAE773 		eor	r3, r7, r7, asr #31
 687 008a A3EBE773 		sub	r3, r3, r7, asr #31
 688 008e 9C42     		cmp	r4, r3
 689 0090 E3DC     		bgt	.L38
1078:main.c        ****     }
1079:main.c        ****     
1080:main.c        ****     //sprintf(output, "left motor: %d \n", count_left);       
1081:main.c        ****     //UART_1_PutString(output);
1082:main.c        ****     //sprintf(output, "right motor: %d \n", count_right);      
1083:main.c        ****     //UART_1_PutString(output);
1084:main.c        ****         
1085:main.c        ****     Motor_Left_Decoder_SetCounter(0);                       // RESET the decoders to 0
 690              		.loc 1 1085 0
 691 0092 0020     		movs	r0, #0
 692 0094 FFF7FEFF 		bl	Motor_Left_Decoder_SetCounter
 693              	.LVL119:
1086:main.c        ****     Motor_Right_Decoder_SetCounter(0);   
 694              		.loc 1 1086 0
 695 0098 0020     		movs	r0, #0
 696 009a FFF7FEFF 		bl	Motor_Right_Decoder_SetCounter
 697              	.LVL120:
1087:main.c        ****     
1088:main.c        ****     Motor_Left_Driver_Sleep();              // Puts motors to sleep 
 698              		.loc 1 1088 0
 699 009e FFF7FEFF 		bl	Motor_Left_Driver_Sleep
 700              	.LVL121:
1089:main.c        ****     Motor_Right_Driver_Sleep();
 701              		.loc 1 1089 0
 702 00a2 FFF7FEFF 		bl	Motor_Right_Driver_Sleep
 703              	.LVL122:
 704 00a6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 705              	.LVL123:
 706              	.L41:
 707              		.align	2
 708              	.L40:
 709 00a8 00000000 		.word	SPEED
 710 00ac 00000000 		.word	ultrasonic_distances_mm
 711 00b0 00000000 		.word	output
 712 00b4 00000000 		.word	.LC0
 713              		.cfi_endproc
 714              	.LFE70:
 715              		.size	moveUntil, .-moveUntil
 716              		.section	.text.main,"ax",%progbits
 717              		.align	2
 718              		.global	main
 719              		.thumb
 720              		.thumb_func
 721              		.type	main, %function
 722              	main:
 723              	.LFB66:
 144:main.c        ****     CyGlobalIntEnable; /* Enable global interrupts. */
 724              		.loc 1 144 0
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 33


 725              		.cfi_startproc
 726              		@ args = 0, pretend = 0, frame = 0
 727              		@ frame_needed = 0, uses_anonymous_args = 0
 728 0000 38B5     		push	{r3, r4, r5, lr}
 729              		.cfi_def_cfa_offset 16
 730              		.cfi_offset 3, -16
 731              		.cfi_offset 4, -12
 732              		.cfi_offset 5, -8
 733              		.cfi_offset 14, -4
 145:main.c        **** 
 734              		.loc 1 145 0
 735              		.syntax unified
 736              	@ 145 "main.c" 1
 737 0002 62B6     		CPSIE   i
 738              	@ 0 "" 2
 148:main.c        ****     UART_1_Start();
 739              		.loc 1 148 0
 740              		.thumb
 741              		.syntax unified
 742 0004 FFF7FEFF 		bl	TIA_1_Start
 743              	.LVL124:
 149:main.c        ****     UART_1_PutString("UART commencing... \n");
 744              		.loc 1 149 0
 745 0008 FFF7FEFF 		bl	UART_1_Start
 746              	.LVL125:
 150:main.c        ****     ADC_Start();
 747              		.loc 1 150 0
 748 000c 9A48     		ldr	r0, .L63
 749 000e FFF7FEFF 		bl	UART_1_PutString
 750              	.LVL126:
 151:main.c        ****     IDAC8_1_Start();
 751              		.loc 1 151 0
 752 0012 FFF7FEFF 		bl	ADC_Start
 753              	.LVL127:
 152:main.c        ****     
 754              		.loc 1 152 0
 755 0016 FFF7FEFF 		bl	IDAC8_1_Start
 756              	.LVL128:
 162:main.c        ****     IDAC8_1_SetValue(idac_value);               // set a value between 0 and 255
 757              		.loc 1 162 0
 758 001a 0020     		movs	r0, #0
 759 001c FFF7FEFF 		bl	IDAC8_1_SetRange
 760              	.LVL129:
 163:main.c        ****     
 761              		.loc 1 163 0
 762 0020 964D     		ldr	r5, .L63+4
 763 0022 287D     		ldrb	r0, [r5, #20]	@ zero_extendqisi2
 764 0024 FFF7FEFF 		bl	IDAC8_1_SetValue
 765              	.LVL130:
 166:main.c        ****     control_photodiode_Write(colour_sensing_algorithm);            // controls which photodiode is 
 766              		.loc 1 166 0
 767 0028 0024     		movs	r4, #0
 768 002a 2C61     		str	r4, [r5, #16]
 167:main.c        ****                                                 // 0: wall
 769              		.loc 1 167 0
 770 002c 2046     		mov	r0, r4
 771 002e FFF7FEFF 		bl	control_photodiode_Write
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 34


 772              	.LVL131:
 170:main.c        ****     control_led_Write(2);   CyDelay(500);
 773              		.loc 1 170 0
 774 0032 0120     		movs	r0, #1
 775 0034 FFF7FEFF 		bl	control_led_Write
 776              	.LVL132:
 777 0038 4FF4FA70 		mov	r0, #500
 778 003c FFF7FEFF 		bl	CyDelay
 779              	.LVL133:
 171:main.c        ****     control_led_Write(3);   CyDelay(500);
 780              		.loc 1 171 0
 781 0040 0220     		movs	r0, #2
 782 0042 FFF7FEFF 		bl	control_led_Write
 783              	.LVL134:
 784 0046 4FF4FA70 		mov	r0, #500
 785 004a FFF7FEFF 		bl	CyDelay
 786              	.LVL135:
 172:main.c        ****     control_led_Write(0);   CyDelay(500);
 787              		.loc 1 172 0
 788 004e 0320     		movs	r0, #3
 789 0050 FFF7FEFF 		bl	control_led_Write
 790              	.LVL136:
 791 0054 4FF4FA70 		mov	r0, #500
 792 0058 FFF7FEFF 		bl	CyDelay
 793              	.LVL137:
 173:main.c        ****     colourSensingInitialise();                  // Initialises the colour sensor
 794              		.loc 1 173 0
 795 005c 2046     		mov	r0, r4
 796 005e FFF7FEFF 		bl	control_led_Write
 797              	.LVL138:
 798 0062 4FF4FA70 		mov	r0, #500
 799 0066 FFF7FEFF 		bl	CyDelay
 800              	.LVL139:
 174:main.c        ****     
 801              		.loc 1 174 0
 802 006a FFF7FEFF 		bl	colourSensingInitialise
 803              	.LVL140:
 178:main.c        ****     Rack_Servo_PWM_WriteCompare(1000);          // BRINGs rack to highest position, so not to mess 
 804              		.loc 1 178 0
 805 006e FFF7FEFF 		bl	Rack_Servo_PWM_Start
 806              	.LVL141:
 179:main.c        ****     CyDelay(500);
 807              		.loc 1 179 0
 808 0072 4FF47A70 		mov	r0, #1000
 809 0076 FFF7FEFF 		bl	Rack_Servo_PWM_WriteCompare
 810              	.LVL142:
 180:main.c        ****     Rack_Servo_PWM_Sleep();
 811              		.loc 1 180 0
 812 007a 4FF4FA70 		mov	r0, #500
 813 007e FFF7FEFF 		bl	CyDelay
 814              	.LVL143:
 181:main.c        ****     
 815              		.loc 1 181 0
 816 0082 FFF7FEFF 		bl	Rack_Servo_PWM_Sleep
 817              	.LVL144:
 183:main.c        ****     Gripper_Servo_PWM_WriteCompare(1120);       //This is the open gripper position
 818              		.loc 1 183 0
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 35


 819 0086 FFF7FEFF 		bl	Gripper_Servo_PWM_Start
 820              	.LVL145:
 184:main.c        ****     CyDelay(500);
 821              		.loc 1 184 0
 822 008a 4FF48C60 		mov	r0, #1120
 823 008e FFF7FEFF 		bl	Gripper_Servo_PWM_WriteCompare
 824              	.LVL146:
 185:main.c        ****     Gripper_Servo_PWM_Sleep();
 825              		.loc 1 185 0
 826 0092 4FF4FA70 		mov	r0, #500
 827 0096 FFF7FEFF 		bl	CyDelay
 828              	.LVL147:
 186:main.c        ****     
 829              		.loc 1 186 0
 830 009a FFF7FEFF 		bl	Gripper_Servo_PWM_Sleep
 831              	.LVL148:
 189:main.c        ****     Motor_Left_Driver_Sleep();                  // Puts motor to sleep
 832              		.loc 1 189 0
 833 009e FFF7FEFF 		bl	Motor_Left_Driver_Start
 834              	.LVL149:
 190:main.c        ****     Motor_Right_Driver_Start();
 835              		.loc 1 190 0
 836 00a2 FFF7FEFF 		bl	Motor_Left_Driver_Sleep
 837              	.LVL150:
 191:main.c        ****     Motor_Right_Driver_Sleep();                 // Puts motor to sleep
 838              		.loc 1 191 0
 839 00a6 FFF7FEFF 		bl	Motor_Right_Driver_Start
 840              	.LVL151:
 192:main.c        ****     
 841              		.loc 1 192 0
 842 00aa FFF7FEFF 		bl	Motor_Right_Driver_Sleep
 843              	.LVL152:
 194:main.c        ****     Motor_Right_Decoder_Start();
 844              		.loc 1 194 0
 845 00ae FFF7FEFF 		bl	Motor_Left_Decoder_Start
 846              	.LVL153:
 195:main.c        ****     
 847              		.loc 1 195 0
 848 00b2 FFF7FEFF 		bl	Motor_Right_Decoder_Start
 849              	.LVL154:
 850              	.LBB2:
 199:main.c        ****     {
 851              		.loc 1 199 0
 852 00b6 11E0     		b	.L43
 853              	.LVL155:
 854              	.L44:
 201:main.c        ****         CyDelay(100);
 855              		.loc 1 201 0 discriminator 3
 856 00b8 2046     		mov	r0, r4
 857 00ba FFF7FEFF 		bl	distanceSensor
 858              	.LVL156:
 202:main.c        ****         sprintf(output, "%d \t", ultrasonic_distances_mm[i]);
 859              		.loc 1 202 0 discriminator 3
 860 00be 6420     		movs	r0, #100
 861 00c0 FFF7FEFF 		bl	CyDelay
 862              	.LVL157:
 203:main.c        ****         UART_1_PutString(output);
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 36


 863              		.loc 1 203 0 discriminator 3
 864 00c4 6E4D     		ldr	r5, .L63+8
 865 00c6 6F4B     		ldr	r3, .L63+12
 866 00c8 53F82420 		ldr	r2, [r3, r4, lsl #2]
 867 00cc 6E49     		ldr	r1, .L63+16
 868 00ce 2846     		mov	r0, r5
 869 00d0 FFF7FEFF 		bl	sprintf
 870              	.LVL158:
 204:main.c        ****     }
 871              		.loc 1 204 0 discriminator 3
 872 00d4 2846     		mov	r0, r5
 873 00d6 FFF7FEFF 		bl	UART_1_PutString
 874              	.LVL159:
 199:main.c        ****     {
 875              		.loc 1 199 0 discriminator 3
 876 00da 0134     		adds	r4, r4, #1
 877              	.LVL160:
 878              	.L43:
 199:main.c        ****     {
 879              		.loc 1 199 0 is_stmt 0 discriminator 1
 880 00dc 042C     		cmp	r4, #4
 881 00de EBDD     		ble	.L44
 882              	.LBE2:
 206:main.c        ****     
 883              		.loc 1 206 0 is_stmt 1
 884 00e0 6A48     		ldr	r0, .L63+20
 885 00e2 FFF7FEFF 		bl	UART_1_PutString
 886              	.LVL161:
 887              	.LBB3:
 208:main.c        ****     {
 888              		.loc 1 208 0
 889 00e6 0024     		movs	r4, #0
 890              	.LVL162:
 891 00e8 11E0     		b	.L45
 892              	.LVL163:
 893              	.L46:
 210:main.c        ****         CyDelay(100);
 894              		.loc 1 210 0 discriminator 3
 895 00ea 2046     		mov	r0, r4
 896 00ec FFF7FEFF 		bl	distanceSensor
 897              	.LVL164:
 211:main.c        ****         sprintf(output, "%d \t", ultrasonic_distances_mm[i]);
 898              		.loc 1 211 0 discriminator 3
 899 00f0 6420     		movs	r0, #100
 900 00f2 FFF7FEFF 		bl	CyDelay
 901              	.LVL165:
 212:main.c        ****         UART_1_PutString(output);
 902              		.loc 1 212 0 discriminator 3
 903 00f6 624D     		ldr	r5, .L63+8
 904 00f8 624B     		ldr	r3, .L63+12
 905 00fa 53F82420 		ldr	r2, [r3, r4, lsl #2]
 906 00fe 6249     		ldr	r1, .L63+16
 907 0100 2846     		mov	r0, r5
 908 0102 FFF7FEFF 		bl	sprintf
 909              	.LVL166:
 213:main.c        ****     }
 910              		.loc 1 213 0 discriminator 3
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 37


 911 0106 2846     		mov	r0, r5
 912 0108 FFF7FEFF 		bl	UART_1_PutString
 913              	.LVL167:
 208:main.c        ****     {
 914              		.loc 1 208 0 discriminator 3
 915 010c 0134     		adds	r4, r4, #1
 916              	.LVL168:
 917              	.L45:
 208:main.c        ****     {
 918              		.loc 1 208 0 is_stmt 0 discriminator 1
 919 010e 042C     		cmp	r4, #4
 920 0110 EBDD     		ble	.L46
 921              	.LBE3:
 215:main.c        ****     
 922              		.loc 1 215 0 is_stmt 1
 923 0112 5E48     		ldr	r0, .L63+20
 924 0114 FFF7FEFF 		bl	UART_1_PutString
 925              	.LVL169:
 219:main.c        ****     Timer_1_ReadStatusRegister();
 926              		.loc 1 219 0
 927 0118 FFF7FEFF 		bl	Timer_1_Start
 928              	.LVL170:
 220:main.c        ****     Sonic_StartEx(TIH);
 929              		.loc 1 220 0
 930 011c FFF7FEFF 		bl	Timer_1_ReadStatusRegister
 931              	.LVL171:
 221:main.c        ****     Start_StartEx(StartIH);
 932              		.loc 1 221 0
 933 0120 5B48     		ldr	r0, .L63+24
 934 0122 FFF7FEFF 		bl	Sonic_StartEx
 935              	.LVL172:
 222:main.c        ****     beginNavigation = 0;
 936              		.loc 1 222 0
 937 0126 5B48     		ldr	r0, .L63+28
 938 0128 FFF7FEFF 		bl	Start_StartEx
 939              	.LVL173:
 223:main.c        ****     
 940              		.loc 1 223 0
 941 012c 0022     		movs	r2, #0
 942 012e 534B     		ldr	r3, .L63+4
 943 0130 1A60     		str	r2, [r3]
 944              	.LVL174:
 945              	.L56:
 429:main.c        ****             
 946              		.loc 1 429 0
 947 0132 594B     		ldr	r3, .L63+32
 948 0134 9B68     		ldr	r3, [r3, #8]
 949 0136 012B     		cmp	r3, #1
 950 0138 50D1     		bne	.L47
 951              	.LBB4:
 448:main.c        ****             moveUntil(-100);
 952              		.loc 1 448 0
 953 013a FFF7FEFF 		bl	straightAdjust
 954              	.LVL175:
 449:main.c        ****             colourSensingInitialise();      // Initialises wall colour sensor against the black wal
 955              		.loc 1 449 0
 956 013e 6FF06300 		mvn	r0, #99
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 38


 957 0142 FFF7FEFF 		bl	moveUntil
 958              	.LVL176:
 450:main.c        ****                         
 959              		.loc 1 450 0
 960 0146 FFF7FEFF 		bl	colourSensingInitialise
 961              	.LVL177:
 962              	.LBB5:
 452:main.c        ****                 // scan each of the pucks 
 963              		.loc 1 452 0
 964 014a 0024     		movs	r4, #0
 965 014c 15E0     		b	.L48
 966              	.LVL178:
 967              	.L49:
 454:main.c        ****                 CyDelay(500);
 968              		.loc 1 454 0 discriminator 3
 969 014e A500     		lsls	r5, r4, #2
 970 0150 514B     		ldr	r3, .L63+32
 971 0152 2B44     		add	r3, r3, r5
 972 0154 D868     		ldr	r0, [r3, #12]
 973 0156 FFF7FEFF 		bl	moveUntil
 974              	.LVL179:
 455:main.c        ****                 puckRackColours[i] = colourSensingOutput();
 975              		.loc 1 455 0 discriminator 3
 976 015a 4FF4FA70 		mov	r0, #500
 977 015e FFF7FEFF 		bl	CyDelay
 978              	.LVL180:
 456:main.c        ****                 CyDelay(500);
 979              		.loc 1 456 0 discriminator 3
 980 0162 FFF7FEFF 		bl	colourSensingOutput
 981              	.LVL181:
 982 0166 454B     		ldr	r3, .L63+4
 983 0168 1D44     		add	r5, r5, r3
 984 016a A861     		str	r0, [r5, #24]
 457:main.c        ****                                 
 985              		.loc 1 457 0 discriminator 3
 986 016c 4FF4FA70 		mov	r0, #500
 987 0170 FFF7FEFF 		bl	CyDelay
 988              	.LVL182:
 461:main.c        ****             }
 989              		.loc 1 461 0 discriminator 3
 990 0174 FFF7FEFF 		bl	straightAdjust
 991              	.LVL183:
 452:main.c        ****                 // scan each of the pucks 
 992              		.loc 1 452 0 discriminator 3
 993 0178 0134     		adds	r4, r4, #1
 994              	.LVL184:
 995              	.L48:
 452:main.c        ****                 // scan each of the pucks 
 996              		.loc 1 452 0 is_stmt 0 discriminator 1
 997 017a 042C     		cmp	r4, #4
 998 017c E7DD     		ble	.L49
 999              	.LBE5:
 464:main.c        ****             for (int i = 0; i < 5; i++) 
 1000              		.loc 1 464 0 is_stmt 1
 1001 017e 4748     		ldr	r0, .L63+36
 1002 0180 FFF7FEFF 		bl	UART_1_PutString
 1003              	.LVL185:
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 39


 1004              	.LBB6:
 465:main.c        ****             {
 1005              		.loc 1 465 0
 1006 0184 0024     		movs	r4, #0
 1007              	.LVL186:
 1008 0186 0CE0     		b	.L50
 1009              	.LVL187:
 1010              	.L51:
 467:main.c        ****                 UART_1_PutString(output);
 1011              		.loc 1 467 0 discriminator 3
 1012 0188 3C4B     		ldr	r3, .L63+4
 1013 018a 03EB8403 		add	r3, r3, r4, lsl #2
 1014 018e 3C4D     		ldr	r5, .L63+8
 1015 0190 9A69     		ldr	r2, [r3, #24]
 1016 0192 4349     		ldr	r1, .L63+40
 1017 0194 2846     		mov	r0, r5
 1018 0196 FFF7FEFF 		bl	sprintf
 1019              	.LVL188:
 468:main.c        ****             }
 1020              		.loc 1 468 0 discriminator 3
 1021 019a 2846     		mov	r0, r5
 1022 019c FFF7FEFF 		bl	UART_1_PutString
 1023              	.LVL189:
 465:main.c        ****             {
 1024              		.loc 1 465 0 discriminator 3
 1025 01a0 0134     		adds	r4, r4, #1
 1026              	.LVL190:
 1027              	.L50:
 465:main.c        ****             {
 1028              		.loc 1 465 0 is_stmt 0 discriminator 1
 1029 01a2 042C     		cmp	r4, #4
 1030 01a4 F0DD     		ble	.L51
 1031              	.LBE6:
 472:main.c        ****             colour_sensing_algorithm = 1;   // changes it to claw algorithm
 1032              		.loc 1 472 0 is_stmt 1
 1033 01a6 0120     		movs	r0, #1
 1034 01a8 FFF7FEFF 		bl	control_photodiode_Write
 1035              	.LVL191:
 473:main.c        ****                        
 1036              		.loc 1 473 0
 1037 01ac 0122     		movs	r2, #1
 1038 01ae 334B     		ldr	r3, .L63+4
 1039 01b0 1A61     		str	r2, [r3, #16]
 1040              	.LVL192:
 1041              	.LBB7:
 481:main.c        ****                 if (puckRackColours[puckRackIndex] != BLANK && puckConstructionPlanIndex != 3){
 1042              		.loc 1 481 0
 1043 01b2 0023     		movs	r3, #0
 1044              	.LBE7:
 478:main.c        ****             
 1045              		.loc 1 478 0
 1046 01b4 1A46     		mov	r2, r3
 1047              	.LBB8:
 481:main.c        ****                 if (puckRackColours[puckRackIndex] != BLANK && puckConstructionPlanIndex != 3){
 1048              		.loc 1 481 0
 1049 01b6 0CE0     		b	.L52
 1050              	.LVL193:
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 40


 1051              	.L54:
 482:main.c        ****                     puckConstructionPlan[puckConstructionPlanIndex] = puckRackColours[puckRackIndex
 1052              		.loc 1 482 0
 1053 01b8 3049     		ldr	r1, .L63+4
 1054 01ba 01EB8301 		add	r1, r1, r3, lsl #2
 1055 01be 8869     		ldr	r0, [r1, #24]
 1056 01c0 30B1     		cbz	r0, .L53
 482:main.c        ****                     puckConstructionPlan[puckConstructionPlanIndex] = puckRackColours[puckRackIndex
 1057              		.loc 1 482 0 is_stmt 0 discriminator 1
 1058 01c2 032A     		cmp	r2, #3
 1059 01c4 04D0     		beq	.L53
 483:main.c        ****                     puckConstructionPlanIndex++;
 1060              		.loc 1 483 0 is_stmt 1
 1061 01c6 2D49     		ldr	r1, .L63+4
 1062 01c8 01EB8201 		add	r1, r1, r2, lsl #2
 1063 01cc 4860     		str	r0, [r1, #4]
 484:main.c        ****                 }
 1064              		.loc 1 484 0
 1065 01ce 0132     		adds	r2, r2, #1
 1066              	.LVL194:
 1067              	.L53:
 481:main.c        ****                 if (puckRackColours[puckRackIndex] != BLANK && puckConstructionPlanIndex != 3){
 1068              		.loc 1 481 0 discriminator 2
 1069 01d0 0133     		adds	r3, r3, #1
 1070              	.LVL195:
 1071              	.L52:
 481:main.c        ****                 if (puckRackColours[puckRackIndex] != BLANK && puckConstructionPlanIndex != 3){
 1072              		.loc 1 481 0 is_stmt 0 discriminator 1
 1073 01d2 042B     		cmp	r3, #4
 1074 01d4 F0DD     		ble	.L54
 1075              	.LBE8:
 489:main.c        ****             
 1076              		.loc 1 489 0 is_stmt 1
 1077 01d6 0222     		movs	r2, #2
 1078              	.LVL196:
 1079 01d8 2F4B     		ldr	r3, .L63+32
 1080              	.LVL197:
 1081 01da 9A60     		str	r2, [r3, #8]
 1082              	.LVL198:
 1083              	.L47:
 1084              	.LBE4:
 513:main.c        ****             
 1085              		.loc 1 513 0
 1086 01dc 2E4B     		ldr	r3, .L63+32
 1087 01de 9B68     		ldr	r3, [r3, #8]
 1088 01e0 022B     		cmp	r3, #2
 1089 01e2 17D1     		bne	.L55
 515:main.c        ****             mishaMoveDynamic(-150);
 1090              		.loc 1 515 0
 1091 01e4 6FF02C00 		mvn	r0, #44
 1092 01e8 FFF7FEFF 		bl	mishaSwivel
 1093              	.LVL199:
 516:main.c        ****             mishaSwivel(45);
 1094              		.loc 1 516 0
 1095 01ec 6FF09500 		mvn	r0, #149
 1096 01f0 FFF7FEFF 		bl	mishaMoveDynamic
 1097              	.LVL200:
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 41


 517:main.c        ****             mishaMoveDynamic(200);
 1098              		.loc 1 517 0
 1099 01f4 2D20     		movs	r0, #45
 1100 01f6 FFF7FEFF 		bl	mishaSwivel
 1101              	.LVL201:
 518:main.c        ****             mishaSwivel(90);
 1102              		.loc 1 518 0
 1103 01fa C820     		movs	r0, #200
 1104 01fc FFF7FEFF 		bl	mishaMoveDynamic
 1105              	.LVL202:
 519:main.c        ****             mishaMoveDynamic(500);
 1106              		.loc 1 519 0
 1107 0200 5A20     		movs	r0, #90
 1108 0202 FFF7FEFF 		bl	mishaSwivel
 1109              	.LVL203:
 520:main.c        ****             
 1110              		.loc 1 520 0
 1111 0206 4FF4FA70 		mov	r0, #500
 1112 020a FFF7FEFF 		bl	mishaMoveDynamic
 1113              	.LVL204:
 543:main.c        **** 	    }
 1114              		.loc 1 543 0
 1115 020e 0322     		movs	r2, #3
 1116 0210 214B     		ldr	r3, .L63+32
 1117 0212 9A60     		str	r2, [r3, #8]
 1118              	.L55:
 632:main.c        ****         {
 1119              		.loc 1 632 0
 1120 0214 204B     		ldr	r3, .L63+32
 1121 0216 9B68     		ldr	r3, [r3, #8]
 1122 0218 042B     		cmp	r3, #4
 1123 021a 8AD1     		bne	.L56
 1124              	.LBB9:
 636:main.c        ****         int puck_correct = FALSE;   // A flag to determine if the correct puck has been picked up
 1125              		.loc 1 636 0
 1126 021c 4622     		movs	r2, #70
 1127 021e 214B     		ldr	r3, .L63+44
 1128 0220 1A60     		str	r2, [r3]
 1129              	.LVL205:
 641:main.c        ****     
 1130              		.loc 1 641 0
 1131 0222 0122     		movs	r2, #1
 1132 0224 154B     		ldr	r3, .L63+4
 1133 0226 9A60     		str	r2, [r3, #8]
 637:main.c        ****         int puck_scan;
 1134              		.loc 1 637 0
 1135 0228 0024     		movs	r4, #0
 645:main.c        ****         {
 1136              		.loc 1 645 0
 1137 022a 14E0     		b	.L57
 1138              	.LVL206:
 1139              	.L59:
 647:main.c        ****                                     // could replace this with the distance gathered from the ultra
 1140              		.loc 1 647 0
 1141 022c 3220     		movs	r0, #50
 1142 022e FFF7FEFF 		bl	mishaMoveDynamic
 1143              	.LVL207:
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 42


 649:main.c        ****             puck_scan = colourSensingOutput();  // colour sensor takes a scan
 1144              		.loc 1 649 0
 1145 0232 0120     		movs	r0, #1
 1146 0234 FFF7FEFF 		bl	changeHeightToPuck
 1147              	.LVL208:
 650:main.c        ****             changeHeightToPuck(3);  // arm returns to high position
 1148              		.loc 1 650 0
 1149 0238 FFF7FEFF 		bl	colourSensingOutput
 1150              	.LVL209:
 1151 023c 0546     		mov	r5, r0
 1152              	.LVL210:
 651:main.c        ****             mishaMoveDynamic(-50);   // robot moves backwards
 1153              		.loc 1 651 0
 1154 023e 0320     		movs	r0, #3
 1155              	.LVL211:
 1156 0240 FFF7FEFF 		bl	changeHeightToPuck
 1157              	.LVL212:
 652:main.c        ****             if (puck_scan == puckConstructionPlan[1]) {puck_correct = TRUE;}
 1158              		.loc 1 652 0
 1159 0244 6FF03100 		mvn	r0, #49
 1160 0248 FFF7FEFF 		bl	mishaMoveDynamic
 1161              	.LVL213:
 653:main.c        ****                                     // if colour == true:
 1162              		.loc 1 653 0
 1163 024c 0B4B     		ldr	r3, .L63+4
 1164 024e 9B68     		ldr	r3, [r3, #8]
 1165 0250 9D42     		cmp	r5, r3
 1166 0252 00D1     		bne	.L57
 1167 0254 0124     		movs	r4, #1
 1168              	.LVL214:
 1169              	.L57:
 645:main.c        ****         {
 1170              		.loc 1 645 0
 1171 0256 002C     		cmp	r4, #0
 1172 0258 E8D0     		beq	.L59
 664:main.c        ****         //changeHeightToPuck(1);
 1173              		.loc 1 664 0
 1174 025a 0020     		movs	r0, #0
 1175 025c FFF7FEFF 		bl	changeHeightToPuck
 1176              	.LVL215:
 666:main.c        ****         //mishaMoveDynamic(60);       // robot moves forward
 1177              		.loc 1 666 0
 1178 0260 FFF7FEFF 		bl	moveUntilPuck
 1179              	.LVL216:
 668:main.c        ****         changeHeightToPuck(3);      // arm lifts up to highest position
 1180              		.loc 1 668 0
 1181 0264 FFF7FEFF 		bl	armClose
 1182              	.LVL217:
 669:main.c        ****         mishaMoveDynamic(-60);       // robot moves back away from puck area 
 1183              		.loc 1 669 0
 1184 0268 0320     		movs	r0, #3
 1185 026a FFF7FEFF 		bl	changeHeightToPuck
 1186              	.LVL218:
 670:main.c        ****         
 1187              		.loc 1 670 0
 1188 026e 6FF03B00 		mvn	r0, #59
 1189 0272 FFF7FEFF 		bl	mishaMoveDynamic
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 43


 1190              	.LVL219:
 1191              	.L60:
 1192 0276 FEE7     		b	.L60
 1193              	.L64:
 1194              		.align	2
 1195              	.L63:
 1196 0278 40000000 		.word	.LC5
 1197 027c 00000000 		.word	.LANCHOR0
 1198 0280 00000000 		.word	output
 1199 0284 00000000 		.word	ultrasonic_distances_mm
 1200 0288 00000000 		.word	.LC0
 1201 028c 58000000 		.word	.LC6
 1202 0290 00000000 		.word	TIH
 1203 0294 00000000 		.word	StartIH
 1204 0298 00000000 		.word	.LANCHOR1
 1205 029c 5C000000 		.word	.LC7
 1206 02a0 70000000 		.word	.LC8
 1207 02a4 00000000 		.word	SPEED
 1208              	.LBE9:
 1209              		.cfi_endproc
 1210              	.LFE66:
 1211              		.size	main, .-main
 1212              		.comm	distance_returned_global,4,4
 1213              		.global	current_stage
 1214              		.global	PLAN_SCAN_VERTICAL
 1215              		.global	moving
 1216              		.global	colour_sensing_algorithm
 1217              		.global	colour_flag
 1218              		.global	idac_value
 1219              		.comm	moveBackwardAllowed,2,2
 1220              		.comm	moveForwardAllowed,2,2
 1221              		.comm	moveRightAllowed,2,2
 1222              		.comm	moveLeftAllowed,2,2
 1223              		.global	moveNow
 1224              		.comm	desiredOrientation,4,4
 1225              		.global	currentOrientation
 1226              		.comm	desiredPosition,8,4
 1227              		.global	currentPosition
 1228              		.global	puckWestClearance
 1229              		.global	puckEastClearance
 1230              		.global	blockWestClearance
 1231              		.global	blockEastClearance
 1232              		.comm	pathPastBlock,4,4
 1233              		.comm	pathToPucks,4,4
 1234              		.global	beginNavigation
 1235              		.global	horizontalPuckGrid
 1236              		.global	puckConstructionPlan
 1237              		.global	currentPuckStackSize
 1238              		.global	running
 1239              		.global	state
 1240              		.comm	ultrasonic_flag,4,4
 1241              		.comm	initialisation,4,4
 1242              		.comm	output,32,4
 1243              		.global	turningRightFlag
 1244              		.global	turningLeftFlag
 1245              		.global	drivingBackwardFlag
 1246              		.global	drivingForwardFlag
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 44


 1247              		.comm	puckPileLocation,4,4
 1248              		.global	block_edge_location
 1249              		.global	sweeping
 1250              		.global	puckRackOffsetsFromWest
 1251              		.global	puckRackColours
 1252              		.global	currentPuckRackScanningIndex
 1253              		.comm	driveStraightEnable,4,4
 1254              		.section	.rodata
 1255              		.align	2
 1256              		.type	PLAN_SCAN_VERTICAL, %object
 1257              		.size	PLAN_SCAN_VERTICAL, 4
 1258              	PLAN_SCAN_VERTICAL:
 1259 0000 0A000000 		.word	10
 1260              		.data
 1261              		.align	2
 1262              		.set	.LANCHOR1,. + 0
 1263              		.type	colour_flag, %object
 1264              		.size	colour_flag, 4
 1265              	colour_flag:
 1266 0000 01000000 		.word	1
 1267              		.type	current_stage, %object
 1268              		.size	current_stage, 4
 1269              	current_stage:
 1270 0004 01000000 		.word	1
 1271              		.type	state, %object
 1272              		.size	state, 4
 1273              	state:
 1274 0008 01000000 		.word	1
 1275              		.type	puckRackOffsetsFromWest, %object
 1276              		.size	puckRackOffsetsFromWest, 20
 1277              	puckRackOffsetsFromWest:
 1278 000c D0020000 		.word	720
 1279 0010 94020000 		.word	660
 1280 0014 58020000 		.word	600
 1281 0018 1C020000 		.word	540
 1282 001c E0010000 		.word	480
 1283              		.type	moveNow, %object
 1284              		.size	moveNow, 2
 1285              	moveNow:
 1286 0020 0100     		.short	1
 1287 0022 0000     		.space	2
 1288              		.type	currentOrientation, %object
 1289              		.size	currentOrientation, 4
 1290              	currentOrientation:
 1291 0024 5A000000 		.word	90
 1292              		.type	running, %object
 1293              		.size	running, 4
 1294              	running:
 1295 0028 01000000 		.word	1
 1296              		.section	.rodata.str1.4,"aMS",%progbits,1
 1297              		.align	2
 1298              	.LC0:
 1299 0000 25642009 		.ascii	"%d \011\000"
 1299      00
 1300 0005 000000   		.space	3
 1301              	.LC1:
 1302 0008 64696666 		.ascii	"difference = %d, \012\000"
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 45


 1302      6572656E 
 1302      6365203D 
 1302      2025642C 
 1302      200A00
 1303 001b 00       		.space	1
 1304              	.LC2:
 1305 001c 25642C20 		.ascii	"%d, %d \012\000"
 1305      2564200A 
 1305      00
 1306 0025 000000   		.space	3
 1307              	.LC3:
 1308 0028 20256420 		.ascii	" %d , %d \011\000"
 1308      2C202564 
 1308      200900
 1309 0033 00       		.space	1
 1310              	.LC4:
 1311 0034 6469663A 		.ascii	"dif: %d, \012\000"
 1311      2025642C 
 1311      200A00
 1312 003f 00       		.space	1
 1313              	.LC5:
 1314 0040 55415254 		.ascii	"UART commencing... \012\000"
 1314      20636F6D 
 1314      6D656E63 
 1314      696E672E 
 1314      2E2E200A 
 1315 0055 000000   		.space	3
 1316              	.LC6:
 1317 0058 0A00     		.ascii	"\012\000"
 1318 005a 0000     		.space	2
 1319              	.LC7:
 1320 005c 466F756E 		.ascii	"Found Colours: \012\000"
 1320      6420436F 
 1320      6C6F7572 
 1320      733A200A 
 1320      00
 1321 006d 000000   		.space	3
 1322              	.LC8:
 1323 0070 2569200A 		.ascii	"%i \012\000"
 1323      00
 1324              		.bss
 1325              		.align	2
 1326              		.set	.LANCHOR0,. + 0
 1327              		.type	beginNavigation, %object
 1328              		.size	beginNavigation, 4
 1329              	beginNavigation:
 1330 0000 00000000 		.space	4
 1331              		.type	puckConstructionPlan, %object
 1332              		.size	puckConstructionPlan, 12
 1333              	puckConstructionPlan:
 1334 0004 00000000 		.space	12
 1334      00000000 
 1334      00000000 
 1335              		.type	colour_sensing_algorithm, %object
 1336              		.size	colour_sensing_algorithm, 4
 1337              	colour_sensing_algorithm:
 1338 0010 00000000 		.space	4
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 46


 1339              		.type	idac_value, %object
 1340              		.size	idac_value, 4
 1341              	idac_value:
 1342 0014 00000000 		.space	4
 1343              		.type	puckRackColours, %object
 1344              		.size	puckRackColours, 20
 1345              	puckRackColours:
 1346 0018 00000000 		.space	20
 1346      00000000 
 1346      00000000 
 1346      00000000 
 1346      00000000 
 1347              		.type	moving, %object
 1348              		.size	moving, 4
 1349              	moving:
 1350 002c 00000000 		.space	4
 1351              		.type	currentPosition, %object
 1352              		.size	currentPosition, 8
 1353              	currentPosition:
 1354 0030 00000000 		.space	8
 1354      00000000 
 1355              		.type	puckWestClearance, %object
 1356              		.size	puckWestClearance, 2
 1357              	puckWestClearance:
 1358 0038 0000     		.space	2
 1359              		.type	puckEastClearance, %object
 1360              		.size	puckEastClearance, 2
 1361              	puckEastClearance:
 1362 003a 0000     		.space	2
 1363              		.type	blockWestClearance, %object
 1364              		.size	blockWestClearance, 2
 1365              	blockWestClearance:
 1366 003c 0000     		.space	2
 1367              		.type	blockEastClearance, %object
 1368              		.size	blockEastClearance, 2
 1369              	blockEastClearance:
 1370 003e 0000     		.space	2
 1371              		.type	horizontalPuckGrid, %object
 1372              		.size	horizontalPuckGrid, 4
 1373              	horizontalPuckGrid:
 1374 0040 00000000 		.space	4
 1375              		.type	currentPuckStackSize, %object
 1376              		.size	currentPuckStackSize, 4
 1377              	currentPuckStackSize:
 1378 0044 00000000 		.space	4
 1379              		.type	turningRightFlag, %object
 1380              		.size	turningRightFlag, 2
 1381              	turningRightFlag:
 1382 0048 0000     		.space	2
 1383              		.type	turningLeftFlag, %object
 1384              		.size	turningLeftFlag, 2
 1385              	turningLeftFlag:
 1386 004a 0000     		.space	2
 1387              		.type	drivingBackwardFlag, %object
 1388              		.size	drivingBackwardFlag, 2
 1389              	drivingBackwardFlag:
 1390 004c 0000     		.space	2
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 47


 1391              		.type	drivingForwardFlag, %object
 1392              		.size	drivingForwardFlag, 2
 1393              	drivingForwardFlag:
 1394 004e 0000     		.space	2
 1395              		.type	block_edge_location, %object
 1396              		.size	block_edge_location, 16
 1397              	block_edge_location:
 1398 0050 00000000 		.space	16
 1398      00000000 
 1398      00000000 
 1398      00000000 
 1399              		.type	sweeping, %object
 1400              		.size	sweeping, 4
 1401              	sweeping:
 1402 0060 00000000 		.space	4
 1403              		.type	currentPuckRackScanningIndex, %object
 1404              		.size	currentPuckRackScanningIndex, 4
 1405              	currentPuckRackScanningIndex:
 1406 0064 00000000 		.space	4
 1407              		.text
 1408              	.Letext0:
 1409              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1410              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1411              		.file 4 "Generated_Source\\PSoC5/core_cm3.h"
 1412              		.file 5 "ultrasonic.h"
 1413              		.file 6 "main.h"
 1414              		.file 7 "Generated_Source\\PSoC5/CyLib.h"
 1415              		.file 8 "servo.h"
 1416              		.file 9 "colour.h"
 1417              		.file 10 "Generated_Source\\PSoC5/Motor_Left_Control.h"
 1418              		.file 11 "Generated_Source\\PSoC5/Motor_Right_Control.h"
 1419              		.file 12 "Generated_Source\\PSoC5/Motor_Left_Driver.h"
 1420              		.file 13 "Generated_Source\\PSoC5/Motor_Right_Driver.h"
 1421              		.file 14 "Generated_Source\\PSoC5/Motor_Left_Decoder.h"
 1422              		.file 15 "Generated_Source\\PSoC5/Motor_Right_Decoder.h"
 1423              		.file 16 "mishamotor.h"
 1424              		.file 17 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4
 1425              		.file 18 "Generated_Source\\PSoC5/UART_1.h"
 1426              		.file 19 "Generated_Source\\PSoC5/control_photodiode.h"
 1427              		.file 20 "Generated_Source\\PSoC5/TIA_1.h"
 1428              		.file 21 "Generated_Source\\PSoC5/ADC.h"
 1429              		.file 22 "Generated_Source\\PSoC5/IDAC8_1.h"
 1430              		.file 23 "Generated_Source\\PSoC5/control_led.h"
 1431              		.file 24 "Generated_Source\\PSoC5/Rack_Servo_PWM.h"
 1432              		.file 25 "Generated_Source\\PSoC5/Gripper_Servo_PWM.h"
 1433              		.file 26 "Generated_Source\\PSoC5/Timer_1.h"
 1434              		.file 27 "Generated_Source\\PSoC5/Sonic.h"
 1435              		.file 28 "Generated_Source\\PSoC5/Start.h"
 1436              		.section	.debug_info,"",%progbits
 1437              	.Ldebug_info0:
 1438 0000 5D130000 		.4byte	0x135d
 1439 0004 0400     		.2byte	0x4
 1440 0006 00000000 		.4byte	.Ldebug_abbrev0
 1441 000a 04       		.byte	0x4
 1442 000b 01       		.uleb128 0x1
 1443 000c 80030000 		.4byte	.LASF131
 1444 0010 0C       		.byte	0xc
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 48


 1445 0011 12000000 		.4byte	.LASF132
 1446 0015 37000000 		.4byte	.LASF133
 1447 0019 18000000 		.4byte	.Ldebug_ranges0+0x18
 1448 001d 00000000 		.4byte	0
 1449 0021 00000000 		.4byte	.Ldebug_line0
 1450 0025 02       		.uleb128 0x2
 1451 0026 01       		.byte	0x1
 1452 0027 06       		.byte	0x6
 1453 0028 3B090000 		.4byte	.LASF0
 1454 002c 02       		.uleb128 0x2
 1455 002d 01       		.byte	0x1
 1456 002e 08       		.byte	0x8
 1457 002f A6080000 		.4byte	.LASF1
 1458 0033 02       		.uleb128 0x2
 1459 0034 02       		.byte	0x2
 1460 0035 05       		.byte	0x5
 1461 0036 50070000 		.4byte	.LASF2
 1462 003a 02       		.uleb128 0x2
 1463 003b 02       		.byte	0x2
 1464 003c 07       		.byte	0x7
 1465 003d 50090000 		.4byte	.LASF3
 1466 0041 03       		.uleb128 0x3
 1467 0042 2E010000 		.4byte	.LASF9
 1468 0046 02       		.byte	0x2
 1469 0047 3F       		.byte	0x3f
 1470 0048 4C000000 		.4byte	0x4c
 1471 004c 02       		.uleb128 0x2
 1472 004d 04       		.byte	0x4
 1473 004e 05       		.byte	0x5
 1474 004f 74070000 		.4byte	.LASF4
 1475 0053 02       		.uleb128 0x2
 1476 0054 04       		.byte	0x4
 1477 0055 07       		.byte	0x7
 1478 0056 52080000 		.4byte	.LASF5
 1479 005a 02       		.uleb128 0x2
 1480 005b 08       		.byte	0x8
 1481 005c 05       		.byte	0x5
 1482 005d 9D050000 		.4byte	.LASF6
 1483 0061 02       		.uleb128 0x2
 1484 0062 08       		.byte	0x8
 1485 0063 07       		.byte	0x7
 1486 0064 A6020000 		.4byte	.LASF7
 1487 0068 04       		.uleb128 0x4
 1488 0069 04       		.byte	0x4
 1489 006a 05       		.byte	0x5
 1490 006b 696E7400 		.ascii	"int\000"
 1491 006f 02       		.uleb128 0x2
 1492 0070 04       		.byte	0x4
 1493 0071 07       		.byte	0x7
 1494 0072 CE000000 		.4byte	.LASF8
 1495 0076 03       		.uleb128 0x3
 1496 0077 72080000 		.4byte	.LASF10
 1497 007b 03       		.byte	0x3
 1498 007c 2C       		.byte	0x2c
 1499 007d 41000000 		.4byte	0x41
 1500 0081 02       		.uleb128 0x2
 1501 0082 04       		.byte	0x4
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 49


 1502 0083 04       		.byte	0x4
 1503 0084 4F020000 		.4byte	.LASF11
 1504 0088 02       		.uleb128 0x2
 1505 0089 08       		.byte	0x8
 1506 008a 04       		.byte	0x4
 1507 008b 88090000 		.4byte	.LASF12
 1508 008f 02       		.uleb128 0x2
 1509 0090 01       		.byte	0x1
 1510 0091 08       		.byte	0x8
 1511 0092 00050000 		.4byte	.LASF13
 1512 0096 02       		.uleb128 0x2
 1513 0097 08       		.byte	0x8
 1514 0098 04       		.byte	0x4
 1515 0099 B6060000 		.4byte	.LASF14
 1516 009d 02       		.uleb128 0x2
 1517 009e 04       		.byte	0x4
 1518 009f 07       		.byte	0x7
 1519 00a0 30080000 		.4byte	.LASF15
 1520 00a4 05       		.uleb128 0x5
 1521 00a5 54494800 		.ascii	"TIH\000"
 1522 00a9 01       		.byte	0x1
 1523 00aa 6F       		.byte	0x6f
 1524 00ab 00000000 		.4byte	.LFB64
 1525 00af 08000000 		.4byte	.LFE64-.LFB64
 1526 00b3 01       		.uleb128 0x1
 1527 00b4 9C       		.byte	0x9c
 1528 00b5 C3000000 		.4byte	0xc3
 1529 00b9 06       		.uleb128 0x6
 1530 00ba 06000000 		.4byte	.LVL0
 1531 00be 71110000 		.4byte	0x1171
 1532 00c2 00       		.byte	0
 1533 00c3 07       		.uleb128 0x7
 1534 00c4 1A080000 		.4byte	.LASF16
 1535 00c8 01       		.byte	0x1
 1536 00c9 74       		.byte	0x74
 1537 00ca 00000000 		.4byte	.LFB65
 1538 00ce 20000000 		.4byte	.LFE65-.LFB65
 1539 00d2 01       		.uleb128 0x1
 1540 00d3 9C       		.byte	0x9c
 1541 00d4 E9000000 		.4byte	0xe9
 1542 00d8 08       		.uleb128 0x8
 1543 00d9 08000000 		.4byte	.LVL1
 1544 00dd 7C110000 		.4byte	0x117c
 1545 00e1 09       		.uleb128 0x9
 1546 00e2 01       		.uleb128 0x1
 1547 00e3 50       		.byte	0x50
 1548 00e4 02       		.uleb128 0x2
 1549 00e5 08       		.byte	0x8
 1550 00e6 64       		.byte	0x64
 1551 00e7 00       		.byte	0
 1552 00e8 00       		.byte	0
 1553 00e9 0A       		.uleb128 0xa
 1554 00ea 08000000 		.4byte	.LASF17
 1555 00ee 01       		.byte	0x1
 1556 00ef 2303     		.2byte	0x323
 1557 00f1 00000000 		.4byte	.LFB67
 1558 00f5 44000000 		.4byte	.LFE67-.LFB67
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 50


 1559 00f9 01       		.uleb128 0x1
 1560 00fa 9C       		.byte	0x9c
 1561 00fb 5E010000 		.4byte	0x15e
 1562 00ff 0B       		.uleb128 0xb
 1563 0100 7B090000 		.4byte	.LASF18
 1564 0104 01       		.byte	0x1
 1565 0105 2503     		.2byte	0x325
 1566 0107 68000000 		.4byte	0x68
 1567 010b 00000000 		.4byte	.LLST0
 1568 010f 0B       		.uleb128 0xb
 1569 0110 B4010000 		.4byte	.LASF19
 1570 0114 01       		.byte	0x1
 1571 0115 2603     		.2byte	0x326
 1572 0117 68000000 		.4byte	0x68
 1573 011b 1F000000 		.4byte	.LLST1
 1574 011f 0C       		.uleb128 0xc
 1575 0120 0E000000 		.4byte	.LVL3
 1576 0124 87110000 		.4byte	0x1187
 1577 0128 32010000 		.4byte	0x132
 1578 012c 09       		.uleb128 0x9
 1579 012d 01       		.uleb128 0x1
 1580 012e 50       		.byte	0x50
 1581 012f 01       		.uleb128 0x1
 1582 0130 33       		.byte	0x33
 1583 0131 00       		.byte	0
 1584 0132 0C       		.uleb128 0xc
 1585 0133 18000000 		.4byte	.LVL5
 1586 0137 87110000 		.4byte	0x1187
 1587 013b 45010000 		.4byte	0x145
 1588 013f 09       		.uleb128 0x9
 1589 0140 01       		.uleb128 0x1
 1590 0141 50       		.byte	0x50
 1591 0142 01       		.uleb128 0x1
 1592 0143 31       		.byte	0x31
 1593 0144 00       		.byte	0
 1594 0145 06       		.uleb128 0x6
 1595 0146 1C000000 		.4byte	.LVL6
 1596 014a 92110000 		.4byte	0x1192
 1597 014e 08       		.uleb128 0x8
 1598 014f 24000000 		.4byte	.LVL9
 1599 0153 87110000 		.4byte	0x1187
 1600 0157 09       		.uleb128 0x9
 1601 0158 01       		.uleb128 0x1
 1602 0159 50       		.byte	0x50
 1603 015a 01       		.uleb128 0x1
 1604 015b 33       		.byte	0x33
 1605 015c 00       		.byte	0
 1606 015d 00       		.byte	0
 1607 015e 0A       		.uleb128 0xa
 1608 015f 64080000 		.4byte	.LASF20
 1609 0163 01       		.byte	0x1
 1610 0164 5803     		.2byte	0x358
 1611 0166 00000000 		.4byte	.LFB68
 1612 016a 64000000 		.4byte	.LFE68-.LFB68
 1613 016e 01       		.uleb128 0x1
 1614 016f 9C       		.byte	0x9c
 1615 0170 32020000 		.4byte	0x232
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 51


 1616 0174 0B       		.uleb128 0xb
 1617 0175 0E040000 		.4byte	.LASF21
 1618 0179 01       		.byte	0x1
 1619 017a 5903     		.2byte	0x359
 1620 017c 68000000 		.4byte	0x68
 1621 0180 3D000000 		.4byte	.LLST2
 1622 0184 0C       		.uleb128 0xc
 1623 0185 08000000 		.4byte	.LVL13
 1624 0189 9D110000 		.4byte	0x119d
 1625 018d 97010000 		.4byte	0x197
 1626 0191 09       		.uleb128 0x9
 1627 0192 01       		.uleb128 0x1
 1628 0193 50       		.byte	0x50
 1629 0194 01       		.uleb128 0x1
 1630 0195 30       		.byte	0x30
 1631 0196 00       		.byte	0
 1632 0197 0C       		.uleb128 0xc
 1633 0198 0E000000 		.4byte	.LVL14
 1634 019c A8110000 		.4byte	0x11a8
 1635 01a0 AA010000 		.4byte	0x1aa
 1636 01a4 09       		.uleb128 0x9
 1637 01a5 01       		.uleb128 0x1
 1638 01a6 50       		.byte	0x50
 1639 01a7 01       		.uleb128 0x1
 1640 01a8 30       		.byte	0x30
 1641 01a9 00       		.byte	0
 1642 01aa 06       		.uleb128 0x6
 1643 01ab 12000000 		.4byte	.LVL15
 1644 01af B3110000 		.4byte	0x11b3
 1645 01b3 06       		.uleb128 0x6
 1646 01b4 1A000000 		.4byte	.LVL16
 1647 01b8 BE110000 		.4byte	0x11be
 1648 01bc 06       		.uleb128 0x6
 1649 01bd 1E000000 		.4byte	.LVL17
 1650 01c1 C9110000 		.4byte	0x11c9
 1651 01c5 06       		.uleb128 0x6
 1652 01c6 24000000 		.4byte	.LVL18
 1653 01ca D4110000 		.4byte	0x11d4
 1654 01ce 06       		.uleb128 0x6
 1655 01cf 32000000 		.4byte	.LVL20
 1656 01d3 92110000 		.4byte	0x1192
 1657 01d7 0C       		.uleb128 0xc
 1658 01d8 3A000000 		.4byte	.LVL23
 1659 01dc 7C110000 		.4byte	0x117c
 1660 01e0 EA010000 		.4byte	0x1ea
 1661 01e4 09       		.uleb128 0x9
 1662 01e5 01       		.uleb128 0x1
 1663 01e6 50       		.byte	0x50
 1664 01e7 01       		.uleb128 0x1
 1665 01e8 3A       		.byte	0x3a
 1666 01e9 00       		.byte	0
 1667 01ea 0C       		.uleb128 0xc
 1668 01eb 44000000 		.4byte	.LVL24
 1669 01ef DF110000 		.4byte	0x11df
 1670 01f3 FD010000 		.4byte	0x1fd
 1671 01f7 09       		.uleb128 0x9
 1672 01f8 01       		.uleb128 0x1
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 52


 1673 01f9 50       		.byte	0x50
 1674 01fa 01       		.uleb128 0x1
 1675 01fb 30       		.byte	0x30
 1676 01fc 00       		.byte	0
 1677 01fd 0C       		.uleb128 0xc
 1678 01fe 4A000000 		.4byte	.LVL25
 1679 0202 EA110000 		.4byte	0x11ea
 1680 0206 10020000 		.4byte	0x210
 1681 020a 09       		.uleb128 0x9
 1682 020b 01       		.uleb128 0x1
 1683 020c 50       		.byte	0x50
 1684 020d 01       		.uleb128 0x1
 1685 020e 30       		.byte	0x30
 1686 020f 00       		.byte	0
 1687 0210 06       		.uleb128 0x6
 1688 0211 4E000000 		.4byte	.LVL26
 1689 0215 F5110000 		.4byte	0x11f5
 1690 0219 06       		.uleb128 0x6
 1691 021a 52000000 		.4byte	.LVL27
 1692 021e 00120000 		.4byte	0x1200
 1693 0222 08       		.uleb128 0x8
 1694 0223 58000000 		.4byte	.LVL28
 1695 0227 0B120000 		.4byte	0x120b
 1696 022b 09       		.uleb128 0x9
 1697 022c 01       		.uleb128 0x1
 1698 022d 50       		.byte	0x50
 1699 022e 01       		.uleb128 0x1
 1700 022f 4E       		.byte	0x4e
 1701 0230 00       		.byte	0
 1702 0231 00       		.byte	0
 1703 0232 0A       		.uleb128 0xa
 1704 0233 F1040000 		.4byte	.LASF22
 1705 0237 01       		.byte	0x1
 1706 0238 7703     		.2byte	0x377
 1707 023a 00000000 		.4byte	.LFB69
 1708 023e D0010000 		.4byte	.LFE69-.LFB69
 1709 0242 01       		.uleb128 0x1
 1710 0243 9C       		.byte	0x9c
 1711 0244 67060000 		.4byte	0x667
 1712 0248 0D       		.uleb128 0xd
 1713 0249 C3000000 		.4byte	.LASF23
 1714 024d 01       		.byte	0x1
 1715 024e 7903     		.2byte	0x379
 1716 0250 68000000 		.4byte	0x68
 1717 0254 0D       		.uleb128 0xd
 1718 0255 9A080000 		.4byte	.LASF24
 1719 0259 01       		.byte	0x1
 1720 025a 7A03     		.2byte	0x37a
 1721 025c 68000000 		.4byte	0x68
 1722 0260 0B       		.uleb128 0xb
 1723 0261 0C090000 		.4byte	.LASF25
 1724 0265 01       		.byte	0x1
 1725 0266 7B03     		.2byte	0x37b
 1726 0268 68000000 		.4byte	0x68
 1727 026c 72000000 		.4byte	.LLST3
 1728 0270 0E       		.uleb128 0xe
 1729 0271 65050000 		.4byte	.LASF26
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 53


 1730 0275 01       		.byte	0x1
 1731 0276 7C03     		.2byte	0x37c
 1732 0278 68000000 		.4byte	0x68
 1733 027c 03       		.byte	0x3
 1734 027d 0D       		.uleb128 0xd
 1735 027e BD020000 		.4byte	.LASF27
 1736 0282 01       		.byte	0x1
 1737 0283 9103     		.2byte	0x391
 1738 0285 68000000 		.4byte	0x68
 1739 0289 0D       		.uleb128 0xd
 1740 028a 2B000000 		.4byte	.LASF28
 1741 028e 01       		.byte	0x1
 1742 028f 9203     		.2byte	0x392
 1743 0291 68000000 		.4byte	0x68
 1744 0295 0C       		.uleb128 0xc
 1745 0296 0E000000 		.4byte	.LVL32
 1746 029a 16120000 		.4byte	0x1216
 1747 029e A8020000 		.4byte	0x2a8
 1748 02a2 09       		.uleb128 0x9
 1749 02a3 01       		.uleb128 0x1
 1750 02a4 50       		.byte	0x50
 1751 02a5 01       		.uleb128 0x1
 1752 02a6 30       		.byte	0x30
 1753 02a7 00       		.byte	0
 1754 02a8 0C       		.uleb128 0xc
 1755 02a9 14000000 		.4byte	.LVL33
 1756 02ad 7C110000 		.4byte	0x117c
 1757 02b1 BC020000 		.4byte	0x2bc
 1758 02b5 09       		.uleb128 0x9
 1759 02b6 01       		.uleb128 0x1
 1760 02b7 50       		.byte	0x50
 1761 02b8 02       		.uleb128 0x2
 1762 02b9 08       		.byte	0x8
 1763 02ba 32       		.byte	0x32
 1764 02bb 00       		.byte	0
 1765 02bc 0C       		.uleb128 0xc
 1766 02bd 24000000 		.4byte	.LVL35
 1767 02c1 21120000 		.4byte	0x1221
 1768 02c5 D6020000 		.4byte	0x2d6
 1769 02c9 09       		.uleb128 0x9
 1770 02ca 01       		.uleb128 0x1
 1771 02cb 50       		.byte	0x50
 1772 02cc 02       		.uleb128 0x2
 1773 02cd 75       		.byte	0x75
 1774 02ce 00       		.sleb128 0
 1775 02cf 09       		.uleb128 0x9
 1776 02d0 01       		.uleb128 0x1
 1777 02d1 51       		.byte	0x51
 1778 02d2 02       		.uleb128 0x2
 1779 02d3 74       		.byte	0x74
 1780 02d4 00       		.sleb128 0
 1781 02d5 00       		.byte	0
 1782 02d6 0C       		.uleb128 0xc
 1783 02d7 2A000000 		.4byte	.LVL36
 1784 02db 2C120000 		.4byte	0x122c
 1785 02df EA020000 		.4byte	0x2ea
 1786 02e3 09       		.uleb128 0x9
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 54


 1787 02e4 01       		.uleb128 0x1
 1788 02e5 50       		.byte	0x50
 1789 02e6 02       		.uleb128 0x2
 1790 02e7 75       		.byte	0x75
 1791 02e8 00       		.sleb128 0
 1792 02e9 00       		.byte	0
 1793 02ea 0C       		.uleb128 0xc
 1794 02eb 30000000 		.4byte	.LVL37
 1795 02ef 16120000 		.4byte	0x1216
 1796 02f3 FD020000 		.4byte	0x2fd
 1797 02f7 09       		.uleb128 0x9
 1798 02f8 01       		.uleb128 0x1
 1799 02f9 50       		.byte	0x50
 1800 02fa 01       		.uleb128 0x1
 1801 02fb 31       		.byte	0x31
 1802 02fc 00       		.byte	0
 1803 02fd 0C       		.uleb128 0xc
 1804 02fe 36000000 		.4byte	.LVL38
 1805 0302 7C110000 		.4byte	0x117c
 1806 0306 11030000 		.4byte	0x311
 1807 030a 09       		.uleb128 0x9
 1808 030b 01       		.uleb128 0x1
 1809 030c 50       		.byte	0x50
 1810 030d 02       		.uleb128 0x2
 1811 030e 08       		.byte	0x8
 1812 030f 32       		.byte	0x32
 1813 0310 00       		.byte	0
 1814 0311 0C       		.uleb128 0xc
 1815 0312 40000000 		.4byte	.LVL39
 1816 0316 21120000 		.4byte	0x1221
 1817 031a 2B030000 		.4byte	0x32b
 1818 031e 09       		.uleb128 0x9
 1819 031f 01       		.uleb128 0x1
 1820 0320 50       		.byte	0x50
 1821 0321 02       		.uleb128 0x2
 1822 0322 75       		.byte	0x75
 1823 0323 00       		.sleb128 0
 1824 0324 09       		.uleb128 0x9
 1825 0325 01       		.uleb128 0x1
 1826 0326 51       		.byte	0x51
 1827 0327 02       		.uleb128 0x2
 1828 0328 74       		.byte	0x74
 1829 0329 00       		.sleb128 0
 1830 032a 00       		.byte	0
 1831 032b 0C       		.uleb128 0xc
 1832 032c 46000000 		.4byte	.LVL40
 1833 0330 2C120000 		.4byte	0x122c
 1834 0334 3F030000 		.4byte	0x33f
 1835 0338 09       		.uleb128 0x9
 1836 0339 01       		.uleb128 0x1
 1837 033a 50       		.byte	0x50
 1838 033b 02       		.uleb128 0x2
 1839 033c 75       		.byte	0x75
 1840 033d 00       		.sleb128 0
 1841 033e 00       		.byte	0
 1842 033f 0C       		.uleb128 0xc
 1843 0340 56000000 		.4byte	.LVL42
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 55


 1844 0344 21120000 		.4byte	0x1221
 1845 0348 62030000 		.4byte	0x362
 1846 034c 09       		.uleb128 0x9
 1847 034d 01       		.uleb128 0x1
 1848 034e 50       		.byte	0x50
 1849 034f 02       		.uleb128 0x2
 1850 0350 75       		.byte	0x75
 1851 0351 00       		.sleb128 0
 1852 0352 09       		.uleb128 0x9
 1853 0353 01       		.uleb128 0x1
 1854 0354 51       		.byte	0x51
 1855 0355 05       		.uleb128 0x5
 1856 0356 03       		.byte	0x3
 1857 0357 08000000 		.4byte	.LC1
 1858 035b 09       		.uleb128 0x9
 1859 035c 01       		.uleb128 0x1
 1860 035d 52       		.byte	0x52
 1861 035e 02       		.uleb128 0x2
 1862 035f 74       		.byte	0x74
 1863 0360 00       		.sleb128 0
 1864 0361 00       		.byte	0
 1865 0362 0C       		.uleb128 0xc
 1866 0363 5C000000 		.4byte	.LVL43
 1867 0367 2C120000 		.4byte	0x122c
 1868 036b 76030000 		.4byte	0x376
 1869 036f 09       		.uleb128 0x9
 1870 0370 01       		.uleb128 0x1
 1871 0371 50       		.byte	0x50
 1872 0372 02       		.uleb128 0x2
 1873 0373 75       		.byte	0x75
 1874 0374 00       		.sleb128 0
 1875 0375 00       		.byte	0
 1876 0376 0C       		.uleb128 0xc
 1877 0377 72000000 		.4byte	.LVL44
 1878 037b 9D110000 		.4byte	0x119d
 1879 037f 89030000 		.4byte	0x389
 1880 0383 09       		.uleb128 0x9
 1881 0384 01       		.uleb128 0x1
 1882 0385 50       		.byte	0x50
 1883 0386 01       		.uleb128 0x1
 1884 0387 30       		.byte	0x30
 1885 0388 00       		.byte	0
 1886 0389 0C       		.uleb128 0xc
 1887 038a 78000000 		.4byte	.LVL45
 1888 038e A8110000 		.4byte	0x11a8
 1889 0392 9C030000 		.4byte	0x39c
 1890 0396 09       		.uleb128 0x9
 1891 0397 01       		.uleb128 0x1
 1892 0398 50       		.byte	0x50
 1893 0399 01       		.uleb128 0x1
 1894 039a 31       		.byte	0x31
 1895 039b 00       		.byte	0
 1896 039c 06       		.uleb128 0x6
 1897 039d 7E000000 		.4byte	.LVL47
 1898 03a1 B3110000 		.4byte	0x11b3
 1899 03a5 0C       		.uleb128 0xc
 1900 03a6 84000000 		.4byte	.LVL48
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 56


 1901 03aa BE110000 		.4byte	0x11be
 1902 03ae B8030000 		.4byte	0x3b8
 1903 03b2 09       		.uleb128 0x9
 1904 03b3 01       		.uleb128 0x1
 1905 03b4 50       		.byte	0x50
 1906 03b5 01       		.uleb128 0x1
 1907 03b6 4E       		.byte	0x4e
 1908 03b7 00       		.byte	0
 1909 03b8 06       		.uleb128 0x6
 1910 03b9 88000000 		.4byte	.LVL49
 1911 03bd C9110000 		.4byte	0x11c9
 1912 03c1 0C       		.uleb128 0xc
 1913 03c2 8E000000 		.4byte	.LVL50
 1914 03c6 D4110000 		.4byte	0x11d4
 1915 03ca D4030000 		.4byte	0x3d4
 1916 03ce 09       		.uleb128 0x9
 1917 03cf 01       		.uleb128 0x1
 1918 03d0 50       		.byte	0x50
 1919 03d1 01       		.uleb128 0x1
 1920 03d2 4E       		.byte	0x4e
 1921 03d3 00       		.byte	0
 1922 03d4 0C       		.uleb128 0xc
 1923 03d5 94000000 		.4byte	.LVL51
 1924 03d9 16120000 		.4byte	0x1216
 1925 03dd E7030000 		.4byte	0x3e7
 1926 03e1 09       		.uleb128 0x9
 1927 03e2 01       		.uleb128 0x1
 1928 03e3 50       		.byte	0x50
 1929 03e4 01       		.uleb128 0x1
 1930 03e5 30       		.byte	0x30
 1931 03e6 00       		.byte	0
 1932 03e7 0C       		.uleb128 0xc
 1933 03e8 9A000000 		.4byte	.LVL52
 1934 03ec 7C110000 		.4byte	0x117c
 1935 03f0 FB030000 		.4byte	0x3fb
 1936 03f4 09       		.uleb128 0x9
 1937 03f5 01       		.uleb128 0x1
 1938 03f6 50       		.byte	0x50
 1939 03f7 02       		.uleb128 0x2
 1940 03f8 08       		.byte	0x8
 1941 03f9 32       		.byte	0x32
 1942 03fa 00       		.byte	0
 1943 03fb 0C       		.uleb128 0xc
 1944 03fc A0000000 		.4byte	.LVL53
 1945 0400 16120000 		.4byte	0x1216
 1946 0404 0E040000 		.4byte	0x40e
 1947 0408 09       		.uleb128 0x9
 1948 0409 01       		.uleb128 0x1
 1949 040a 50       		.byte	0x50
 1950 040b 01       		.uleb128 0x1
 1951 040c 31       		.byte	0x31
 1952 040d 00       		.byte	0
 1953 040e 0C       		.uleb128 0xc
 1954 040f A6000000 		.4byte	.LVL54
 1955 0413 7C110000 		.4byte	0x117c
 1956 0417 22040000 		.4byte	0x422
 1957 041b 09       		.uleb128 0x9
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 57


 1958 041c 01       		.uleb128 0x1
 1959 041d 50       		.byte	0x50
 1960 041e 02       		.uleb128 0x2
 1961 041f 08       		.byte	0x8
 1962 0420 32       		.byte	0x32
 1963 0421 00       		.byte	0
 1964 0422 0C       		.uleb128 0xc
 1965 0423 B8000000 		.4byte	.LVL56
 1966 0427 21120000 		.4byte	0x1221
 1967 042b 3F040000 		.4byte	0x43f
 1968 042f 09       		.uleb128 0x9
 1969 0430 01       		.uleb128 0x1
 1970 0431 50       		.byte	0x50
 1971 0432 02       		.uleb128 0x2
 1972 0433 75       		.byte	0x75
 1973 0434 00       		.sleb128 0
 1974 0435 09       		.uleb128 0x9
 1975 0436 01       		.uleb128 0x1
 1976 0437 51       		.byte	0x51
 1977 0438 05       		.uleb128 0x5
 1978 0439 03       		.byte	0x3
 1979 043a 1C000000 		.4byte	.LC2
 1980 043e 00       		.byte	0
 1981 043f 0C       		.uleb128 0xc
 1982 0440 BE000000 		.4byte	.LVL57
 1983 0444 2C120000 		.4byte	0x122c
 1984 0448 53040000 		.4byte	0x453
 1985 044c 09       		.uleb128 0x9
 1986 044d 01       		.uleb128 0x1
 1987 044e 50       		.byte	0x50
 1988 044f 02       		.uleb128 0x2
 1989 0450 75       		.byte	0x75
 1990 0451 00       		.sleb128 0
 1991 0452 00       		.byte	0
 1992 0453 0C       		.uleb128 0xc
 1993 0454 C8000000 		.4byte	.LVL58
 1994 0458 21120000 		.4byte	0x1221
 1995 045c 76040000 		.4byte	0x476
 1996 0460 09       		.uleb128 0x9
 1997 0461 01       		.uleb128 0x1
 1998 0462 50       		.byte	0x50
 1999 0463 02       		.uleb128 0x2
 2000 0464 75       		.byte	0x75
 2001 0465 00       		.sleb128 0
 2002 0466 09       		.uleb128 0x9
 2003 0467 01       		.uleb128 0x1
 2004 0468 51       		.byte	0x51
 2005 0469 05       		.uleb128 0x5
 2006 046a 03       		.byte	0x3
 2007 046b 08000000 		.4byte	.LC1
 2008 046f 09       		.uleb128 0x9
 2009 0470 01       		.uleb128 0x1
 2010 0471 52       		.byte	0x52
 2011 0472 02       		.uleb128 0x2
 2012 0473 74       		.byte	0x74
 2013 0474 00       		.sleb128 0
 2014 0475 00       		.byte	0
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 58


 2015 0476 0C       		.uleb128 0xc
 2016 0477 CE000000 		.4byte	.LVL59
 2017 047b 2C120000 		.4byte	0x122c
 2018 047f 8A040000 		.4byte	0x48a
 2019 0483 09       		.uleb128 0x9
 2020 0484 01       		.uleb128 0x1
 2021 0485 50       		.byte	0x50
 2022 0486 02       		.uleb128 0x2
 2023 0487 75       		.byte	0x75
 2024 0488 00       		.sleb128 0
 2025 0489 00       		.byte	0
 2026 048a 0C       		.uleb128 0xc
 2027 048b EA000000 		.4byte	.LVL62
 2028 048f 9D110000 		.4byte	0x119d
 2029 0493 9D040000 		.4byte	0x49d
 2030 0497 09       		.uleb128 0x9
 2031 0498 01       		.uleb128 0x1
 2032 0499 50       		.byte	0x50
 2033 049a 01       		.uleb128 0x1
 2034 049b 31       		.byte	0x31
 2035 049c 00       		.byte	0
 2036 049d 0C       		.uleb128 0xc
 2037 049e F0000000 		.4byte	.LVL63
 2038 04a2 A8110000 		.4byte	0x11a8
 2039 04a6 B0040000 		.4byte	0x4b0
 2040 04aa 09       		.uleb128 0x9
 2041 04ab 01       		.uleb128 0x1
 2042 04ac 50       		.byte	0x50
 2043 04ad 01       		.uleb128 0x1
 2044 04ae 30       		.byte	0x30
 2045 04af 00       		.byte	0
 2046 04b0 06       		.uleb128 0x6
 2047 04b1 F6000000 		.4byte	.LVL65
 2048 04b5 B3110000 		.4byte	0x11b3
 2049 04b9 0C       		.uleb128 0xc
 2050 04ba FC000000 		.4byte	.LVL66
 2051 04be BE110000 		.4byte	0x11be
 2052 04c2 CC040000 		.4byte	0x4cc
 2053 04c6 09       		.uleb128 0x9
 2054 04c7 01       		.uleb128 0x1
 2055 04c8 50       		.byte	0x50
 2056 04c9 01       		.uleb128 0x1
 2057 04ca 4E       		.byte	0x4e
 2058 04cb 00       		.byte	0
 2059 04cc 06       		.uleb128 0x6
 2060 04cd 00010000 		.4byte	.LVL67
 2061 04d1 C9110000 		.4byte	0x11c9
 2062 04d5 0C       		.uleb128 0xc
 2063 04d6 06010000 		.4byte	.LVL68
 2064 04da D4110000 		.4byte	0x11d4
 2065 04de E8040000 		.4byte	0x4e8
 2066 04e2 09       		.uleb128 0x9
 2067 04e3 01       		.uleb128 0x1
 2068 04e4 50       		.byte	0x50
 2069 04e5 01       		.uleb128 0x1
 2070 04e6 4E       		.byte	0x4e
 2071 04e7 00       		.byte	0
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 59


 2072 04e8 0C       		.uleb128 0xc
 2073 04e9 0C010000 		.4byte	.LVL69
 2074 04ed 16120000 		.4byte	0x1216
 2075 04f1 FB040000 		.4byte	0x4fb
 2076 04f5 09       		.uleb128 0x9
 2077 04f6 01       		.uleb128 0x1
 2078 04f7 50       		.byte	0x50
 2079 04f8 01       		.uleb128 0x1
 2080 04f9 30       		.byte	0x30
 2081 04fa 00       		.byte	0
 2082 04fb 0C       		.uleb128 0xc
 2083 04fc 12010000 		.4byte	.LVL70
 2084 0500 7C110000 		.4byte	0x117c
 2085 0504 0F050000 		.4byte	0x50f
 2086 0508 09       		.uleb128 0x9
 2087 0509 01       		.uleb128 0x1
 2088 050a 50       		.byte	0x50
 2089 050b 02       		.uleb128 0x2
 2090 050c 08       		.byte	0x8
 2091 050d 32       		.byte	0x32
 2092 050e 00       		.byte	0
 2093 050f 0C       		.uleb128 0xc
 2094 0510 18010000 		.4byte	.LVL71
 2095 0514 16120000 		.4byte	0x1216
 2096 0518 22050000 		.4byte	0x522
 2097 051c 09       		.uleb128 0x9
 2098 051d 01       		.uleb128 0x1
 2099 051e 50       		.byte	0x50
 2100 051f 01       		.uleb128 0x1
 2101 0520 31       		.byte	0x31
 2102 0521 00       		.byte	0
 2103 0522 0C       		.uleb128 0xc
 2104 0523 1E010000 		.4byte	.LVL72
 2105 0527 7C110000 		.4byte	0x117c
 2106 052b 36050000 		.4byte	0x536
 2107 052f 09       		.uleb128 0x9
 2108 0530 01       		.uleb128 0x1
 2109 0531 50       		.byte	0x50
 2110 0532 02       		.uleb128 0x2
 2111 0533 08       		.byte	0x8
 2112 0534 32       		.byte	0x32
 2113 0535 00       		.byte	0
 2114 0536 0C       		.uleb128 0xc
 2115 0537 30010000 		.4byte	.LVL74
 2116 053b 21120000 		.4byte	0x1221
 2117 053f 53050000 		.4byte	0x553
 2118 0543 09       		.uleb128 0x9
 2119 0544 01       		.uleb128 0x1
 2120 0545 50       		.byte	0x50
 2121 0546 02       		.uleb128 0x2
 2122 0547 75       		.byte	0x75
 2123 0548 00       		.sleb128 0
 2124 0549 09       		.uleb128 0x9
 2125 054a 01       		.uleb128 0x1
 2126 054b 51       		.byte	0x51
 2127 054c 05       		.uleb128 0x5
 2128 054d 03       		.byte	0x3
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 60


 2129 054e 28000000 		.4byte	.LC3
 2130 0552 00       		.byte	0
 2131 0553 0C       		.uleb128 0xc
 2132 0554 36010000 		.4byte	.LVL75
 2133 0558 2C120000 		.4byte	0x122c
 2134 055c 67050000 		.4byte	0x567
 2135 0560 09       		.uleb128 0x9
 2136 0561 01       		.uleb128 0x1
 2137 0562 50       		.byte	0x50
 2138 0563 02       		.uleb128 0x2
 2139 0564 75       		.byte	0x75
 2140 0565 00       		.sleb128 0
 2141 0566 00       		.byte	0
 2142 0567 0C       		.uleb128 0xc
 2143 0568 40010000 		.4byte	.LVL76
 2144 056c 21120000 		.4byte	0x1221
 2145 0570 8A050000 		.4byte	0x58a
 2146 0574 09       		.uleb128 0x9
 2147 0575 01       		.uleb128 0x1
 2148 0576 50       		.byte	0x50
 2149 0577 02       		.uleb128 0x2
 2150 0578 75       		.byte	0x75
 2151 0579 00       		.sleb128 0
 2152 057a 09       		.uleb128 0x9
 2153 057b 01       		.uleb128 0x1
 2154 057c 51       		.byte	0x51
 2155 057d 05       		.uleb128 0x5
 2156 057e 03       		.byte	0x3
 2157 057f 34000000 		.4byte	.LC4
 2158 0583 09       		.uleb128 0x9
 2159 0584 01       		.uleb128 0x1
 2160 0585 52       		.byte	0x52
 2161 0586 02       		.uleb128 0x2
 2162 0587 74       		.byte	0x74
 2163 0588 00       		.sleb128 0
 2164 0589 00       		.byte	0
 2165 058a 0C       		.uleb128 0xc
 2166 058b 46010000 		.4byte	.LVL77
 2167 058f 2C120000 		.4byte	0x122c
 2168 0593 9E050000 		.4byte	0x59e
 2169 0597 09       		.uleb128 0x9
 2170 0598 01       		.uleb128 0x1
 2171 0599 50       		.byte	0x50
 2172 059a 02       		.uleb128 0x2
 2173 059b 75       		.byte	0x75
 2174 059c 00       		.sleb128 0
 2175 059d 00       		.byte	0
 2176 059e 0C       		.uleb128 0xc
 2177 059f 60010000 		.4byte	.LVL80
 2178 05a3 16120000 		.4byte	0x1216
 2179 05a7 B1050000 		.4byte	0x5b1
 2180 05ab 09       		.uleb128 0x9
 2181 05ac 01       		.uleb128 0x1
 2182 05ad 50       		.byte	0x50
 2183 05ae 01       		.uleb128 0x1
 2184 05af 30       		.byte	0x30
 2185 05b0 00       		.byte	0
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 61


 2186 05b1 0C       		.uleb128 0xc
 2187 05b2 66010000 		.4byte	.LVL81
 2188 05b6 7C110000 		.4byte	0x117c
 2189 05ba C5050000 		.4byte	0x5c5
 2190 05be 09       		.uleb128 0x9
 2191 05bf 01       		.uleb128 0x1
 2192 05c0 50       		.byte	0x50
 2193 05c1 02       		.uleb128 0x2
 2194 05c2 08       		.byte	0x8
 2195 05c3 32       		.byte	0x32
 2196 05c4 00       		.byte	0
 2197 05c5 0C       		.uleb128 0xc
 2198 05c6 6C010000 		.4byte	.LVL82
 2199 05ca 16120000 		.4byte	0x1216
 2200 05ce D8050000 		.4byte	0x5d8
 2201 05d2 09       		.uleb128 0x9
 2202 05d3 01       		.uleb128 0x1
 2203 05d4 50       		.byte	0x50
 2204 05d5 01       		.uleb128 0x1
 2205 05d6 31       		.byte	0x31
 2206 05d7 00       		.byte	0
 2207 05d8 0C       		.uleb128 0xc
 2208 05d9 72010000 		.4byte	.LVL83
 2209 05dd 7C110000 		.4byte	0x117c
 2210 05e1 EC050000 		.4byte	0x5ec
 2211 05e5 09       		.uleb128 0x9
 2212 05e6 01       		.uleb128 0x1
 2213 05e7 50       		.byte	0x50
 2214 05e8 02       		.uleb128 0x2
 2215 05e9 08       		.byte	0x8
 2216 05ea 32       		.byte	0x32
 2217 05eb 00       		.byte	0
 2218 05ec 0C       		.uleb128 0xc
 2219 05ed 84010000 		.4byte	.LVL85
 2220 05f1 21120000 		.4byte	0x1221
 2221 05f5 09060000 		.4byte	0x609
 2222 05f9 09       		.uleb128 0x9
 2223 05fa 01       		.uleb128 0x1
 2224 05fb 50       		.byte	0x50
 2225 05fc 02       		.uleb128 0x2
 2226 05fd 75       		.byte	0x75
 2227 05fe 00       		.sleb128 0
 2228 05ff 09       		.uleb128 0x9
 2229 0600 01       		.uleb128 0x1
 2230 0601 51       		.byte	0x51
 2231 0602 05       		.uleb128 0x5
 2232 0603 03       		.byte	0x3
 2233 0604 1C000000 		.4byte	.LC2
 2234 0608 00       		.byte	0
 2235 0609 0C       		.uleb128 0xc
 2236 060a 8A010000 		.4byte	.LVL86
 2237 060e 2C120000 		.4byte	0x122c
 2238 0612 1D060000 		.4byte	0x61d
 2239 0616 09       		.uleb128 0x9
 2240 0617 01       		.uleb128 0x1
 2241 0618 50       		.byte	0x50
 2242 0619 02       		.uleb128 0x2
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 62


 2243 061a 75       		.byte	0x75
 2244 061b 00       		.sleb128 0
 2245 061c 00       		.byte	0
 2246 061d 0C       		.uleb128 0xc
 2247 061e 94010000 		.4byte	.LVL87
 2248 0622 21120000 		.4byte	0x1221
 2249 0626 40060000 		.4byte	0x640
 2250 062a 09       		.uleb128 0x9
 2251 062b 01       		.uleb128 0x1
 2252 062c 50       		.byte	0x50
 2253 062d 02       		.uleb128 0x2
 2254 062e 75       		.byte	0x75
 2255 062f 00       		.sleb128 0
 2256 0630 09       		.uleb128 0x9
 2257 0631 01       		.uleb128 0x1
 2258 0632 51       		.byte	0x51
 2259 0633 05       		.uleb128 0x5
 2260 0634 03       		.byte	0x3
 2261 0635 08000000 		.4byte	.LC1
 2262 0639 09       		.uleb128 0x9
 2263 063a 01       		.uleb128 0x1
 2264 063b 52       		.byte	0x52
 2265 063c 02       		.uleb128 0x2
 2266 063d 74       		.byte	0x74
 2267 063e 00       		.sleb128 0
 2268 063f 00       		.byte	0
 2269 0640 0C       		.uleb128 0xc
 2270 0641 9A010000 		.4byte	.LVL88
 2271 0645 2C120000 		.4byte	0x122c
 2272 0649 54060000 		.4byte	0x654
 2273 064d 09       		.uleb128 0x9
 2274 064e 01       		.uleb128 0x1
 2275 064f 50       		.byte	0x50
 2276 0650 02       		.uleb128 0x2
 2277 0651 75       		.byte	0x75
 2278 0652 00       		.sleb128 0
 2279 0653 00       		.byte	0
 2280 0654 06       		.uleb128 0x6
 2281 0655 AC010000 		.4byte	.LVL89
 2282 0659 F5110000 		.4byte	0x11f5
 2283 065d 06       		.uleb128 0x6
 2284 065e B0010000 		.4byte	.LVL90
 2285 0662 00120000 		.4byte	0x1200
 2286 0666 00       		.byte	0
 2287 0667 0A       		.uleb128 0xa
 2288 0668 B0040000 		.4byte	.LASF29
 2289 066c 01       		.byte	0x1
 2290 066d FB03     		.2byte	0x3fb
 2291 066f 00000000 		.4byte	.LFB70
 2292 0673 B8000000 		.4byte	.LFE70-.LFB70
 2293 0677 01       		.uleb128 0x1
 2294 0678 9C       		.byte	0x9c
 2295 0679 5F080000 		.4byte	0x85f
 2296 067d 0F       		.uleb128 0xf
 2297 067e DB000000 		.4byte	.LASF134
 2298 0682 01       		.byte	0x1
 2299 0683 FB03     		.2byte	0x3fb
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 63


 2300 0685 68000000 		.4byte	0x68
 2301 0689 02010000 		.4byte	.LLST4
 2302 068d 0D       		.uleb128 0xd
 2303 068e 32070000 		.4byte	.LASF30
 2304 0692 01       		.byte	0x1
 2305 0693 0004     		.2byte	0x400
 2306 0695 68000000 		.4byte	0x68
 2307 0699 0D       		.uleb128 0xd
 2308 069a BA040000 		.4byte	.LASF31
 2309 069e 01       		.byte	0x1
 2310 069f 0104     		.2byte	0x401
 2311 06a1 68000000 		.4byte	0x68
 2312 06a5 0B       		.uleb128 0xb
 2313 06a6 BD020000 		.4byte	.LASF27
 2314 06aa 01       		.byte	0x1
 2315 06ab 0204     		.2byte	0x402
 2316 06ad 68000000 		.4byte	0x68
 2317 06b1 44010000 		.4byte	.LLST5
 2318 06b5 0B       		.uleb128 0xb
 2319 06b6 2B000000 		.4byte	.LASF28
 2320 06ba 01       		.byte	0x1
 2321 06bb 0304     		.2byte	0x403
 2322 06bd 68000000 		.4byte	0x68
 2323 06c1 44010000 		.4byte	.LLST5
 2324 06c5 0B       		.uleb128 0xb
 2325 06c6 EB050000 		.4byte	.LASF32
 2326 06ca 01       		.byte	0x1
 2327 06cb 0404     		.2byte	0x404
 2328 06cd 68000000 		.4byte	0x68
 2329 06d1 57010000 		.4byte	.LLST7
 2330 06d5 0B       		.uleb128 0xb
 2331 06d6 A0000000 		.4byte	.LASF33
 2332 06da 01       		.byte	0x1
 2333 06db 0504     		.2byte	0x405
 2334 06dd 68000000 		.4byte	0x68
 2335 06e1 7B010000 		.4byte	.LLST8
 2336 06e5 0B       		.uleb128 0xb
 2337 06e6 A9090000 		.4byte	.LASF34
 2338 06ea 01       		.byte	0x1
 2339 06eb 0604     		.2byte	0x406
 2340 06ed 68000000 		.4byte	0x68
 2341 06f1 A6010000 		.4byte	.LLST9
 2342 06f5 0C       		.uleb128 0xc
 2343 06f6 10000000 		.4byte	.LVL95
 2344 06fa 9D110000 		.4byte	0x119d
 2345 06fe 08070000 		.4byte	0x708
 2346 0702 09       		.uleb128 0x9
 2347 0703 01       		.uleb128 0x1
 2348 0704 50       		.byte	0x50
 2349 0705 01       		.uleb128 0x1
 2350 0706 30       		.byte	0x30
 2351 0707 00       		.byte	0
 2352 0708 0C       		.uleb128 0xc
 2353 0709 16000000 		.4byte	.LVL96
 2354 070d A8110000 		.4byte	0x11a8
 2355 0711 1B070000 		.4byte	0x71b
 2356 0715 09       		.uleb128 0x9
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 64


 2357 0716 01       		.uleb128 0x1
 2358 0717 50       		.byte	0x50
 2359 0718 01       		.uleb128 0x1
 2360 0719 30       		.byte	0x30
 2361 071a 00       		.byte	0
 2362 071b 0C       		.uleb128 0xc
 2363 071c 20000000 		.4byte	.LVL99
 2364 0720 9D110000 		.4byte	0x119d
 2365 0724 2E070000 		.4byte	0x72e
 2366 0728 09       		.uleb128 0x9
 2367 0729 01       		.uleb128 0x1
 2368 072a 50       		.byte	0x50
 2369 072b 01       		.uleb128 0x1
 2370 072c 31       		.byte	0x31
 2371 072d 00       		.byte	0
 2372 072e 0C       		.uleb128 0xc
 2373 072f 26000000 		.4byte	.LVL100
 2374 0733 A8110000 		.4byte	0x11a8
 2375 0737 41070000 		.4byte	0x741
 2376 073b 09       		.uleb128 0x9
 2377 073c 01       		.uleb128 0x1
 2378 073d 50       		.byte	0x50
 2379 073e 01       		.uleb128 0x1
 2380 073f 31       		.byte	0x31
 2381 0740 00       		.byte	0
 2382 0741 06       		.uleb128 0x6
 2383 0742 2C000000 		.4byte	.LVL102
 2384 0746 B3110000 		.4byte	0x11b3
 2385 074a 0C       		.uleb128 0xc
 2386 074b 34000000 		.4byte	.LVL104
 2387 074f BE110000 		.4byte	0x11be
 2388 0753 5E070000 		.4byte	0x75e
 2389 0757 09       		.uleb128 0x9
 2390 0758 01       		.uleb128 0x1
 2391 0759 50       		.byte	0x50
 2392 075a 02       		.uleb128 0x2
 2393 075b 74       		.byte	0x74
 2394 075c 00       		.sleb128 0
 2395 075d 00       		.byte	0
 2396 075e 06       		.uleb128 0x6
 2397 075f 38000000 		.4byte	.LVL105
 2398 0763 C9110000 		.4byte	0x11c9
 2399 0767 0C       		.uleb128 0xc
 2400 0768 3E000000 		.4byte	.LVL106
 2401 076c D4110000 		.4byte	0x11d4
 2402 0770 7B070000 		.4byte	0x77b
 2403 0774 09       		.uleb128 0x9
 2404 0775 01       		.uleb128 0x1
 2405 0776 50       		.byte	0x50
 2406 0777 02       		.uleb128 0x2
 2407 0778 74       		.byte	0x74
 2408 0779 00       		.sleb128 0
 2409 077a 00       		.byte	0
 2410 077b 06       		.uleb128 0x6
 2411 077c 42000000 		.4byte	.LVL107
 2412 0780 37120000 		.4byte	0x1237
 2413 0784 06       		.uleb128 0x6
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 65


 2414 0785 46000000 		.4byte	.LVL108
 2415 0789 42120000 		.4byte	0x1242
 2416 078d 0C       		.uleb128 0xc
 2417 078e 4C000000 		.4byte	.LVL109
 2418 0792 16120000 		.4byte	0x1216
 2419 0796 A1070000 		.4byte	0x7a1
 2420 079a 09       		.uleb128 0x9
 2421 079b 01       		.uleb128 0x1
 2422 079c 50       		.byte	0x50
 2423 079d 02       		.uleb128 0x2
 2424 079e 76       		.byte	0x76
 2425 079f 00       		.sleb128 0
 2426 07a0 00       		.byte	0
 2427 07a1 0C       		.uleb128 0xc
 2428 07a2 52000000 		.4byte	.LVL110
 2429 07a6 7C110000 		.4byte	0x117c
 2430 07aa B5070000 		.4byte	0x7b5
 2431 07ae 09       		.uleb128 0x9
 2432 07af 01       		.uleb128 0x1
 2433 07b0 50       		.byte	0x50
 2434 07b1 02       		.uleb128 0x2
 2435 07b2 08       		.byte	0x8
 2436 07b3 32       		.byte	0x32
 2437 07b4 00       		.byte	0
 2438 07b5 06       		.uleb128 0x6
 2439 07b6 5E000000 		.4byte	.LVL112
 2440 07ba 37120000 		.4byte	0x1237
 2441 07be 06       		.uleb128 0x6
 2442 07bf 62000000 		.4byte	.LVL113
 2443 07c3 42120000 		.4byte	0x1242
 2444 07c7 0C       		.uleb128 0xc
 2445 07c8 68000000 		.4byte	.LVL114
 2446 07cc 16120000 		.4byte	0x1216
 2447 07d0 DB070000 		.4byte	0x7db
 2448 07d4 09       		.uleb128 0x9
 2449 07d5 01       		.uleb128 0x1
 2450 07d6 50       		.byte	0x50
 2451 07d7 02       		.uleb128 0x2
 2452 07d8 76       		.byte	0x76
 2453 07d9 00       		.sleb128 0
 2454 07da 00       		.byte	0
 2455 07db 0C       		.uleb128 0xc
 2456 07dc 6E000000 		.4byte	.LVL115
 2457 07e0 7C110000 		.4byte	0x117c
 2458 07e4 EF070000 		.4byte	0x7ef
 2459 07e8 09       		.uleb128 0x9
 2460 07e9 01       		.uleb128 0x1
 2461 07ea 50       		.byte	0x50
 2462 07eb 02       		.uleb128 0x2
 2463 07ec 08       		.byte	0x8
 2464 07ed 32       		.byte	0x32
 2465 07ee 00       		.byte	0
 2466 07ef 0C       		.uleb128 0xc
 2467 07f0 80000000 		.4byte	.LVL117
 2468 07f4 21120000 		.4byte	0x1221
 2469 07f8 12080000 		.4byte	0x812
 2470 07fc 09       		.uleb128 0x9
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 66


 2471 07fd 01       		.uleb128 0x1
 2472 07fe 50       		.byte	0x50
 2473 07ff 02       		.uleb128 0x2
 2474 0800 75       		.byte	0x75
 2475 0801 00       		.sleb128 0
 2476 0802 09       		.uleb128 0x9
 2477 0803 01       		.uleb128 0x1
 2478 0804 51       		.byte	0x51
 2479 0805 05       		.uleb128 0x5
 2480 0806 03       		.byte	0x3
 2481 0807 00000000 		.4byte	.LC0
 2482 080b 09       		.uleb128 0x9
 2483 080c 01       		.uleb128 0x1
 2484 080d 52       		.byte	0x52
 2485 080e 02       		.uleb128 0x2
 2486 080f 74       		.byte	0x74
 2487 0810 00       		.sleb128 0
 2488 0811 00       		.byte	0
 2489 0812 0C       		.uleb128 0xc
 2490 0813 86000000 		.4byte	.LVL118
 2491 0817 2C120000 		.4byte	0x122c
 2492 081b 26080000 		.4byte	0x826
 2493 081f 09       		.uleb128 0x9
 2494 0820 01       		.uleb128 0x1
 2495 0821 50       		.byte	0x50
 2496 0822 02       		.uleb128 0x2
 2497 0823 75       		.byte	0x75
 2498 0824 00       		.sleb128 0
 2499 0825 00       		.byte	0
 2500 0826 0C       		.uleb128 0xc
 2501 0827 98000000 		.4byte	.LVL119
 2502 082b DF110000 		.4byte	0x11df
 2503 082f 39080000 		.4byte	0x839
 2504 0833 09       		.uleb128 0x9
 2505 0834 01       		.uleb128 0x1
 2506 0835 50       		.byte	0x50
 2507 0836 01       		.uleb128 0x1
 2508 0837 30       		.byte	0x30
 2509 0838 00       		.byte	0
 2510 0839 0C       		.uleb128 0xc
 2511 083a 9E000000 		.4byte	.LVL120
 2512 083e EA110000 		.4byte	0x11ea
 2513 0842 4C080000 		.4byte	0x84c
 2514 0846 09       		.uleb128 0x9
 2515 0847 01       		.uleb128 0x1
 2516 0848 50       		.byte	0x50
 2517 0849 01       		.uleb128 0x1
 2518 084a 30       		.byte	0x30
 2519 084b 00       		.byte	0
 2520 084c 06       		.uleb128 0x6
 2521 084d A2000000 		.4byte	.LVL121
 2522 0851 F5110000 		.4byte	0x11f5
 2523 0855 06       		.uleb128 0x6
 2524 0856 A6000000 		.4byte	.LVL122
 2525 085a 00120000 		.4byte	0x1200
 2526 085e 00       		.byte	0
 2527 085f 10       		.uleb128 0x10
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 67


 2528 0860 63090000 		.4byte	.LASF135
 2529 0864 01       		.byte	0x1
 2530 0865 8F       		.byte	0x8f
 2531 0866 68000000 		.4byte	0x68
 2532 086a 00000000 		.4byte	.LFB66
 2533 086e A8020000 		.4byte	.LFE66-.LFB66
 2534 0872 01       		.uleb128 0x1
 2535 0873 9C       		.byte	0x9c
 2536 0874 2B0E0000 		.4byte	0xe2b
 2537 0878 11       		.uleb128 0x11
 2538 0879 68090000 		.4byte	.LASF35
 2539 087d 01       		.byte	0x1
 2540 087e 9B       		.byte	0x9b
 2541 087f 68000000 		.4byte	0x68
 2542 0883 00       		.byte	0
 2543 0884 11       		.uleb128 0x11
 2544 0885 22080000 		.4byte	.LASF36
 2545 0889 01       		.byte	0x1
 2546 088a 9C       		.byte	0x9c
 2547 088b 68000000 		.4byte	0x68
 2548 088f 00       		.byte	0
 2549 0890 11       		.uleb128 0x11
 2550 0891 29020000 		.4byte	.LASF37
 2551 0895 01       		.byte	0x1
 2552 0896 9D       		.byte	0x9d
 2553 0897 68000000 		.4byte	0x68
 2554 089b 00       		.byte	0
 2555 089c 11       		.uleb128 0x11
 2556 089d 3F040000 		.4byte	.LASF38
 2557 08a1 01       		.byte	0x1
 2558 08a2 9E       		.byte	0x9e
 2559 08a3 68000000 		.4byte	0x68
 2560 08a7 00       		.byte	0
 2561 08a8 12       		.uleb128 0x12
 2562 08a9 B6000000 		.4byte	.LBB2
 2563 08ad 2A000000 		.4byte	.LBE2-.LBB2
 2564 08b1 18090000 		.4byte	0x918
 2565 08b5 13       		.uleb128 0x13
 2566 08b6 6900     		.ascii	"i\000"
 2567 08b8 01       		.byte	0x1
 2568 08b9 C7       		.byte	0xc7
 2569 08ba 68000000 		.4byte	0x68
 2570 08be B9010000 		.4byte	.LLST10
 2571 08c2 0C       		.uleb128 0xc
 2572 08c3 BE000000 		.4byte	.LVL156
 2573 08c7 16120000 		.4byte	0x1216
 2574 08cb D6080000 		.4byte	0x8d6
 2575 08cf 09       		.uleb128 0x9
 2576 08d0 01       		.uleb128 0x1
 2577 08d1 50       		.byte	0x50
 2578 08d2 02       		.uleb128 0x2
 2579 08d3 74       		.byte	0x74
 2580 08d4 00       		.sleb128 0
 2581 08d5 00       		.byte	0
 2582 08d6 0C       		.uleb128 0xc
 2583 08d7 C4000000 		.4byte	.LVL157
 2584 08db 7C110000 		.4byte	0x117c
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 68


 2585 08df EA080000 		.4byte	0x8ea
 2586 08e3 09       		.uleb128 0x9
 2587 08e4 01       		.uleb128 0x1
 2588 08e5 50       		.byte	0x50
 2589 08e6 02       		.uleb128 0x2
 2590 08e7 08       		.byte	0x8
 2591 08e8 64       		.byte	0x64
 2592 08e9 00       		.byte	0
 2593 08ea 0C       		.uleb128 0xc
 2594 08eb D4000000 		.4byte	.LVL158
 2595 08ef 21120000 		.4byte	0x1221
 2596 08f3 07090000 		.4byte	0x907
 2597 08f7 09       		.uleb128 0x9
 2598 08f8 01       		.uleb128 0x1
 2599 08f9 50       		.byte	0x50
 2600 08fa 02       		.uleb128 0x2
 2601 08fb 75       		.byte	0x75
 2602 08fc 00       		.sleb128 0
 2603 08fd 09       		.uleb128 0x9
 2604 08fe 01       		.uleb128 0x1
 2605 08ff 51       		.byte	0x51
 2606 0900 05       		.uleb128 0x5
 2607 0901 03       		.byte	0x3
 2608 0902 00000000 		.4byte	.LC0
 2609 0906 00       		.byte	0
 2610 0907 08       		.uleb128 0x8
 2611 0908 DA000000 		.4byte	.LVL159
 2612 090c 2C120000 		.4byte	0x122c
 2613 0910 09       		.uleb128 0x9
 2614 0911 01       		.uleb128 0x1
 2615 0912 50       		.byte	0x50
 2616 0913 02       		.uleb128 0x2
 2617 0914 75       		.byte	0x75
 2618 0915 00       		.sleb128 0
 2619 0916 00       		.byte	0
 2620 0917 00       		.byte	0
 2621 0918 12       		.uleb128 0x12
 2622 0919 E6000000 		.4byte	.LBB3
 2623 091d 2C000000 		.4byte	.LBE3-.LBB3
 2624 0921 88090000 		.4byte	0x988
 2625 0925 13       		.uleb128 0x13
 2626 0926 6900     		.ascii	"i\000"
 2627 0928 01       		.byte	0x1
 2628 0929 D0       		.byte	0xd0
 2629 092a 68000000 		.4byte	0x68
 2630 092e D8010000 		.4byte	.LLST11
 2631 0932 0C       		.uleb128 0xc
 2632 0933 F0000000 		.4byte	.LVL164
 2633 0937 16120000 		.4byte	0x1216
 2634 093b 46090000 		.4byte	0x946
 2635 093f 09       		.uleb128 0x9
 2636 0940 01       		.uleb128 0x1
 2637 0941 50       		.byte	0x50
 2638 0942 02       		.uleb128 0x2
 2639 0943 74       		.byte	0x74
 2640 0944 00       		.sleb128 0
 2641 0945 00       		.byte	0
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 69


 2642 0946 0C       		.uleb128 0xc
 2643 0947 F6000000 		.4byte	.LVL165
 2644 094b 7C110000 		.4byte	0x117c
 2645 094f 5A090000 		.4byte	0x95a
 2646 0953 09       		.uleb128 0x9
 2647 0954 01       		.uleb128 0x1
 2648 0955 50       		.byte	0x50
 2649 0956 02       		.uleb128 0x2
 2650 0957 08       		.byte	0x8
 2651 0958 64       		.byte	0x64
 2652 0959 00       		.byte	0
 2653 095a 0C       		.uleb128 0xc
 2654 095b 06010000 		.4byte	.LVL166
 2655 095f 21120000 		.4byte	0x1221
 2656 0963 77090000 		.4byte	0x977
 2657 0967 09       		.uleb128 0x9
 2658 0968 01       		.uleb128 0x1
 2659 0969 50       		.byte	0x50
 2660 096a 02       		.uleb128 0x2
 2661 096b 75       		.byte	0x75
 2662 096c 00       		.sleb128 0
 2663 096d 09       		.uleb128 0x9
 2664 096e 01       		.uleb128 0x1
 2665 096f 51       		.byte	0x51
 2666 0970 05       		.uleb128 0x5
 2667 0971 03       		.byte	0x3
 2668 0972 00000000 		.4byte	.LC0
 2669 0976 00       		.byte	0
 2670 0977 08       		.uleb128 0x8
 2671 0978 0C010000 		.4byte	.LVL167
 2672 097c 2C120000 		.4byte	0x122c
 2673 0980 09       		.uleb128 0x9
 2674 0981 01       		.uleb128 0x1
 2675 0982 50       		.byte	0x50
 2676 0983 02       		.uleb128 0x2
 2677 0984 75       		.byte	0x75
 2678 0985 00       		.sleb128 0
 2679 0986 00       		.byte	0
 2680 0987 00       		.byte	0
 2681 0988 12       		.uleb128 0x12
 2682 0989 3A010000 		.4byte	.LBB4
 2683 098d A2000000 		.4byte	.LBE4-.LBB4
 2684 0991 B60A0000 		.4byte	0xab6
 2685 0995 0B       		.uleb128 0xb
 2686 0996 D8010000 		.4byte	.LASF39
 2687 099a 01       		.byte	0x1
 2688 099b DE01     		.2byte	0x1de
 2689 099d 68000000 		.4byte	0x68
 2690 09a1 F7010000 		.4byte	.LLST12
 2691 09a5 12       		.uleb128 0x12
 2692 09a6 4A010000 		.4byte	.LBB5
 2693 09aa 34000000 		.4byte	.LBE5-.LBB5
 2694 09ae 060A0000 		.4byte	0xa06
 2695 09b2 14       		.uleb128 0x14
 2696 09b3 6900     		.ascii	"i\000"
 2697 09b5 01       		.byte	0x1
 2698 09b6 C401     		.2byte	0x1c4
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 70


 2699 09b8 68000000 		.4byte	0x68
 2700 09bc 16020000 		.4byte	.LLST13
 2701 09c0 06       		.uleb128 0x6
 2702 09c1 5A010000 		.4byte	.LVL179
 2703 09c5 67060000 		.4byte	0x667
 2704 09c9 0C       		.uleb128 0xc
 2705 09ca 62010000 		.4byte	.LVL180
 2706 09ce 7C110000 		.4byte	0x117c
 2707 09d2 DE090000 		.4byte	0x9de
 2708 09d6 09       		.uleb128 0x9
 2709 09d7 01       		.uleb128 0x1
 2710 09d8 50       		.byte	0x50
 2711 09d9 03       		.uleb128 0x3
 2712 09da 0A       		.byte	0xa
 2713 09db F401     		.2byte	0x1f4
 2714 09dd 00       		.byte	0
 2715 09de 06       		.uleb128 0x6
 2716 09df 66010000 		.4byte	.LVL181
 2717 09e3 92110000 		.4byte	0x1192
 2718 09e7 0C       		.uleb128 0xc
 2719 09e8 74010000 		.4byte	.LVL182
 2720 09ec 7C110000 		.4byte	0x117c
 2721 09f0 FC090000 		.4byte	0x9fc
 2722 09f4 09       		.uleb128 0x9
 2723 09f5 01       		.uleb128 0x1
 2724 09f6 50       		.byte	0x50
 2725 09f7 03       		.uleb128 0x3
 2726 09f8 0A       		.byte	0xa
 2727 09f9 F401     		.2byte	0x1f4
 2728 09fb 00       		.byte	0
 2729 09fc 06       		.uleb128 0x6
 2730 09fd 78010000 		.4byte	.LVL183
 2731 0a01 32020000 		.4byte	0x232
 2732 0a05 00       		.byte	0
 2733 0a06 12       		.uleb128 0x12
 2734 0a07 84010000 		.4byte	.LBB6
 2735 0a0b 22000000 		.4byte	.LBE6-.LBB6
 2736 0a0f 4F0A0000 		.4byte	0xa4f
 2737 0a13 14       		.uleb128 0x14
 2738 0a14 6900     		.ascii	"i\000"
 2739 0a16 01       		.byte	0x1
 2740 0a17 D101     		.2byte	0x1d1
 2741 0a19 68000000 		.4byte	0x68
 2742 0a1d 35020000 		.4byte	.LLST14
 2743 0a21 0C       		.uleb128 0xc
 2744 0a22 9A010000 		.4byte	.LVL188
 2745 0a26 21120000 		.4byte	0x1221
 2746 0a2a 3E0A0000 		.4byte	0xa3e
 2747 0a2e 09       		.uleb128 0x9
 2748 0a2f 01       		.uleb128 0x1
 2749 0a30 50       		.byte	0x50
 2750 0a31 02       		.uleb128 0x2
 2751 0a32 75       		.byte	0x75
 2752 0a33 00       		.sleb128 0
 2753 0a34 09       		.uleb128 0x9
 2754 0a35 01       		.uleb128 0x1
 2755 0a36 51       		.byte	0x51
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 71


 2756 0a37 05       		.uleb128 0x5
 2757 0a38 03       		.byte	0x3
 2758 0a39 70000000 		.4byte	.LC8
 2759 0a3d 00       		.byte	0
 2760 0a3e 08       		.uleb128 0x8
 2761 0a3f A0010000 		.4byte	.LVL189
 2762 0a43 2C120000 		.4byte	0x122c
 2763 0a47 09       		.uleb128 0x9
 2764 0a48 01       		.uleb128 0x1
 2765 0a49 50       		.byte	0x50
 2766 0a4a 02       		.uleb128 0x2
 2767 0a4b 75       		.byte	0x75
 2768 0a4c 00       		.sleb128 0
 2769 0a4d 00       		.byte	0
 2770 0a4e 00       		.byte	0
 2771 0a4f 15       		.uleb128 0x15
 2772 0a50 00000000 		.4byte	.Ldebug_ranges0+0
 2773 0a54 690A0000 		.4byte	0xa69
 2774 0a58 0B       		.uleb128 0xb
 2775 0a59 72010000 		.4byte	.LASF40
 2776 0a5d 01       		.byte	0x1
 2777 0a5e E101     		.2byte	0x1e1
 2778 0a60 68000000 		.4byte	0x68
 2779 0a64 54020000 		.4byte	.LLST15
 2780 0a68 00       		.byte	0
 2781 0a69 06       		.uleb128 0x6
 2782 0a6a 3E010000 		.4byte	.LVL175
 2783 0a6e 32020000 		.4byte	0x232
 2784 0a72 0C       		.uleb128 0xc
 2785 0a73 46010000 		.4byte	.LVL176
 2786 0a77 67060000 		.4byte	0x667
 2787 0a7b 860A0000 		.4byte	0xa86
 2788 0a7f 09       		.uleb128 0x9
 2789 0a80 01       		.uleb128 0x1
 2790 0a81 50       		.byte	0x50
 2791 0a82 02       		.uleb128 0x2
 2792 0a83 09       		.byte	0x9
 2793 0a84 9C       		.byte	0x9c
 2794 0a85 00       		.byte	0
 2795 0a86 06       		.uleb128 0x6
 2796 0a87 4A010000 		.4byte	.LVL177
 2797 0a8b 4D120000 		.4byte	0x124d
 2798 0a8f 0C       		.uleb128 0xc
 2799 0a90 84010000 		.4byte	.LVL185
 2800 0a94 2C120000 		.4byte	0x122c
 2801 0a98 A60A0000 		.4byte	0xaa6
 2802 0a9c 09       		.uleb128 0x9
 2803 0a9d 01       		.uleb128 0x1
 2804 0a9e 50       		.byte	0x50
 2805 0a9f 05       		.uleb128 0x5
 2806 0aa0 03       		.byte	0x3
 2807 0aa1 5C000000 		.4byte	.LC7
 2808 0aa5 00       		.byte	0
 2809 0aa6 08       		.uleb128 0x8
 2810 0aa7 AC010000 		.4byte	.LVL191
 2811 0aab 58120000 		.4byte	0x1258
 2812 0aaf 09       		.uleb128 0x9
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 72


 2813 0ab0 01       		.uleb128 0x1
 2814 0ab1 50       		.byte	0x50
 2815 0ab2 01       		.uleb128 0x1
 2816 0ab3 31       		.byte	0x31
 2817 0ab4 00       		.byte	0
 2818 0ab5 00       		.byte	0
 2819 0ab6 12       		.uleb128 0x12
 2820 0ab7 1C020000 		.4byte	.LBB9
 2821 0abb 8C000000 		.4byte	.LBE9-.LBB9
 2822 0abf 830B0000 		.4byte	0xb83
 2823 0ac3 0B       		.uleb128 0xb
 2824 0ac4 7B090000 		.4byte	.LASF18
 2825 0ac8 01       		.byte	0x1
 2826 0ac9 7D02     		.2byte	0x27d
 2827 0acb 68000000 		.4byte	0x68
 2828 0acf 73020000 		.4byte	.LLST16
 2829 0ad3 0B       		.uleb128 0xb
 2830 0ad4 B4010000 		.4byte	.LASF19
 2831 0ad8 01       		.byte	0x1
 2832 0ad9 7E02     		.2byte	0x27e
 2833 0adb 68000000 		.4byte	0x68
 2834 0adf 92020000 		.4byte	.LLST17
 2835 0ae3 0C       		.uleb128 0xc
 2836 0ae4 32020000 		.4byte	.LVL207
 2837 0ae8 0B120000 		.4byte	0x120b
 2838 0aec F70A0000 		.4byte	0xaf7
 2839 0af0 09       		.uleb128 0x9
 2840 0af1 01       		.uleb128 0x1
 2841 0af2 50       		.byte	0x50
 2842 0af3 02       		.uleb128 0x2
 2843 0af4 08       		.byte	0x8
 2844 0af5 32       		.byte	0x32
 2845 0af6 00       		.byte	0
 2846 0af7 0C       		.uleb128 0xc
 2847 0af8 38020000 		.4byte	.LVL208
 2848 0afc 87110000 		.4byte	0x1187
 2849 0b00 0A0B0000 		.4byte	0xb0a
 2850 0b04 09       		.uleb128 0x9
 2851 0b05 01       		.uleb128 0x1
 2852 0b06 50       		.byte	0x50
 2853 0b07 01       		.uleb128 0x1
 2854 0b08 31       		.byte	0x31
 2855 0b09 00       		.byte	0
 2856 0b0a 06       		.uleb128 0x6
 2857 0b0b 3C020000 		.4byte	.LVL209
 2858 0b0f 92110000 		.4byte	0x1192
 2859 0b13 0C       		.uleb128 0xc
 2860 0b14 44020000 		.4byte	.LVL212
 2861 0b18 87110000 		.4byte	0x1187
 2862 0b1c 260B0000 		.4byte	0xb26
 2863 0b20 09       		.uleb128 0x9
 2864 0b21 01       		.uleb128 0x1
 2865 0b22 50       		.byte	0x50
 2866 0b23 01       		.uleb128 0x1
 2867 0b24 33       		.byte	0x33
 2868 0b25 00       		.byte	0
 2869 0b26 0C       		.uleb128 0xc
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 73


 2870 0b27 4C020000 		.4byte	.LVL213
 2871 0b2b 0B120000 		.4byte	0x120b
 2872 0b2f 3A0B0000 		.4byte	0xb3a
 2873 0b33 09       		.uleb128 0x9
 2874 0b34 01       		.uleb128 0x1
 2875 0b35 50       		.byte	0x50
 2876 0b36 02       		.uleb128 0x2
 2877 0b37 09       		.byte	0x9
 2878 0b38 CE       		.byte	0xce
 2879 0b39 00       		.byte	0
 2880 0b3a 0C       		.uleb128 0xc
 2881 0b3b 60020000 		.4byte	.LVL215
 2882 0b3f 87110000 		.4byte	0x1187
 2883 0b43 4D0B0000 		.4byte	0xb4d
 2884 0b47 09       		.uleb128 0x9
 2885 0b48 01       		.uleb128 0x1
 2886 0b49 50       		.byte	0x50
 2887 0b4a 01       		.uleb128 0x1
 2888 0b4b 30       		.byte	0x30
 2889 0b4c 00       		.byte	0
 2890 0b4d 06       		.uleb128 0x6
 2891 0b4e 64020000 		.4byte	.LVL216
 2892 0b52 5E010000 		.4byte	0x15e
 2893 0b56 06       		.uleb128 0x6
 2894 0b57 68020000 		.4byte	.LVL217
 2895 0b5b 63120000 		.4byte	0x1263
 2896 0b5f 0C       		.uleb128 0xc
 2897 0b60 6E020000 		.4byte	.LVL218
 2898 0b64 87110000 		.4byte	0x1187
 2899 0b68 720B0000 		.4byte	0xb72
 2900 0b6c 09       		.uleb128 0x9
 2901 0b6d 01       		.uleb128 0x1
 2902 0b6e 50       		.byte	0x50
 2903 0b6f 01       		.uleb128 0x1
 2904 0b70 33       		.byte	0x33
 2905 0b71 00       		.byte	0
 2906 0b72 08       		.uleb128 0x8
 2907 0b73 76020000 		.4byte	.LVL219
 2908 0b77 0B120000 		.4byte	0x120b
 2909 0b7b 09       		.uleb128 0x9
 2910 0b7c 01       		.uleb128 0x1
 2911 0b7d 50       		.byte	0x50
 2912 0b7e 02       		.uleb128 0x2
 2913 0b7f 09       		.byte	0x9
 2914 0b80 C4       		.byte	0xc4
 2915 0b81 00       		.byte	0
 2916 0b82 00       		.byte	0
 2917 0b83 06       		.uleb128 0x6
 2918 0b84 08000000 		.4byte	.LVL124
 2919 0b88 6E120000 		.4byte	0x126e
 2920 0b8c 06       		.uleb128 0x6
 2921 0b8d 0C000000 		.4byte	.LVL125
 2922 0b91 79120000 		.4byte	0x1279
 2923 0b95 0C       		.uleb128 0xc
 2924 0b96 12000000 		.4byte	.LVL126
 2925 0b9a 2C120000 		.4byte	0x122c
 2926 0b9e AC0B0000 		.4byte	0xbac
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 74


 2927 0ba2 09       		.uleb128 0x9
 2928 0ba3 01       		.uleb128 0x1
 2929 0ba4 50       		.byte	0x50
 2930 0ba5 05       		.uleb128 0x5
 2931 0ba6 03       		.byte	0x3
 2932 0ba7 40000000 		.4byte	.LC5
 2933 0bab 00       		.byte	0
 2934 0bac 06       		.uleb128 0x6
 2935 0bad 16000000 		.4byte	.LVL127
 2936 0bb1 84120000 		.4byte	0x1284
 2937 0bb5 06       		.uleb128 0x6
 2938 0bb6 1A000000 		.4byte	.LVL128
 2939 0bba 8F120000 		.4byte	0x128f
 2940 0bbe 0C       		.uleb128 0xc
 2941 0bbf 20000000 		.4byte	.LVL129
 2942 0bc3 9A120000 		.4byte	0x129a
 2943 0bc7 D10B0000 		.4byte	0xbd1
 2944 0bcb 09       		.uleb128 0x9
 2945 0bcc 01       		.uleb128 0x1
 2946 0bcd 50       		.byte	0x50
 2947 0bce 01       		.uleb128 0x1
 2948 0bcf 30       		.byte	0x30
 2949 0bd0 00       		.byte	0
 2950 0bd1 06       		.uleb128 0x6
 2951 0bd2 28000000 		.4byte	.LVL130
 2952 0bd6 A5120000 		.4byte	0x12a5
 2953 0bda 0C       		.uleb128 0xc
 2954 0bdb 32000000 		.4byte	.LVL131
 2955 0bdf 58120000 		.4byte	0x1258
 2956 0be3 EE0B0000 		.4byte	0xbee
 2957 0be7 09       		.uleb128 0x9
 2958 0be8 01       		.uleb128 0x1
 2959 0be9 50       		.byte	0x50
 2960 0bea 02       		.uleb128 0x2
 2961 0beb 74       		.byte	0x74
 2962 0bec 00       		.sleb128 0
 2963 0bed 00       		.byte	0
 2964 0bee 0C       		.uleb128 0xc
 2965 0bef 38000000 		.4byte	.LVL132
 2966 0bf3 B0120000 		.4byte	0x12b0
 2967 0bf7 010C0000 		.4byte	0xc01
 2968 0bfb 09       		.uleb128 0x9
 2969 0bfc 01       		.uleb128 0x1
 2970 0bfd 50       		.byte	0x50
 2971 0bfe 01       		.uleb128 0x1
 2972 0bff 31       		.byte	0x31
 2973 0c00 00       		.byte	0
 2974 0c01 0C       		.uleb128 0xc
 2975 0c02 40000000 		.4byte	.LVL133
 2976 0c06 7C110000 		.4byte	0x117c
 2977 0c0a 160C0000 		.4byte	0xc16
 2978 0c0e 09       		.uleb128 0x9
 2979 0c0f 01       		.uleb128 0x1
 2980 0c10 50       		.byte	0x50
 2981 0c11 03       		.uleb128 0x3
 2982 0c12 0A       		.byte	0xa
 2983 0c13 F401     		.2byte	0x1f4
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 75


 2984 0c15 00       		.byte	0
 2985 0c16 0C       		.uleb128 0xc
 2986 0c17 46000000 		.4byte	.LVL134
 2987 0c1b B0120000 		.4byte	0x12b0
 2988 0c1f 290C0000 		.4byte	0xc29
 2989 0c23 09       		.uleb128 0x9
 2990 0c24 01       		.uleb128 0x1
 2991 0c25 50       		.byte	0x50
 2992 0c26 01       		.uleb128 0x1
 2993 0c27 32       		.byte	0x32
 2994 0c28 00       		.byte	0
 2995 0c29 0C       		.uleb128 0xc
 2996 0c2a 4E000000 		.4byte	.LVL135
 2997 0c2e 7C110000 		.4byte	0x117c
 2998 0c32 3E0C0000 		.4byte	0xc3e
 2999 0c36 09       		.uleb128 0x9
 3000 0c37 01       		.uleb128 0x1
 3001 0c38 50       		.byte	0x50
 3002 0c39 03       		.uleb128 0x3
 3003 0c3a 0A       		.byte	0xa
 3004 0c3b F401     		.2byte	0x1f4
 3005 0c3d 00       		.byte	0
 3006 0c3e 0C       		.uleb128 0xc
 3007 0c3f 54000000 		.4byte	.LVL136
 3008 0c43 B0120000 		.4byte	0x12b0
 3009 0c47 510C0000 		.4byte	0xc51
 3010 0c4b 09       		.uleb128 0x9
 3011 0c4c 01       		.uleb128 0x1
 3012 0c4d 50       		.byte	0x50
 3013 0c4e 01       		.uleb128 0x1
 3014 0c4f 33       		.byte	0x33
 3015 0c50 00       		.byte	0
 3016 0c51 0C       		.uleb128 0xc
 3017 0c52 5C000000 		.4byte	.LVL137
 3018 0c56 7C110000 		.4byte	0x117c
 3019 0c5a 660C0000 		.4byte	0xc66
 3020 0c5e 09       		.uleb128 0x9
 3021 0c5f 01       		.uleb128 0x1
 3022 0c60 50       		.byte	0x50
 3023 0c61 03       		.uleb128 0x3
 3024 0c62 0A       		.byte	0xa
 3025 0c63 F401     		.2byte	0x1f4
 3026 0c65 00       		.byte	0
 3027 0c66 0C       		.uleb128 0xc
 3028 0c67 62000000 		.4byte	.LVL138
 3029 0c6b B0120000 		.4byte	0x12b0
 3030 0c6f 7A0C0000 		.4byte	0xc7a
 3031 0c73 09       		.uleb128 0x9
 3032 0c74 01       		.uleb128 0x1
 3033 0c75 50       		.byte	0x50
 3034 0c76 02       		.uleb128 0x2
 3035 0c77 74       		.byte	0x74
 3036 0c78 00       		.sleb128 0
 3037 0c79 00       		.byte	0
 3038 0c7a 0C       		.uleb128 0xc
 3039 0c7b 6A000000 		.4byte	.LVL139
 3040 0c7f 7C110000 		.4byte	0x117c
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 76


 3041 0c83 8F0C0000 		.4byte	0xc8f
 3042 0c87 09       		.uleb128 0x9
 3043 0c88 01       		.uleb128 0x1
 3044 0c89 50       		.byte	0x50
 3045 0c8a 03       		.uleb128 0x3
 3046 0c8b 0A       		.byte	0xa
 3047 0c8c F401     		.2byte	0x1f4
 3048 0c8e 00       		.byte	0
 3049 0c8f 06       		.uleb128 0x6
 3050 0c90 6E000000 		.4byte	.LVL140
 3051 0c94 4D120000 		.4byte	0x124d
 3052 0c98 06       		.uleb128 0x6
 3053 0c99 72000000 		.4byte	.LVL141
 3054 0c9d BB120000 		.4byte	0x12bb
 3055 0ca1 0C       		.uleb128 0xc
 3056 0ca2 7A000000 		.4byte	.LVL142
 3057 0ca6 C6120000 		.4byte	0x12c6
 3058 0caa B60C0000 		.4byte	0xcb6
 3059 0cae 09       		.uleb128 0x9
 3060 0caf 01       		.uleb128 0x1
 3061 0cb0 50       		.byte	0x50
 3062 0cb1 03       		.uleb128 0x3
 3063 0cb2 0A       		.byte	0xa
 3064 0cb3 E803     		.2byte	0x3e8
 3065 0cb5 00       		.byte	0
 3066 0cb6 0C       		.uleb128 0xc
 3067 0cb7 82000000 		.4byte	.LVL143
 3068 0cbb 7C110000 		.4byte	0x117c
 3069 0cbf CB0C0000 		.4byte	0xccb
 3070 0cc3 09       		.uleb128 0x9
 3071 0cc4 01       		.uleb128 0x1
 3072 0cc5 50       		.byte	0x50
 3073 0cc6 03       		.uleb128 0x3
 3074 0cc7 0A       		.byte	0xa
 3075 0cc8 F401     		.2byte	0x1f4
 3076 0cca 00       		.byte	0
 3077 0ccb 06       		.uleb128 0x6
 3078 0ccc 86000000 		.4byte	.LVL144
 3079 0cd0 D1120000 		.4byte	0x12d1
 3080 0cd4 06       		.uleb128 0x6
 3081 0cd5 8A000000 		.4byte	.LVL145
 3082 0cd9 DC120000 		.4byte	0x12dc
 3083 0cdd 0C       		.uleb128 0xc
 3084 0cde 92000000 		.4byte	.LVL146
 3085 0ce2 E7120000 		.4byte	0x12e7
 3086 0ce6 F20C0000 		.4byte	0xcf2
 3087 0cea 09       		.uleb128 0x9
 3088 0ceb 01       		.uleb128 0x1
 3089 0cec 50       		.byte	0x50
 3090 0ced 03       		.uleb128 0x3
 3091 0cee 0A       		.byte	0xa
 3092 0cef 6004     		.2byte	0x460
 3093 0cf1 00       		.byte	0
 3094 0cf2 0C       		.uleb128 0xc
 3095 0cf3 9A000000 		.4byte	.LVL147
 3096 0cf7 7C110000 		.4byte	0x117c
 3097 0cfb 070D0000 		.4byte	0xd07
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 77


 3098 0cff 09       		.uleb128 0x9
 3099 0d00 01       		.uleb128 0x1
 3100 0d01 50       		.byte	0x50
 3101 0d02 03       		.uleb128 0x3
 3102 0d03 0A       		.byte	0xa
 3103 0d04 F401     		.2byte	0x1f4
 3104 0d06 00       		.byte	0
 3105 0d07 06       		.uleb128 0x6
 3106 0d08 9E000000 		.4byte	.LVL148
 3107 0d0c F2120000 		.4byte	0x12f2
 3108 0d10 06       		.uleb128 0x6
 3109 0d11 A2000000 		.4byte	.LVL149
 3110 0d15 FD120000 		.4byte	0x12fd
 3111 0d19 06       		.uleb128 0x6
 3112 0d1a A6000000 		.4byte	.LVL150
 3113 0d1e F5110000 		.4byte	0x11f5
 3114 0d22 06       		.uleb128 0x6
 3115 0d23 AA000000 		.4byte	.LVL151
 3116 0d27 08130000 		.4byte	0x1308
 3117 0d2b 06       		.uleb128 0x6
 3118 0d2c AE000000 		.4byte	.LVL152
 3119 0d30 00120000 		.4byte	0x1200
 3120 0d34 06       		.uleb128 0x6
 3121 0d35 B2000000 		.4byte	.LVL153
 3122 0d39 13130000 		.4byte	0x1313
 3123 0d3d 06       		.uleb128 0x6
 3124 0d3e B6000000 		.4byte	.LVL154
 3125 0d42 1E130000 		.4byte	0x131e
 3126 0d46 0C       		.uleb128 0xc
 3127 0d47 E6000000 		.4byte	.LVL161
 3128 0d4b 2C120000 		.4byte	0x122c
 3129 0d4f 5D0D0000 		.4byte	0xd5d
 3130 0d53 09       		.uleb128 0x9
 3131 0d54 01       		.uleb128 0x1
 3132 0d55 50       		.byte	0x50
 3133 0d56 05       		.uleb128 0x5
 3134 0d57 03       		.byte	0x3
 3135 0d58 58000000 		.4byte	.LC6
 3136 0d5c 00       		.byte	0
 3137 0d5d 0C       		.uleb128 0xc
 3138 0d5e 18010000 		.4byte	.LVL169
 3139 0d62 2C120000 		.4byte	0x122c
 3140 0d66 740D0000 		.4byte	0xd74
 3141 0d6a 09       		.uleb128 0x9
 3142 0d6b 01       		.uleb128 0x1
 3143 0d6c 50       		.byte	0x50
 3144 0d6d 05       		.uleb128 0x5
 3145 0d6e 03       		.byte	0x3
 3146 0d6f 58000000 		.4byte	.LC6
 3147 0d73 00       		.byte	0
 3148 0d74 06       		.uleb128 0x6
 3149 0d75 1C010000 		.4byte	.LVL170
 3150 0d79 29130000 		.4byte	0x1329
 3151 0d7d 06       		.uleb128 0x6
 3152 0d7e 20010000 		.4byte	.LVL171
 3153 0d82 34130000 		.4byte	0x1334
 3154 0d86 0C       		.uleb128 0xc
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 78


 3155 0d87 26010000 		.4byte	.LVL172
 3156 0d8b 3F130000 		.4byte	0x133f
 3157 0d8f 9D0D0000 		.4byte	0xd9d
 3158 0d93 09       		.uleb128 0x9
 3159 0d94 01       		.uleb128 0x1
 3160 0d95 50       		.byte	0x50
 3161 0d96 05       		.uleb128 0x5
 3162 0d97 03       		.byte	0x3
 3163 0d98 00000000 		.4byte	TIH
 3164 0d9c 00       		.byte	0
 3165 0d9d 0C       		.uleb128 0xc
 3166 0d9e 2C010000 		.4byte	.LVL173
 3167 0da2 4A130000 		.4byte	0x134a
 3168 0da6 B40D0000 		.4byte	0xdb4
 3169 0daa 09       		.uleb128 0x9
 3170 0dab 01       		.uleb128 0x1
 3171 0dac 50       		.byte	0x50
 3172 0dad 05       		.uleb128 0x5
 3173 0dae 03       		.byte	0x3
 3174 0daf 00000000 		.4byte	StartIH
 3175 0db3 00       		.byte	0
 3176 0db4 0C       		.uleb128 0xc
 3177 0db5 EC010000 		.4byte	.LVL199
 3178 0db9 55130000 		.4byte	0x1355
 3179 0dbd C80D0000 		.4byte	0xdc8
 3180 0dc1 09       		.uleb128 0x9
 3181 0dc2 01       		.uleb128 0x1
 3182 0dc3 50       		.byte	0x50
 3183 0dc4 02       		.uleb128 0x2
 3184 0dc5 09       		.byte	0x9
 3185 0dc6 D3       		.byte	0xd3
 3186 0dc7 00       		.byte	0
 3187 0dc8 0C       		.uleb128 0xc
 3188 0dc9 F4010000 		.4byte	.LVL200
 3189 0dcd 0B120000 		.4byte	0x120b
 3190 0dd1 DD0D0000 		.4byte	0xddd
 3191 0dd5 09       		.uleb128 0x9
 3192 0dd6 01       		.uleb128 0x1
 3193 0dd7 50       		.byte	0x50
 3194 0dd8 03       		.uleb128 0x3
 3195 0dd9 0B       		.byte	0xb
 3196 0dda 6AFF     		.2byte	0xff6a
 3197 0ddc 00       		.byte	0
 3198 0ddd 0C       		.uleb128 0xc
 3199 0dde FA010000 		.4byte	.LVL201
 3200 0de2 55130000 		.4byte	0x1355
 3201 0de6 F10D0000 		.4byte	0xdf1
 3202 0dea 09       		.uleb128 0x9
 3203 0deb 01       		.uleb128 0x1
 3204 0dec 50       		.byte	0x50
 3205 0ded 02       		.uleb128 0x2
 3206 0dee 08       		.byte	0x8
 3207 0def 2D       		.byte	0x2d
 3208 0df0 00       		.byte	0
 3209 0df1 0C       		.uleb128 0xc
 3210 0df2 00020000 		.4byte	.LVL202
 3211 0df6 0B120000 		.4byte	0x120b
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 79


 3212 0dfa 050E0000 		.4byte	0xe05
 3213 0dfe 09       		.uleb128 0x9
 3214 0dff 01       		.uleb128 0x1
 3215 0e00 50       		.byte	0x50
 3216 0e01 02       		.uleb128 0x2
 3217 0e02 08       		.byte	0x8
 3218 0e03 C8       		.byte	0xc8
 3219 0e04 00       		.byte	0
 3220 0e05 0C       		.uleb128 0xc
 3221 0e06 06020000 		.4byte	.LVL203
 3222 0e0a 55130000 		.4byte	0x1355
 3223 0e0e 190E0000 		.4byte	0xe19
 3224 0e12 09       		.uleb128 0x9
 3225 0e13 01       		.uleb128 0x1
 3226 0e14 50       		.byte	0x50
 3227 0e15 02       		.uleb128 0x2
 3228 0e16 08       		.byte	0x8
 3229 0e17 5A       		.byte	0x5a
 3230 0e18 00       		.byte	0
 3231 0e19 08       		.uleb128 0x8
 3232 0e1a 0E020000 		.4byte	.LVL204
 3233 0e1e 0B120000 		.4byte	0x120b
 3234 0e22 09       		.uleb128 0x9
 3235 0e23 01       		.uleb128 0x1
 3236 0e24 50       		.byte	0x50
 3237 0e25 03       		.uleb128 0x3
 3238 0e26 0A       		.byte	0xa
 3239 0e27 F401     		.2byte	0x1f4
 3240 0e29 00       		.byte	0
 3241 0e2a 00       		.byte	0
 3242 0e2b 16       		.uleb128 0x16
 3243 0e2c 7D070000 		.4byte	.LASF41
 3244 0e30 04       		.byte	0x4
 3245 0e31 1207     		.2byte	0x712
 3246 0e33 370E0000 		.4byte	0xe37
 3247 0e37 17       		.uleb128 0x17
 3248 0e38 76000000 		.4byte	0x76
 3249 0e3c 18       		.uleb128 0x18
 3250 0e3d FC020000 		.4byte	.LASF42
 3251 0e41 05       		.byte	0x5
 3252 0e42 1E       		.byte	0x1e
 3253 0e43 68000000 		.4byte	0x68
 3254 0e47 05       		.uleb128 0x5
 3255 0e48 03       		.byte	0x3
 3256 0e49 00000000 		.4byte	driveStraightEnable
 3257 0e4d 18       		.uleb128 0x18
 3258 0e4e 4C060000 		.4byte	.LASF43
 3259 0e52 01       		.byte	0x1
 3260 0e53 2B       		.byte	0x2b
 3261 0e54 68000000 		.4byte	0x68
 3262 0e58 05       		.uleb128 0x5
 3263 0e59 03       		.byte	0x3
 3264 0e5a 00000000 		.4byte	currentPuckRackScanningIndex
 3265 0e5e 19       		.uleb128 0x19
 3266 0e5f 68000000 		.4byte	0x68
 3267 0e63 6E0E0000 		.4byte	0xe6e
 3268 0e67 1A       		.uleb128 0x1a
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 80


 3269 0e68 9D000000 		.4byte	0x9d
 3270 0e6c 04       		.byte	0x4
 3271 0e6d 00       		.byte	0
 3272 0e6e 18       		.uleb128 0x18
 3273 0e6f C5080000 		.4byte	.LASF44
 3274 0e73 01       		.byte	0x1
 3275 0e74 29       		.byte	0x29
 3276 0e75 5E0E0000 		.4byte	0xe5e
 3277 0e79 05       		.uleb128 0x5
 3278 0e7a 03       		.byte	0x3
 3279 0e7b 00000000 		.4byte	puckRackColours
 3280 0e7f 18       		.uleb128 0x18
 3281 0e80 D5080000 		.4byte	.LASF45
 3282 0e84 01       		.byte	0x1
 3283 0e85 2C       		.byte	0x2c
 3284 0e86 5E0E0000 		.4byte	0xe5e
 3285 0e8a 05       		.uleb128 0x5
 3286 0e8b 03       		.byte	0x3
 3287 0e8c 00000000 		.4byte	puckRackOffsetsFromWest
 3288 0e90 18       		.uleb128 0x18
 3289 0e91 AB010000 		.4byte	.LASF46
 3290 0e95 01       		.byte	0x1
 3291 0e96 24       		.byte	0x24
 3292 0e97 68000000 		.4byte	0x68
 3293 0e9b 05       		.uleb128 0x5
 3294 0e9c 03       		.byte	0x3
 3295 0e9d 00000000 		.4byte	sweeping
 3296 0ea1 19       		.uleb128 0x19
 3297 0ea2 81000000 		.4byte	0x81
 3298 0ea6 B10E0000 		.4byte	0xeb1
 3299 0eaa 1A       		.uleb128 0x1a
 3300 0eab 9D000000 		.4byte	0x9d
 3301 0eaf 03       		.byte	0x3
 3302 0eb0 00       		.byte	0
 3303 0eb1 18       		.uleb128 0x18
 3304 0eb2 F8070000 		.4byte	.LASF47
 3305 0eb6 01       		.byte	0x1
 3306 0eb7 25       		.byte	0x25
 3307 0eb8 A10E0000 		.4byte	0xea1
 3308 0ebc 05       		.uleb128 0x5
 3309 0ebd 03       		.byte	0x3
 3310 0ebe 00000000 		.4byte	block_edge_location
 3311 0ec2 18       		.uleb128 0x18
 3312 0ec3 B2000000 		.4byte	.LASF48
 3313 0ec7 06       		.byte	0x6
 3314 0ec8 7B       		.byte	0x7b
 3315 0ec9 81000000 		.4byte	0x81
 3316 0ecd 05       		.uleb128 0x5
 3317 0ece 03       		.byte	0x3
 3318 0ecf 00000000 		.4byte	puckPileLocation
 3319 0ed3 18       		.uleb128 0x18
 3320 0ed4 CA060000 		.4byte	.LASF49
 3321 0ed8 01       		.byte	0x1
 3322 0ed9 4E       		.byte	0x4e
 3323 0eda 33000000 		.4byte	0x33
 3324 0ede 05       		.uleb128 0x5
 3325 0edf 03       		.byte	0x3
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 81


 3326 0ee0 00000000 		.4byte	drivingForwardFlag
 3327 0ee4 18       		.uleb128 0x18
 3328 0ee5 1A040000 		.4byte	.LASF50
 3329 0ee9 01       		.byte	0x1
 3330 0eea 4F       		.byte	0x4f
 3331 0eeb 33000000 		.4byte	0x33
 3332 0eef 05       		.uleb128 0x5
 3333 0ef0 03       		.byte	0x3
 3334 0ef1 00000000 		.4byte	drivingBackwardFlag
 3335 0ef5 18       		.uleb128 0x18
 3336 0ef6 1F050000 		.4byte	.LASF51
 3337 0efa 01       		.byte	0x1
 3338 0efb 50       		.byte	0x50
 3339 0efc 33000000 		.4byte	0x33
 3340 0f00 05       		.uleb128 0x5
 3341 0f01 03       		.byte	0x3
 3342 0f02 00000000 		.4byte	turningLeftFlag
 3343 0f06 18       		.uleb128 0x18
 3344 0f07 BB070000 		.4byte	.LASF52
 3345 0f0b 01       		.byte	0x1
 3346 0f0c 51       		.byte	0x51
 3347 0f0d 33000000 		.4byte	0x33
 3348 0f11 05       		.uleb128 0x5
 3349 0f12 03       		.byte	0x3
 3350 0f13 00000000 		.4byte	turningRightFlag
 3351 0f17 18       		.uleb128 0x18
 3352 0f18 8B080000 		.4byte	.LASF53
 3353 0f1c 05       		.byte	0x5
 3354 0f1d 2C       		.byte	0x2c
 3355 0f1e 68000000 		.4byte	0x68
 3356 0f22 05       		.uleb128 0x5
 3357 0f23 03       		.byte	0x3
 3358 0f24 00000000 		.4byte	initialisation
 3359 0f28 19       		.uleb128 0x19
 3360 0f29 8F000000 		.4byte	0x8f
 3361 0f2d 380F0000 		.4byte	0xf38
 3362 0f31 1A       		.uleb128 0x1a
 3363 0f32 9D000000 		.4byte	0x9d
 3364 0f36 1F       		.byte	0x1f
 3365 0f37 00       		.byte	0
 3366 0f38 18       		.uleb128 0x18
 3367 0f39 19000000 		.4byte	.LASF54
 3368 0f3d 01       		.byte	0x1
 3369 0f3e 1F       		.byte	0x1f
 3370 0f3f 280F0000 		.4byte	0xf28
 3371 0f43 05       		.uleb128 0x5
 3372 0f44 03       		.byte	0x3
 3373 0f45 00000000 		.4byte	output
 3374 0f49 1B       		.uleb128 0x1b
 3375 0f4a BE010000 		.4byte	.LASF55
 3376 0f4e 06       		.byte	0x6
 3377 0f4f 9A       		.byte	0x9a
 3378 0f50 68000000 		.4byte	0x68
 3379 0f54 1B       		.uleb128 0x1b
 3380 0f55 16010000 		.4byte	.LASF56
 3381 0f59 06       		.byte	0x6
 3382 0f5a 9B       		.byte	0x9b
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 82


 3383 0f5b 5E0E0000 		.4byte	0xe5e
 3384 0f5f 18       		.uleb128 0x18
 3385 0f60 DF050000 		.4byte	.LASF57
 3386 0f64 01       		.byte	0x1
 3387 0f65 5D       		.byte	0x5d
 3388 0f66 68000000 		.4byte	0x68
 3389 0f6a 05       		.uleb128 0x5
 3390 0f6b 03       		.byte	0x3
 3391 0f6c 00000000 		.4byte	colour_flag
 3392 0f70 18       		.uleb128 0x18
 3393 0f71 ED080000 		.4byte	.LASF58
 3394 0f75 01       		.byte	0x1
 3395 0f76 22       		.byte	0x22
 3396 0f77 68000000 		.4byte	0x68
 3397 0f7b 05       		.uleb128 0x5
 3398 0f7c 03       		.byte	0x3
 3399 0f7d 00000000 		.4byte	state
 3400 0f81 18       		.uleb128 0x18
 3401 0f82 86020000 		.4byte	.LASF59
 3402 0f86 01       		.byte	0x1
 3403 0f87 63       		.byte	0x63
 3404 0f88 68000000 		.4byte	0x68
 3405 0f8c 05       		.uleb128 0x5
 3406 0f8d 03       		.byte	0x3
 3407 0f8e 00000000 		.4byte	moving
 3408 0f92 18       		.uleb128 0x18
 3409 0f93 DD060000 		.4byte	.LASF60
 3410 0f97 05       		.byte	0x5
 3411 0f98 2E       		.byte	0x2e
 3412 0f99 68000000 		.4byte	0x68
 3413 0f9d 05       		.uleb128 0x5
 3414 0f9e 03       		.byte	0x3
 3415 0f9f 00000000 		.4byte	ultrasonic_flag
 3416 0fa3 18       		.uleb128 0x18
 3417 0fa4 DE040000 		.4byte	.LASF61
 3418 0fa8 01       		.byte	0x1
 3419 0fa9 44       		.byte	0x44
 3420 0faa 68000000 		.4byte	0x68
 3421 0fae 05       		.uleb128 0x5
 3422 0faf 03       		.byte	0x3
 3423 0fb0 00000000 		.4byte	currentOrientation
 3424 0fb4 18       		.uleb128 0x18
 3425 0fb5 8F090000 		.4byte	.LASF62
 3426 0fb9 01       		.byte	0x1
 3427 0fba 23       		.byte	0x23
 3428 0fbb 68000000 		.4byte	0x68
 3429 0fbf 05       		.uleb128 0x5
 3430 0fc0 03       		.byte	0x3
 3431 0fc1 00000000 		.4byte	running
 3432 0fc5 18       		.uleb128 0x18
 3433 0fc6 C8020000 		.4byte	.LASF63
 3434 0fca 01       		.byte	0x1
 3435 0fcb 28       		.byte	0x28
 3436 0fcc 68000000 		.4byte	0x68
 3437 0fd0 05       		.uleb128 0x5
 3438 0fd1 03       		.byte	0x3
 3439 0fd2 00000000 		.4byte	currentPuckStackSize
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 83


 3440 0fd6 19       		.uleb128 0x19
 3441 0fd7 68000000 		.4byte	0x68
 3442 0fdb E60F0000 		.4byte	0xfe6
 3443 0fdf 1A       		.uleb128 0x1a
 3444 0fe0 9D000000 		.4byte	0x9d
 3445 0fe4 02       		.byte	0x2
 3446 0fe5 00       		.byte	0
 3447 0fe6 18       		.uleb128 0x18
 3448 0fe7 F3050000 		.4byte	.LASF64
 3449 0feb 01       		.byte	0x1
 3450 0fec 2A       		.byte	0x2a
 3451 0fed D60F0000 		.4byte	0xfd6
 3452 0ff1 05       		.uleb128 0x5
 3453 0ff2 03       		.byte	0x3
 3454 0ff3 00000000 		.4byte	puckConstructionPlan
 3455 0ff7 18       		.uleb128 0x18
 3456 0ff8 7E060000 		.4byte	.LASF65
 3457 0ffc 01       		.byte	0x1
 3458 0ffd 32       		.byte	0x32
 3459 0ffe 81000000 		.4byte	0x81
 3460 1002 05       		.uleb128 0x5
 3461 1003 03       		.byte	0x3
 3462 1004 00000000 		.4byte	horizontalPuckGrid
 3463 1008 18       		.uleb128 0x18
 3464 1009 C3050000 		.4byte	.LASF66
 3465 100d 01       		.byte	0x1
 3466 100e 36       		.byte	0x36
 3467 100f 68000000 		.4byte	0x68
 3468 1013 05       		.uleb128 0x5
 3469 1014 03       		.byte	0x3
 3470 1015 00000000 		.4byte	beginNavigation
 3471 1019 18       		.uleb128 0x18
 3472 101a D3050000 		.4byte	.LASF67
 3473 101e 01       		.byte	0x1
 3474 101f 38       		.byte	0x38
 3475 1020 68000000 		.4byte	0x68
 3476 1024 05       		.uleb128 0x5
 3477 1025 03       		.byte	0x3
 3478 1026 00000000 		.4byte	pathToPucks
 3479 102a 18       		.uleb128 0x18
 3480 102b 0C080000 		.4byte	.LASF68
 3481 102f 01       		.byte	0x1
 3482 1030 39       		.byte	0x39
 3483 1031 68000000 		.4byte	0x68
 3484 1035 05       		.uleb128 0x5
 3485 1036 03       		.byte	0x3
 3486 1037 00000000 		.4byte	pathPastBlock
 3487 103b 18       		.uleb128 0x18
 3488 103c 80010000 		.4byte	.LASF69
 3489 1040 01       		.byte	0x1
 3490 1041 3D       		.byte	0x3d
 3491 1042 33000000 		.4byte	0x33
 3492 1046 05       		.uleb128 0x5
 3493 1047 03       		.byte	0x3
 3494 1048 00000000 		.4byte	blockEastClearance
 3495 104c 18       		.uleb128 0x18
 3496 104d 2F050000 		.4byte	.LASF70
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 84


 3497 1051 01       		.byte	0x1
 3498 1052 3E       		.byte	0x3e
 3499 1053 33000000 		.4byte	0x33
 3500 1057 05       		.uleb128 0x5
 3501 1058 03       		.byte	0x3
 3502 1059 00000000 		.4byte	blockWestClearance
 3503 105d 18       		.uleb128 0x18
 3504 105e ED060000 		.4byte	.LASF71
 3505 1062 01       		.byte	0x1
 3506 1063 3F       		.byte	0x3f
 3507 1064 33000000 		.4byte	0x33
 3508 1068 05       		.uleb128 0x5
 3509 1069 03       		.byte	0x3
 3510 106a 00000000 		.4byte	puckEastClearance
 3511 106e 18       		.uleb128 0x18
 3512 106f 97090000 		.4byte	.LASF72
 3513 1073 01       		.byte	0x1
 3514 1074 40       		.byte	0x40
 3515 1075 33000000 		.4byte	0x33
 3516 1079 05       		.uleb128 0x5
 3517 107a 03       		.byte	0x3
 3518 107b 00000000 		.4byte	puckWestClearance
 3519 107f 19       		.uleb128 0x19
 3520 1080 81000000 		.4byte	0x81
 3521 1084 8F100000 		.4byte	0x108f
 3522 1088 1A       		.uleb128 0x1a
 3523 1089 9D000000 		.4byte	0x9d
 3524 108d 01       		.byte	0x1
 3525 108e 00       		.byte	0
 3526 108f 18       		.uleb128 0x18
 3527 1090 63020000 		.4byte	.LASF73
 3528 1094 01       		.byte	0x1
 3529 1095 42       		.byte	0x42
 3530 1096 7F100000 		.4byte	0x107f
 3531 109a 05       		.uleb128 0x5
 3532 109b 03       		.byte	0x3
 3533 109c 00000000 		.4byte	currentPosition
 3534 10a0 18       		.uleb128 0x18
 3535 10a1 AB070000 		.4byte	.LASF74
 3536 10a5 01       		.byte	0x1
 3537 10a6 43       		.byte	0x43
 3538 10a7 7F100000 		.4byte	0x107f
 3539 10ab 05       		.uleb128 0x5
 3540 10ac 03       		.byte	0x3
 3541 10ad 00000000 		.4byte	desiredPosition
 3542 10b1 18       		.uleb128 0x18
 3543 10b2 3D070000 		.4byte	.LASF75
 3544 10b6 01       		.byte	0x1
 3545 10b7 45       		.byte	0x45
 3546 10b8 68000000 		.4byte	0x68
 3547 10bc 05       		.uleb128 0x5
 3548 10bd 03       		.byte	0x3
 3549 10be 00000000 		.4byte	desiredOrientation
 3550 10c2 18       		.uleb128 0x18
 3551 10c3 17090000 		.4byte	.LASF76
 3552 10c7 01       		.byte	0x1
 3553 10c8 47       		.byte	0x47
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 85


 3554 10c9 33000000 		.4byte	0x33
 3555 10cd 05       		.uleb128 0x5
 3556 10ce 03       		.byte	0x3
 3557 10cf 00000000 		.4byte	moveNow
 3558 10d3 18       		.uleb128 0x18
 3559 10d4 55050000 		.4byte	.LASF77
 3560 10d8 01       		.byte	0x1
 3561 10d9 54       		.byte	0x54
 3562 10da 33000000 		.4byte	0x33
 3563 10de 05       		.uleb128 0x5
 3564 10df 03       		.byte	0x3
 3565 10e0 00000000 		.4byte	moveLeftAllowed
 3566 10e4 18       		.uleb128 0x18
 3567 10e5 EB020000 		.4byte	.LASF78
 3568 10e9 01       		.byte	0x1
 3569 10ea 55       		.byte	0x55
 3570 10eb 33000000 		.4byte	0x33
 3571 10ef 05       		.uleb128 0x5
 3572 10f0 03       		.byte	0x3
 3573 10f1 00000000 		.4byte	moveRightAllowed
 3574 10f5 18       		.uleb128 0x18
 3575 10f6 42050000 		.4byte	.LASF79
 3576 10fa 01       		.byte	0x1
 3577 10fb 56       		.byte	0x56
 3578 10fc 33000000 		.4byte	0x33
 3579 1100 05       		.uleb128 0x5
 3580 1101 03       		.byte	0x3
 3581 1102 00000000 		.4byte	moveForwardAllowed
 3582 1106 18       		.uleb128 0x18
 3583 1107 70040000 		.4byte	.LASF80
 3584 110b 01       		.byte	0x1
 3585 110c 57       		.byte	0x57
 3586 110d 33000000 		.4byte	0x33
 3587 1111 05       		.uleb128 0x5
 3588 1112 03       		.byte	0x3
 3589 1113 00000000 		.4byte	moveBackwardAllowed
 3590 1117 18       		.uleb128 0x18
 3591 1118 20000000 		.4byte	.LASF81
 3592 111c 01       		.byte	0x1
 3593 111d 5C       		.byte	0x5c
 3594 111e 68000000 		.4byte	0x68
 3595 1122 05       		.uleb128 0x5
 3596 1123 03       		.byte	0x3
 3597 1124 00000000 		.4byte	idac_value
 3598 1128 18       		.uleb128 0x18
 3599 1129 9D060000 		.4byte	.LASF82
 3600 112d 01       		.byte	0x1
 3601 112e 5E       		.byte	0x5e
 3602 112f 68000000 		.4byte	0x68
 3603 1133 05       		.uleb128 0x5
 3604 1134 03       		.byte	0x3
 3605 1135 00000000 		.4byte	colour_sensing_algorithm
 3606 1139 18       		.uleb128 0x18
 3607 113a 84040000 		.4byte	.LASF83
 3608 113e 01       		.byte	0x1
 3609 113f 65       		.byte	0x65
 3610 1140 4A110000 		.4byte	0x114a
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 86


 3611 1144 05       		.uleb128 0x5
 3612 1145 03       		.byte	0x3
 3613 1146 00000000 		.4byte	PLAN_SCAN_VERTICAL
 3614 114a 1C       		.uleb128 0x1c
 3615 114b 68000000 		.4byte	0x68
 3616 114f 18       		.uleb128 0x18
 3617 1150 1F090000 		.4byte	.LASF84
 3618 1154 01       		.byte	0x1
 3619 1155 67       		.byte	0x67
 3620 1156 68000000 		.4byte	0x68
 3621 115a 05       		.uleb128 0x5
 3622 115b 03       		.byte	0x3
 3623 115c 00000000 		.4byte	current_stage
 3624 1160 18       		.uleb128 0x18
 3625 1161 08060000 		.4byte	.LASF85
 3626 1165 01       		.byte	0x1
 3627 1166 6B       		.byte	0x6b
 3628 1167 68000000 		.4byte	0x68
 3629 116b 05       		.uleb128 0x5
 3630 116c 03       		.byte	0x3
 3631 116d 00000000 		.4byte	distance_returned_global
 3632 1171 1D       		.uleb128 0x1d
 3633 1172 57010000 		.4byte	.LASF86
 3634 1176 57010000 		.4byte	.LASF86
 3635 117a 05       		.byte	0x5
 3636 117b 19       		.byte	0x19
 3637 117c 1D       		.uleb128 0x1d
 3638 117d 00000000 		.4byte	.LASF87
 3639 1181 00000000 		.4byte	.LASF87
 3640 1185 07       		.byte	0x7
 3641 1186 76       		.byte	0x76
 3642 1187 1D       		.uleb128 0x1d
 3643 1188 73020000 		.4byte	.LASF88
 3644 118c 73020000 		.4byte	.LASF88
 3645 1190 08       		.byte	0x8
 3646 1191 0F       		.byte	0xf
 3647 1192 1D       		.uleb128 0x1d
 3648 1193 C4010000 		.4byte	.LASF89
 3649 1197 C4010000 		.4byte	.LASF89
 3650 119b 09       		.byte	0x9
 3651 119c 1C       		.byte	0x1c
 3652 119d 1D       		.uleb128 0x1d
 3653 119e 8D020000 		.4byte	.LASF90
 3654 11a2 8D020000 		.4byte	.LASF90
 3655 11a6 0A       		.byte	0xa
 3656 11a7 2F       		.byte	0x2f
 3657 11a8 1D       		.uleb128 0x1d
 3658 11a9 5A070000 		.4byte	.LASF91
 3659 11ad 5A070000 		.4byte	.LASF91
 3660 11b1 0B       		.byte	0xb
 3661 11b2 2F       		.byte	0x2f
 3662 11b3 1D       		.uleb128 0x1d
 3663 11b4 97040000 		.4byte	.LASF92
 3664 11b8 97040000 		.4byte	.LASF92
 3665 11bc 0C       		.byte	0xc
 3666 11bd DD       		.byte	0xdd
 3667 11be 1D       		.uleb128 0x1d
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 87


 3668 11bf F7000000 		.4byte	.LASF93
 3669 11c3 F7000000 		.4byte	.LASF93
 3670 11c7 0C       		.byte	0xc
 3671 11c8 C3       		.byte	0xc3
 3672 11c9 1D       		.uleb128 0x1d
 3673 11ca 32060000 		.4byte	.LASF94
 3674 11ce 32060000 		.4byte	.LASF94
 3675 11d2 0D       		.byte	0xd
 3676 11d3 DD       		.byte	0xdd
 3677 11d4 1D       		.uleb128 0x1d
 3678 11d5 6F050000 		.4byte	.LASF95
 3679 11d9 6F050000 		.4byte	.LASF95
 3680 11dd 0D       		.byte	0xd
 3681 11de C3       		.byte	0xc3
 3682 11df 1D       		.uleb128 0x1d
 3683 11e0 F2010000 		.4byte	.LASF96
 3684 11e4 F2010000 		.4byte	.LASF96
 3685 11e8 0E       		.byte	0xe
 3686 11e9 4F       		.byte	0x4f
 3687 11ea 1D       		.uleb128 0x1d
 3688 11eb 38010000 		.4byte	.LASF97
 3689 11ef 38010000 		.4byte	.LASF97
 3690 11f3 0F       		.byte	0xf
 3691 11f4 4F       		.byte	0x4f
 3692 11f5 1D       		.uleb128 0x1d
 3693 11f6 37020000 		.4byte	.LASF98
 3694 11fa 37020000 		.4byte	.LASF98
 3695 11fe 0C       		.byte	0xc
 3696 11ff DC       		.byte	0xdc
 3697 1200 1D       		.uleb128 0x1d
 3698 1201 67030000 		.4byte	.LASF99
 3699 1205 67030000 		.4byte	.LASF99
 3700 1209 0D       		.byte	0xd
 3701 120a DC       		.byte	0xdc
 3702 120b 1D       		.uleb128 0x1d
 3703 120c 7A080000 		.4byte	.LASF100
 3704 1210 7A080000 		.4byte	.LASF100
 3705 1214 10       		.byte	0x10
 3706 1215 10       		.byte	0x10
 3707 1216 1D       		.uleb128 0x1d
 3708 1217 E8000000 		.4byte	.LASF101
 3709 121b E8000000 		.4byte	.LASF101
 3710 121f 05       		.byte	0x5
 3711 1220 16       		.byte	0x16
 3712 1221 1D       		.uleb128 0x1d
 3713 1222 C2060000 		.4byte	.LASF102
 3714 1226 C2060000 		.4byte	.LASF102
 3715 122a 11       		.byte	0x11
 3716 122b E7       		.byte	0xe7
 3717 122c 1D       		.uleb128 0x1d
 3718 122d 2E040000 		.4byte	.LASF103
 3719 1231 2E040000 		.4byte	.LASF103
 3720 1235 12       		.byte	0x12
 3721 1236 8B       		.byte	0x8b
 3722 1237 1D       		.uleb128 0x1d
 3723 1238 52040000 		.4byte	.LASF104
 3724 123c 52040000 		.4byte	.LASF104
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 88


 3725 1240 0E       		.byte	0xe
 3726 1241 4E       		.byte	0x4e
 3727 1242 1D       		.uleb128 0x1d
 3728 1243 10030000 		.4byte	.LASF105
 3729 1247 10030000 		.4byte	.LASF105
 3730 124b 0F       		.byte	0xf
 3731 124c 4E       		.byte	0x4e
 3732 124d 1D       		.uleb128 0x1d
 3733 124e FF060000 		.4byte	.LASF106
 3734 1252 FF060000 		.4byte	.LASF106
 3735 1256 09       		.byte	0x9
 3736 1257 19       		.byte	0x19
 3737 1258 1D       		.uleb128 0x1d
 3738 1259 39080000 		.4byte	.LASF107
 3739 125d 39080000 		.4byte	.LASF107
 3740 1261 13       		.byte	0x13
 3741 1262 2F       		.byte	0x2f
 3742 1263 1D       		.uleb128 0x1d
 3743 1264 47090000 		.4byte	.LASF108
 3744 1268 47090000 		.4byte	.LASF108
 3745 126c 08       		.byte	0x8
 3746 126d 11       		.byte	0x11
 3747 126e 1D       		.uleb128 0x1d
 3748 126f 8A070000 		.4byte	.LASF109
 3749 1273 8A070000 		.4byte	.LASF109
 3750 1277 14       		.byte	0x14
 3751 1278 3D       		.byte	0x3d
 3752 1279 1D       		.uleb128 0x1d
 3753 127a EB070000 		.4byte	.LASF110
 3754 127e EB070000 		.4byte	.LASF110
 3755 1282 12       		.byte	0x12
 3756 1283 54       		.byte	0x54
 3757 1284 1D       		.uleb128 0x1d
 3758 1285 4B030000 		.4byte	.LASF111
 3759 1289 4B030000 		.4byte	.LASF111
 3760 128d 15       		.byte	0x15
 3761 128e 3A       		.byte	0x3a
 3762 128f 1D       		.uleb128 0x1d
 3763 1290 8F050000 		.4byte	.LASF112
 3764 1294 8F050000 		.4byte	.LASF112
 3765 1298 16       		.byte	0x16
 3766 1299 3C       		.byte	0x3c
 3767 129a 1D       		.uleb128 0x1d
 3768 129b B4080000 		.4byte	.LASF113
 3769 129f B4080000 		.4byte	.LASF113
 3770 12a3 16       		.byte	0x16
 3771 12a4 40       		.byte	0x40
 3772 12a5 1D       		.uleb128 0x1d
 3773 12a6 21060000 		.4byte	.LASF114
 3774 12aa 21060000 		.4byte	.LASF114
 3775 12ae 16       		.byte	0x16
 3776 12af 41       		.byte	0x41
 3777 12b0 1D       		.uleb128 0x1d
 3778 12b1 55030000 		.4byte	.LASF115
 3779 12b5 55030000 		.4byte	.LASF115
 3780 12b9 17       		.byte	0x17
 3781 12ba 2F       		.byte	0x2f
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 89


 3782 12bb 1D       		.uleb128 0x1d
 3783 12bc 69060000 		.4byte	.LASF116
 3784 12c0 69060000 		.4byte	.LASF116
 3785 12c4 18       		.byte	0x18
 3786 12c5 92       		.byte	0x92
 3787 12c6 1D       		.uleb128 0x1d
 3788 12c7 2F030000 		.4byte	.LASF117
 3789 12cb 2F030000 		.4byte	.LASF117
 3790 12cf 18       		.byte	0x18
 3791 12d0 C3       		.byte	0xc3
 3792 12d1 1D       		.uleb128 0x1d
 3793 12d2 96070000 		.4byte	.LASF118
 3794 12d6 96070000 		.4byte	.LASF118
 3795 12da 18       		.byte	0x18
 3796 12db DC       		.byte	0xdc
 3797 12dc 1D       		.uleb128 0x1d
 3798 12dd C6040000 		.4byte	.LASF119
 3799 12e1 C6040000 		.4byte	.LASF119
 3800 12e5 19       		.byte	0x19
 3801 12e6 92       		.byte	0x92
 3802 12e7 1D       		.uleb128 0x1d
 3803 12e8 CC070000 		.4byte	.LASF120
 3804 12ec CC070000 		.4byte	.LASF120
 3805 12f0 19       		.byte	0x19
 3806 12f1 C3       		.byte	0xc3
 3807 12f2 1D       		.uleb128 0x1d
 3808 12f3 AB050000 		.4byte	.LASF121
 3809 12f7 AB050000 		.4byte	.LASF121
 3810 12fb 19       		.byte	0x19
 3811 12fc DC       		.byte	0xdc
 3812 12fd 1D       		.uleb128 0x1d
 3813 12fe 93010000 		.4byte	.LASF122
 3814 1302 93010000 		.4byte	.LASF122
 3815 1306 0C       		.byte	0xc
 3816 1307 92       		.byte	0x92
 3817 1308 1D       		.uleb128 0x1d
 3818 1309 10020000 		.4byte	.LASF123
 3819 130d 10020000 		.4byte	.LASF123
 3820 1311 0D       		.byte	0xd
 3821 1312 92       		.byte	0x92
 3822 1313 1D       		.uleb128 0x1d
 3823 1314 F3080000 		.4byte	.LASF124
 3824 1318 F3080000 		.4byte	.LASF124
 3825 131c 0E       		.byte	0xe
 3826 131d 48       		.byte	0x48
 3827 131e 1D       		.uleb128 0x1d
 3828 131f 05050000 		.4byte	.LASF125
 3829 1323 05050000 		.4byte	.LASF125
 3830 1327 0F       		.byte	0xf
 3831 1328 48       		.byte	0x48
 3832 1329 1D       		.uleb128 0x1d
 3833 132a 2D090000 		.4byte	.LASF126
 3834 132e 2D090000 		.4byte	.LASF126
 3835 1332 1A       		.byte	0x1a
 3836 1333 5A       		.byte	0x5a
 3837 1334 1D       		.uleb128 0x1d
 3838 1335 17070000 		.4byte	.LASF127
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 90


 3839 1339 17070000 		.4byte	.LASF127
 3840 133d 1A       		.byte	0x1a
 3841 133e 5E       		.byte	0x5e
 3842 133f 1D       		.uleb128 0x1d
 3843 1340 55020000 		.4byte	.LASF128
 3844 1344 55020000 		.4byte	.LASF128
 3845 1348 1B       		.byte	0x1b
 3846 1349 18       		.byte	0x18
 3847 134a 1D       		.uleb128 0x1d
 3848 134b DD020000 		.4byte	.LASF129
 3849 134f DD020000 		.4byte	.LASF129
 3850 1353 1C       		.byte	0x1c
 3851 1354 18       		.byte	0x18
 3852 1355 1D       		.uleb128 0x1d
 3853 1356 91060000 		.4byte	.LASF130
 3854 135a 91060000 		.4byte	.LASF130
 3855 135e 10       		.byte	0x10
 3856 135f 11       		.byte	0x11
 3857 1360 00       		.byte	0
 3858              		.section	.debug_abbrev,"",%progbits
 3859              	.Ldebug_abbrev0:
 3860 0000 01       		.uleb128 0x1
 3861 0001 11       		.uleb128 0x11
 3862 0002 01       		.byte	0x1
 3863 0003 25       		.uleb128 0x25
 3864 0004 0E       		.uleb128 0xe
 3865 0005 13       		.uleb128 0x13
 3866 0006 0B       		.uleb128 0xb
 3867 0007 03       		.uleb128 0x3
 3868 0008 0E       		.uleb128 0xe
 3869 0009 1B       		.uleb128 0x1b
 3870 000a 0E       		.uleb128 0xe
 3871 000b 55       		.uleb128 0x55
 3872 000c 17       		.uleb128 0x17
 3873 000d 11       		.uleb128 0x11
 3874 000e 01       		.uleb128 0x1
 3875 000f 10       		.uleb128 0x10
 3876 0010 17       		.uleb128 0x17
 3877 0011 00       		.byte	0
 3878 0012 00       		.byte	0
 3879 0013 02       		.uleb128 0x2
 3880 0014 24       		.uleb128 0x24
 3881 0015 00       		.byte	0
 3882 0016 0B       		.uleb128 0xb
 3883 0017 0B       		.uleb128 0xb
 3884 0018 3E       		.uleb128 0x3e
 3885 0019 0B       		.uleb128 0xb
 3886 001a 03       		.uleb128 0x3
 3887 001b 0E       		.uleb128 0xe
 3888 001c 00       		.byte	0
 3889 001d 00       		.byte	0
 3890 001e 03       		.uleb128 0x3
 3891 001f 16       		.uleb128 0x16
 3892 0020 00       		.byte	0
 3893 0021 03       		.uleb128 0x3
 3894 0022 0E       		.uleb128 0xe
 3895 0023 3A       		.uleb128 0x3a
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 91


 3896 0024 0B       		.uleb128 0xb
 3897 0025 3B       		.uleb128 0x3b
 3898 0026 0B       		.uleb128 0xb
 3899 0027 49       		.uleb128 0x49
 3900 0028 13       		.uleb128 0x13
 3901 0029 00       		.byte	0
 3902 002a 00       		.byte	0
 3903 002b 04       		.uleb128 0x4
 3904 002c 24       		.uleb128 0x24
 3905 002d 00       		.byte	0
 3906 002e 0B       		.uleb128 0xb
 3907 002f 0B       		.uleb128 0xb
 3908 0030 3E       		.uleb128 0x3e
 3909 0031 0B       		.uleb128 0xb
 3910 0032 03       		.uleb128 0x3
 3911 0033 08       		.uleb128 0x8
 3912 0034 00       		.byte	0
 3913 0035 00       		.byte	0
 3914 0036 05       		.uleb128 0x5
 3915 0037 2E       		.uleb128 0x2e
 3916 0038 01       		.byte	0x1
 3917 0039 3F       		.uleb128 0x3f
 3918 003a 19       		.uleb128 0x19
 3919 003b 03       		.uleb128 0x3
 3920 003c 08       		.uleb128 0x8
 3921 003d 3A       		.uleb128 0x3a
 3922 003e 0B       		.uleb128 0xb
 3923 003f 3B       		.uleb128 0x3b
 3924 0040 0B       		.uleb128 0xb
 3925 0041 27       		.uleb128 0x27
 3926 0042 19       		.uleb128 0x19
 3927 0043 11       		.uleb128 0x11
 3928 0044 01       		.uleb128 0x1
 3929 0045 12       		.uleb128 0x12
 3930 0046 06       		.uleb128 0x6
 3931 0047 40       		.uleb128 0x40
 3932 0048 18       		.uleb128 0x18
 3933 0049 9742     		.uleb128 0x2117
 3934 004b 19       		.uleb128 0x19
 3935 004c 01       		.uleb128 0x1
 3936 004d 13       		.uleb128 0x13
 3937 004e 00       		.byte	0
 3938 004f 00       		.byte	0
 3939 0050 06       		.uleb128 0x6
 3940 0051 898201   		.uleb128 0x4109
 3941 0054 00       		.byte	0
 3942 0055 11       		.uleb128 0x11
 3943 0056 01       		.uleb128 0x1
 3944 0057 31       		.uleb128 0x31
 3945 0058 13       		.uleb128 0x13
 3946 0059 00       		.byte	0
 3947 005a 00       		.byte	0
 3948 005b 07       		.uleb128 0x7
 3949 005c 2E       		.uleb128 0x2e
 3950 005d 01       		.byte	0x1
 3951 005e 3F       		.uleb128 0x3f
 3952 005f 19       		.uleb128 0x19
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 92


 3953 0060 03       		.uleb128 0x3
 3954 0061 0E       		.uleb128 0xe
 3955 0062 3A       		.uleb128 0x3a
 3956 0063 0B       		.uleb128 0xb
 3957 0064 3B       		.uleb128 0x3b
 3958 0065 0B       		.uleb128 0xb
 3959 0066 27       		.uleb128 0x27
 3960 0067 19       		.uleb128 0x19
 3961 0068 11       		.uleb128 0x11
 3962 0069 01       		.uleb128 0x1
 3963 006a 12       		.uleb128 0x12
 3964 006b 06       		.uleb128 0x6
 3965 006c 40       		.uleb128 0x40
 3966 006d 18       		.uleb128 0x18
 3967 006e 9742     		.uleb128 0x2117
 3968 0070 19       		.uleb128 0x19
 3969 0071 01       		.uleb128 0x1
 3970 0072 13       		.uleb128 0x13
 3971 0073 00       		.byte	0
 3972 0074 00       		.byte	0
 3973 0075 08       		.uleb128 0x8
 3974 0076 898201   		.uleb128 0x4109
 3975 0079 01       		.byte	0x1
 3976 007a 11       		.uleb128 0x11
 3977 007b 01       		.uleb128 0x1
 3978 007c 31       		.uleb128 0x31
 3979 007d 13       		.uleb128 0x13
 3980 007e 00       		.byte	0
 3981 007f 00       		.byte	0
 3982 0080 09       		.uleb128 0x9
 3983 0081 8A8201   		.uleb128 0x410a
 3984 0084 00       		.byte	0
 3985 0085 02       		.uleb128 0x2
 3986 0086 18       		.uleb128 0x18
 3987 0087 9142     		.uleb128 0x2111
 3988 0089 18       		.uleb128 0x18
 3989 008a 00       		.byte	0
 3990 008b 00       		.byte	0
 3991 008c 0A       		.uleb128 0xa
 3992 008d 2E       		.uleb128 0x2e
 3993 008e 01       		.byte	0x1
 3994 008f 3F       		.uleb128 0x3f
 3995 0090 19       		.uleb128 0x19
 3996 0091 03       		.uleb128 0x3
 3997 0092 0E       		.uleb128 0xe
 3998 0093 3A       		.uleb128 0x3a
 3999 0094 0B       		.uleb128 0xb
 4000 0095 3B       		.uleb128 0x3b
 4001 0096 05       		.uleb128 0x5
 4002 0097 27       		.uleb128 0x27
 4003 0098 19       		.uleb128 0x19
 4004 0099 11       		.uleb128 0x11
 4005 009a 01       		.uleb128 0x1
 4006 009b 12       		.uleb128 0x12
 4007 009c 06       		.uleb128 0x6
 4008 009d 40       		.uleb128 0x40
 4009 009e 18       		.uleb128 0x18
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 93


 4010 009f 9742     		.uleb128 0x2117
 4011 00a1 19       		.uleb128 0x19
 4012 00a2 01       		.uleb128 0x1
 4013 00a3 13       		.uleb128 0x13
 4014 00a4 00       		.byte	0
 4015 00a5 00       		.byte	0
 4016 00a6 0B       		.uleb128 0xb
 4017 00a7 34       		.uleb128 0x34
 4018 00a8 00       		.byte	0
 4019 00a9 03       		.uleb128 0x3
 4020 00aa 0E       		.uleb128 0xe
 4021 00ab 3A       		.uleb128 0x3a
 4022 00ac 0B       		.uleb128 0xb
 4023 00ad 3B       		.uleb128 0x3b
 4024 00ae 05       		.uleb128 0x5
 4025 00af 49       		.uleb128 0x49
 4026 00b0 13       		.uleb128 0x13
 4027 00b1 02       		.uleb128 0x2
 4028 00b2 17       		.uleb128 0x17
 4029 00b3 00       		.byte	0
 4030 00b4 00       		.byte	0
 4031 00b5 0C       		.uleb128 0xc
 4032 00b6 898201   		.uleb128 0x4109
 4033 00b9 01       		.byte	0x1
 4034 00ba 11       		.uleb128 0x11
 4035 00bb 01       		.uleb128 0x1
 4036 00bc 31       		.uleb128 0x31
 4037 00bd 13       		.uleb128 0x13
 4038 00be 01       		.uleb128 0x1
 4039 00bf 13       		.uleb128 0x13
 4040 00c0 00       		.byte	0
 4041 00c1 00       		.byte	0
 4042 00c2 0D       		.uleb128 0xd
 4043 00c3 34       		.uleb128 0x34
 4044 00c4 00       		.byte	0
 4045 00c5 03       		.uleb128 0x3
 4046 00c6 0E       		.uleb128 0xe
 4047 00c7 3A       		.uleb128 0x3a
 4048 00c8 0B       		.uleb128 0xb
 4049 00c9 3B       		.uleb128 0x3b
 4050 00ca 05       		.uleb128 0x5
 4051 00cb 49       		.uleb128 0x49
 4052 00cc 13       		.uleb128 0x13
 4053 00cd 00       		.byte	0
 4054 00ce 00       		.byte	0
 4055 00cf 0E       		.uleb128 0xe
 4056 00d0 34       		.uleb128 0x34
 4057 00d1 00       		.byte	0
 4058 00d2 03       		.uleb128 0x3
 4059 00d3 0E       		.uleb128 0xe
 4060 00d4 3A       		.uleb128 0x3a
 4061 00d5 0B       		.uleb128 0xb
 4062 00d6 3B       		.uleb128 0x3b
 4063 00d7 05       		.uleb128 0x5
 4064 00d8 49       		.uleb128 0x49
 4065 00d9 13       		.uleb128 0x13
 4066 00da 1C       		.uleb128 0x1c
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 94


 4067 00db 0B       		.uleb128 0xb
 4068 00dc 00       		.byte	0
 4069 00dd 00       		.byte	0
 4070 00de 0F       		.uleb128 0xf
 4071 00df 05       		.uleb128 0x5
 4072 00e0 00       		.byte	0
 4073 00e1 03       		.uleb128 0x3
 4074 00e2 0E       		.uleb128 0xe
 4075 00e3 3A       		.uleb128 0x3a
 4076 00e4 0B       		.uleb128 0xb
 4077 00e5 3B       		.uleb128 0x3b
 4078 00e6 05       		.uleb128 0x5
 4079 00e7 49       		.uleb128 0x49
 4080 00e8 13       		.uleb128 0x13
 4081 00e9 02       		.uleb128 0x2
 4082 00ea 17       		.uleb128 0x17
 4083 00eb 00       		.byte	0
 4084 00ec 00       		.byte	0
 4085 00ed 10       		.uleb128 0x10
 4086 00ee 2E       		.uleb128 0x2e
 4087 00ef 01       		.byte	0x1
 4088 00f0 3F       		.uleb128 0x3f
 4089 00f1 19       		.uleb128 0x19
 4090 00f2 03       		.uleb128 0x3
 4091 00f3 0E       		.uleb128 0xe
 4092 00f4 3A       		.uleb128 0x3a
 4093 00f5 0B       		.uleb128 0xb
 4094 00f6 3B       		.uleb128 0x3b
 4095 00f7 0B       		.uleb128 0xb
 4096 00f8 27       		.uleb128 0x27
 4097 00f9 19       		.uleb128 0x19
 4098 00fa 49       		.uleb128 0x49
 4099 00fb 13       		.uleb128 0x13
 4100 00fc 8701     		.uleb128 0x87
 4101 00fe 19       		.uleb128 0x19
 4102 00ff 11       		.uleb128 0x11
 4103 0100 01       		.uleb128 0x1
 4104 0101 12       		.uleb128 0x12
 4105 0102 06       		.uleb128 0x6
 4106 0103 40       		.uleb128 0x40
 4107 0104 18       		.uleb128 0x18
 4108 0105 9742     		.uleb128 0x2117
 4109 0107 19       		.uleb128 0x19
 4110 0108 01       		.uleb128 0x1
 4111 0109 13       		.uleb128 0x13
 4112 010a 00       		.byte	0
 4113 010b 00       		.byte	0
 4114 010c 11       		.uleb128 0x11
 4115 010d 34       		.uleb128 0x34
 4116 010e 00       		.byte	0
 4117 010f 03       		.uleb128 0x3
 4118 0110 0E       		.uleb128 0xe
 4119 0111 3A       		.uleb128 0x3a
 4120 0112 0B       		.uleb128 0xb
 4121 0113 3B       		.uleb128 0x3b
 4122 0114 0B       		.uleb128 0xb
 4123 0115 49       		.uleb128 0x49
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 95


 4124 0116 13       		.uleb128 0x13
 4125 0117 1C       		.uleb128 0x1c
 4126 0118 0B       		.uleb128 0xb
 4127 0119 00       		.byte	0
 4128 011a 00       		.byte	0
 4129 011b 12       		.uleb128 0x12
 4130 011c 0B       		.uleb128 0xb
 4131 011d 01       		.byte	0x1
 4132 011e 11       		.uleb128 0x11
 4133 011f 01       		.uleb128 0x1
 4134 0120 12       		.uleb128 0x12
 4135 0121 06       		.uleb128 0x6
 4136 0122 01       		.uleb128 0x1
 4137 0123 13       		.uleb128 0x13
 4138 0124 00       		.byte	0
 4139 0125 00       		.byte	0
 4140 0126 13       		.uleb128 0x13
 4141 0127 34       		.uleb128 0x34
 4142 0128 00       		.byte	0
 4143 0129 03       		.uleb128 0x3
 4144 012a 08       		.uleb128 0x8
 4145 012b 3A       		.uleb128 0x3a
 4146 012c 0B       		.uleb128 0xb
 4147 012d 3B       		.uleb128 0x3b
 4148 012e 0B       		.uleb128 0xb
 4149 012f 49       		.uleb128 0x49
 4150 0130 13       		.uleb128 0x13
 4151 0131 02       		.uleb128 0x2
 4152 0132 17       		.uleb128 0x17
 4153 0133 00       		.byte	0
 4154 0134 00       		.byte	0
 4155 0135 14       		.uleb128 0x14
 4156 0136 34       		.uleb128 0x34
 4157 0137 00       		.byte	0
 4158 0138 03       		.uleb128 0x3
 4159 0139 08       		.uleb128 0x8
 4160 013a 3A       		.uleb128 0x3a
 4161 013b 0B       		.uleb128 0xb
 4162 013c 3B       		.uleb128 0x3b
 4163 013d 05       		.uleb128 0x5
 4164 013e 49       		.uleb128 0x49
 4165 013f 13       		.uleb128 0x13
 4166 0140 02       		.uleb128 0x2
 4167 0141 17       		.uleb128 0x17
 4168 0142 00       		.byte	0
 4169 0143 00       		.byte	0
 4170 0144 15       		.uleb128 0x15
 4171 0145 0B       		.uleb128 0xb
 4172 0146 01       		.byte	0x1
 4173 0147 55       		.uleb128 0x55
 4174 0148 17       		.uleb128 0x17
 4175 0149 01       		.uleb128 0x1
 4176 014a 13       		.uleb128 0x13
 4177 014b 00       		.byte	0
 4178 014c 00       		.byte	0
 4179 014d 16       		.uleb128 0x16
 4180 014e 34       		.uleb128 0x34
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 96


 4181 014f 00       		.byte	0
 4182 0150 03       		.uleb128 0x3
 4183 0151 0E       		.uleb128 0xe
 4184 0152 3A       		.uleb128 0x3a
 4185 0153 0B       		.uleb128 0xb
 4186 0154 3B       		.uleb128 0x3b
 4187 0155 05       		.uleb128 0x5
 4188 0156 49       		.uleb128 0x49
 4189 0157 13       		.uleb128 0x13
 4190 0158 3F       		.uleb128 0x3f
 4191 0159 19       		.uleb128 0x19
 4192 015a 3C       		.uleb128 0x3c
 4193 015b 19       		.uleb128 0x19
 4194 015c 00       		.byte	0
 4195 015d 00       		.byte	0
 4196 015e 17       		.uleb128 0x17
 4197 015f 35       		.uleb128 0x35
 4198 0160 00       		.byte	0
 4199 0161 49       		.uleb128 0x49
 4200 0162 13       		.uleb128 0x13
 4201 0163 00       		.byte	0
 4202 0164 00       		.byte	0
 4203 0165 18       		.uleb128 0x18
 4204 0166 34       		.uleb128 0x34
 4205 0167 00       		.byte	0
 4206 0168 03       		.uleb128 0x3
 4207 0169 0E       		.uleb128 0xe
 4208 016a 3A       		.uleb128 0x3a
 4209 016b 0B       		.uleb128 0xb
 4210 016c 3B       		.uleb128 0x3b
 4211 016d 0B       		.uleb128 0xb
 4212 016e 49       		.uleb128 0x49
 4213 016f 13       		.uleb128 0x13
 4214 0170 3F       		.uleb128 0x3f
 4215 0171 19       		.uleb128 0x19
 4216 0172 02       		.uleb128 0x2
 4217 0173 18       		.uleb128 0x18
 4218 0174 00       		.byte	0
 4219 0175 00       		.byte	0
 4220 0176 19       		.uleb128 0x19
 4221 0177 01       		.uleb128 0x1
 4222 0178 01       		.byte	0x1
 4223 0179 49       		.uleb128 0x49
 4224 017a 13       		.uleb128 0x13
 4225 017b 01       		.uleb128 0x1
 4226 017c 13       		.uleb128 0x13
 4227 017d 00       		.byte	0
 4228 017e 00       		.byte	0
 4229 017f 1A       		.uleb128 0x1a
 4230 0180 21       		.uleb128 0x21
 4231 0181 00       		.byte	0
 4232 0182 49       		.uleb128 0x49
 4233 0183 13       		.uleb128 0x13
 4234 0184 2F       		.uleb128 0x2f
 4235 0185 0B       		.uleb128 0xb
 4236 0186 00       		.byte	0
 4237 0187 00       		.byte	0
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 97


 4238 0188 1B       		.uleb128 0x1b
 4239 0189 34       		.uleb128 0x34
 4240 018a 00       		.byte	0
 4241 018b 03       		.uleb128 0x3
 4242 018c 0E       		.uleb128 0xe
 4243 018d 3A       		.uleb128 0x3a
 4244 018e 0B       		.uleb128 0xb
 4245 018f 3B       		.uleb128 0x3b
 4246 0190 0B       		.uleb128 0xb
 4247 0191 49       		.uleb128 0x49
 4248 0192 13       		.uleb128 0x13
 4249 0193 3F       		.uleb128 0x3f
 4250 0194 19       		.uleb128 0x19
 4251 0195 3C       		.uleb128 0x3c
 4252 0196 19       		.uleb128 0x19
 4253 0197 00       		.byte	0
 4254 0198 00       		.byte	0
 4255 0199 1C       		.uleb128 0x1c
 4256 019a 26       		.uleb128 0x26
 4257 019b 00       		.byte	0
 4258 019c 49       		.uleb128 0x49
 4259 019d 13       		.uleb128 0x13
 4260 019e 00       		.byte	0
 4261 019f 00       		.byte	0
 4262 01a0 1D       		.uleb128 0x1d
 4263 01a1 2E       		.uleb128 0x2e
 4264 01a2 00       		.byte	0
 4265 01a3 3F       		.uleb128 0x3f
 4266 01a4 19       		.uleb128 0x19
 4267 01a5 3C       		.uleb128 0x3c
 4268 01a6 19       		.uleb128 0x19
 4269 01a7 6E       		.uleb128 0x6e
 4270 01a8 0E       		.uleb128 0xe
 4271 01a9 03       		.uleb128 0x3
 4272 01aa 0E       		.uleb128 0xe
 4273 01ab 3A       		.uleb128 0x3a
 4274 01ac 0B       		.uleb128 0xb
 4275 01ad 3B       		.uleb128 0x3b
 4276 01ae 0B       		.uleb128 0xb
 4277 01af 00       		.byte	0
 4278 01b0 00       		.byte	0
 4279 01b1 00       		.byte	0
 4280              		.section	.debug_loc,"",%progbits
 4281              	.Ldebug_loc0:
 4282              	.LLST0:
 4283 0000 02000000 		.4byte	.LVL2
 4284 0004 12000000 		.4byte	.LVL4
 4285 0008 0200     		.2byte	0x2
 4286 000a 30       		.byte	0x30
 4287 000b 9F       		.byte	0x9f
 4288 000c 12000000 		.4byte	.LVL4
 4289 0010 3C000000 		.4byte	.LVL11
 4290 0014 0100     		.2byte	0x1
 4291 0016 55       		.byte	0x55
 4292 0017 00000000 		.4byte	0
 4293 001b 00000000 		.4byte	0
 4294              	.LLST1:
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 98


 4295 001f 1E000000 		.4byte	.LVL7
 4296 0023 20000000 		.4byte	.LVL8
 4297 0027 0100     		.2byte	0x1
 4298 0029 50       		.byte	0x50
 4299 002a 20000000 		.4byte	.LVL8
 4300 002e 36000000 		.4byte	.LVL10
 4301 0032 0100     		.2byte	0x1
 4302 0034 54       		.byte	0x54
 4303 0035 00000000 		.4byte	0
 4304 0039 00000000 		.4byte	0
 4305              	.LLST2:
 4306 003d 02000000 		.4byte	.LVL12
 4307 0041 2E000000 		.4byte	.LVL19
 4308 0045 0200     		.2byte	0x2
 4309 0047 30       		.byte	0x30
 4310 0048 9F       		.byte	0x9f
 4311 0049 2E000000 		.4byte	.LVL19
 4312 004d 34000000 		.4byte	.LVL21
 4313 0051 0100     		.2byte	0x1
 4314 0053 54       		.byte	0x54
 4315 0054 34000000 		.4byte	.LVL21
 4316 0058 36000000 		.4byte	.LVL22
 4317 005c 0100     		.2byte	0x1
 4318 005e 50       		.byte	0x50
 4319 005f 36000000 		.4byte	.LVL22
 4320 0063 5A000000 		.4byte	.LVL29
 4321 0067 0100     		.2byte	0x1
 4322 0069 54       		.byte	0x54
 4323 006a 00000000 		.4byte	0
 4324 006e 00000000 		.4byte	0
 4325              	.LLST3:
 4326 0072 02000000 		.4byte	.LVL30
 4327 0076 08000000 		.4byte	.LVL31
 4328 007a 0400     		.2byte	0x4
 4329 007c 0A       		.byte	0xa
 4330 007d 2C01     		.2byte	0x12c
 4331 007f 9F       		.byte	0x9f
 4332 0080 08000000 		.4byte	.LVL31
 4333 0084 18000000 		.4byte	.LVL34
 4334 0088 0100     		.2byte	0x1
 4335 008a 54       		.byte	0x54
 4336 008b 4C000000 		.4byte	.LVL41
 4337 008f 7A000000 		.4byte	.LVL46
 4338 0093 0100     		.2byte	0x1
 4339 0095 54       		.byte	0x54
 4340 0096 7A000000 		.4byte	.LVL46
 4341 009a AE000000 		.4byte	.LVL55
 4342 009e 0400     		.2byte	0x4
 4343 00a0 74       		.byte	0x74
 4344 00a1 B97E     		.sleb128 -199
 4345 00a3 9F       		.byte	0x9f
 4346 00a4 AE000000 		.4byte	.LVL55
 4347 00a8 DC000000 		.4byte	.LVL60
 4348 00ac 0100     		.2byte	0x1
 4349 00ae 54       		.byte	0x54
 4350 00af DC000000 		.4byte	.LVL60
 4351 00b3 E4000000 		.4byte	.LVL61
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 99


 4352 00b7 0400     		.2byte	0x4
 4353 00b9 74       		.byte	0x74
 4354 00ba B97E     		.sleb128 -199
 4355 00bc 9F       		.byte	0x9f
 4356 00bd E4000000 		.4byte	.LVL61
 4357 00c1 F2000000 		.4byte	.LVL64
 4358 00c5 0100     		.2byte	0x1
 4359 00c7 54       		.byte	0x54
 4360 00c8 F2000000 		.4byte	.LVL64
 4361 00cc 26010000 		.4byte	.LVL73
 4362 00d0 0400     		.2byte	0x4
 4363 00d2 74       		.byte	0x74
 4364 00d3 B97E     		.sleb128 -199
 4365 00d5 9F       		.byte	0x9f
 4366 00d6 26010000 		.4byte	.LVL73
 4367 00da 54010000 		.4byte	.LVL78
 4368 00de 0100     		.2byte	0x1
 4369 00e0 54       		.byte	0x54
 4370 00e1 54010000 		.4byte	.LVL78
 4371 00e5 5A010000 		.4byte	.LVL79
 4372 00e9 0400     		.2byte	0x4
 4373 00eb 74       		.byte	0x74
 4374 00ec B97E     		.sleb128 -199
 4375 00ee 9F       		.byte	0x9f
 4376 00ef 7A010000 		.4byte	.LVL84
 4377 00f3 B2010000 		.4byte	.LVL91
 4378 00f7 0100     		.2byte	0x1
 4379 00f9 54       		.byte	0x54
 4380 00fa 00000000 		.4byte	0
 4381 00fe 00000000 		.4byte	0
 4382              	.LLST4:
 4383 0102 00000000 		.4byte	.LVL92
 4384 0106 0C000000 		.4byte	.LVL94
 4385 010a 0100     		.2byte	0x1
 4386 010c 50       		.byte	0x50
 4387 010d 0C000000 		.4byte	.LVL94
 4388 0111 1A000000 		.4byte	.LVL97
 4389 0115 0100     		.2byte	0x1
 4390 0117 57       		.byte	0x57
 4391 0118 1A000000 		.4byte	.LVL97
 4392 011c 1C000000 		.4byte	.LVL98
 4393 0120 0100     		.2byte	0x1
 4394 0122 50       		.byte	0x50
 4395 0123 1C000000 		.4byte	.LVL98
 4396 0127 A8000000 		.4byte	.LVL123
 4397 012b 0100     		.2byte	0x1
 4398 012d 57       		.byte	0x57
 4399 012e A8000000 		.4byte	.LVL123
 4400 0132 B8000000 		.4byte	.LFE70
 4401 0136 0400     		.2byte	0x4
 4402 0138 F3       		.byte	0xf3
 4403 0139 01       		.uleb128 0x1
 4404 013a 50       		.byte	0x50
 4405 013b 9F       		.byte	0x9f
 4406 013c 00000000 		.4byte	0
 4407 0140 00000000 		.4byte	0
 4408              	.LLST5:
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 100


 4409 0144 06000000 		.4byte	.LVL93
 4410 0148 2E000000 		.4byte	.LVL103
 4411 014c 0100     		.2byte	0x1
 4412 014e 54       		.byte	0x54
 4413 014f 00000000 		.4byte	0
 4414 0153 00000000 		.4byte	0
 4415              	.LLST7:
 4416 0157 16000000 		.4byte	.LVL96
 4417 015b 1A000000 		.4byte	.LVL97
 4418 015f 0400     		.2byte	0x4
 4419 0161 0A       		.byte	0xa
 4420 0162 007D     		.2byte	0x7d00
 4421 0164 9F       		.byte	0x9f
 4422 0165 26000000 		.4byte	.LVL100
 4423 0169 28000000 		.4byte	.LVL101
 4424 016d 0400     		.2byte	0x4
 4425 016f 0B       		.byte	0xb
 4426 0170 0083     		.2byte	0x8300
 4427 0172 9F       		.byte	0x9f
 4428 0173 00000000 		.4byte	0
 4429 0177 00000000 		.4byte	0
 4430              	.LLST8:
 4431 017b 16000000 		.4byte	.LVL96
 4432 017f 1A000000 		.4byte	.LVL97
 4433 0183 0200     		.2byte	0x2
 4434 0185 30       		.byte	0x30
 4435 0186 9F       		.byte	0x9f
 4436 0187 26000000 		.4byte	.LVL100
 4437 018b 28000000 		.4byte	.LVL101
 4438 018f 0200     		.2byte	0x2
 4439 0191 34       		.byte	0x34
 4440 0192 9F       		.byte	0x9f
 4441 0193 28000000 		.4byte	.LVL101
 4442 0197 A8000000 		.4byte	.LVL123
 4443 019b 0100     		.2byte	0x1
 4444 019d 56       		.byte	0x56
 4445 019e 00000000 		.4byte	0
 4446 01a2 00000000 		.4byte	0
 4447              	.LLST9:
 4448 01a6 58000000 		.4byte	.LVL111
 4449 01aa A8000000 		.4byte	.LVL123
 4450 01ae 0100     		.2byte	0x1
 4451 01b0 54       		.byte	0x54
 4452 01b1 00000000 		.4byte	0
 4453 01b5 00000000 		.4byte	0
 4454              	.LLST10:
 4455 01b9 B6000000 		.4byte	.LVL154
 4456 01bd B8000000 		.4byte	.LVL155
 4457 01c1 0200     		.2byte	0x2
 4458 01c3 30       		.byte	0x30
 4459 01c4 9F       		.byte	0x9f
 4460 01c5 B8000000 		.4byte	.LVL155
 4461 01c9 E8000000 		.4byte	.LVL162
 4462 01cd 0100     		.2byte	0x1
 4463 01cf 54       		.byte	0x54
 4464 01d0 00000000 		.4byte	0
 4465 01d4 00000000 		.4byte	0
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 101


 4466              	.LLST11:
 4467 01d8 E6000000 		.4byte	.LVL161
 4468 01dc EA000000 		.4byte	.LVL163
 4469 01e0 0200     		.2byte	0x2
 4470 01e2 30       		.byte	0x30
 4471 01e3 9F       		.byte	0x9f
 4472 01e4 EA000000 		.4byte	.LVL163
 4473 01e8 32010000 		.4byte	.LVL174
 4474 01ec 0100     		.2byte	0x1
 4475 01ee 54       		.byte	0x54
 4476 01ef 00000000 		.4byte	0
 4477 01f3 00000000 		.4byte	0
 4478              	.LLST12:
 4479 01f7 B2010000 		.4byte	.LVL192
 4480 01fb B8010000 		.4byte	.LVL193
 4481 01ff 0200     		.2byte	0x2
 4482 0201 30       		.byte	0x30
 4483 0202 9F       		.byte	0x9f
 4484 0203 B8010000 		.4byte	.LVL193
 4485 0207 D8010000 		.4byte	.LVL196
 4486 020b 0100     		.2byte	0x1
 4487 020d 52       		.byte	0x52
 4488 020e 00000000 		.4byte	0
 4489 0212 00000000 		.4byte	0
 4490              	.LLST13:
 4491 0216 4A010000 		.4byte	.LVL177
 4492 021a 4E010000 		.4byte	.LVL178
 4493 021e 0200     		.2byte	0x2
 4494 0220 30       		.byte	0x30
 4495 0221 9F       		.byte	0x9f
 4496 0222 4E010000 		.4byte	.LVL178
 4497 0226 86010000 		.4byte	.LVL186
 4498 022a 0100     		.2byte	0x1
 4499 022c 54       		.byte	0x54
 4500 022d 00000000 		.4byte	0
 4501 0231 00000000 		.4byte	0
 4502              	.LLST14:
 4503 0235 84010000 		.4byte	.LVL185
 4504 0239 88010000 		.4byte	.LVL187
 4505 023d 0200     		.2byte	0x2
 4506 023f 30       		.byte	0x30
 4507 0240 9F       		.byte	0x9f
 4508 0241 88010000 		.4byte	.LVL187
 4509 0245 DC010000 		.4byte	.LVL198
 4510 0249 0100     		.2byte	0x1
 4511 024b 54       		.byte	0x54
 4512 024c 00000000 		.4byte	0
 4513 0250 00000000 		.4byte	0
 4514              	.LLST15:
 4515 0254 B2010000 		.4byte	.LVL192
 4516 0258 B8010000 		.4byte	.LVL193
 4517 025c 0200     		.2byte	0x2
 4518 025e 30       		.byte	0x30
 4519 025f 9F       		.byte	0x9f
 4520 0260 B8010000 		.4byte	.LVL193
 4521 0264 DA010000 		.4byte	.LVL197
 4522 0268 0100     		.2byte	0x1
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 102


 4523 026a 53       		.byte	0x53
 4524 026b 00000000 		.4byte	0
 4525 026f 00000000 		.4byte	0
 4526              	.LLST16:
 4527 0273 22020000 		.4byte	.LVL205
 4528 0277 2C020000 		.4byte	.LVL206
 4529 027b 0200     		.2byte	0x2
 4530 027d 30       		.byte	0x30
 4531 027e 9F       		.byte	0x9f
 4532 027f 2C020000 		.4byte	.LVL206
 4533 0283 A8020000 		.4byte	.LFE66
 4534 0287 0100     		.2byte	0x1
 4535 0289 54       		.byte	0x54
 4536 028a 00000000 		.4byte	0
 4537 028e 00000000 		.4byte	0
 4538              	.LLST17:
 4539 0292 3E020000 		.4byte	.LVL210
 4540 0296 40020000 		.4byte	.LVL211
 4541 029a 0100     		.2byte	0x1
 4542 029c 50       		.byte	0x50
 4543 029d 40020000 		.4byte	.LVL211
 4544 02a1 56020000 		.4byte	.LVL214
 4545 02a5 0100     		.2byte	0x1
 4546 02a7 55       		.byte	0x55
 4547 02a8 00000000 		.4byte	0
 4548 02ac 00000000 		.4byte	0
 4549              		.section	.debug_aranges,"",%progbits
 4550 0000 4C000000 		.4byte	0x4c
 4551 0004 0200     		.2byte	0x2
 4552 0006 00000000 		.4byte	.Ldebug_info0
 4553 000a 04       		.byte	0x4
 4554 000b 00       		.byte	0
 4555 000c 0000     		.2byte	0
 4556 000e 0000     		.2byte	0
 4557 0010 00000000 		.4byte	.LFB64
 4558 0014 08000000 		.4byte	.LFE64-.LFB64
 4559 0018 00000000 		.4byte	.LFB65
 4560 001c 20000000 		.4byte	.LFE65-.LFB65
 4561 0020 00000000 		.4byte	.LFB67
 4562 0024 44000000 		.4byte	.LFE67-.LFB67
 4563 0028 00000000 		.4byte	.LFB68
 4564 002c 64000000 		.4byte	.LFE68-.LFB68
 4565 0030 00000000 		.4byte	.LFB69
 4566 0034 D0010000 		.4byte	.LFE69-.LFB69
 4567 0038 00000000 		.4byte	.LFB70
 4568 003c B8000000 		.4byte	.LFE70-.LFB70
 4569 0040 00000000 		.4byte	.LFB66
 4570 0044 A8020000 		.4byte	.LFE66-.LFB66
 4571 0048 00000000 		.4byte	0
 4572 004c 00000000 		.4byte	0
 4573              		.section	.debug_ranges,"",%progbits
 4574              	.Ldebug_ranges0:
 4575 0000 B2010000 		.4byte	.LBB7
 4576 0004 B4010000 		.4byte	.LBE7
 4577 0008 B6010000 		.4byte	.LBB8
 4578 000c D6010000 		.4byte	.LBE8
 4579 0010 00000000 		.4byte	0
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 103


 4580 0014 00000000 		.4byte	0
 4581 0018 00000000 		.4byte	.LFB64
 4582 001c 08000000 		.4byte	.LFE64
 4583 0020 00000000 		.4byte	.LFB65
 4584 0024 20000000 		.4byte	.LFE65
 4585 0028 00000000 		.4byte	.LFB67
 4586 002c 44000000 		.4byte	.LFE67
 4587 0030 00000000 		.4byte	.LFB68
 4588 0034 64000000 		.4byte	.LFE68
 4589 0038 00000000 		.4byte	.LFB69
 4590 003c D0010000 		.4byte	.LFE69
 4591 0040 00000000 		.4byte	.LFB70
 4592 0044 B8000000 		.4byte	.LFE70
 4593 0048 00000000 		.4byte	.LFB66
 4594 004c A8020000 		.4byte	.LFE66
 4595 0050 00000000 		.4byte	0
 4596 0054 00000000 		.4byte	0
 4597              		.section	.debug_line,"",%progbits
 4598              	.Ldebug_line0:
 4599 0000 40050000 		.section	.debug_str,"MS",%progbits,1
 4599      02003303 
 4599      00000201 
 4599      FB0E0D00 
 4599      01010101 
 4600              	.LASF87:
 4601 0000 43794465 		.ascii	"CyDelay\000"
 4601      6C617900 
 4602              	.LASF17:
 4603 0008 61726D4D 		.ascii	"armMoving\000"
 4603      6F76696E 
 4603      6700
 4604              	.LASF132:
 4605 0012 6D61696E 		.ascii	"main.c\000"
 4605      2E6300
 4606              	.LASF54:
 4607 0019 6F757470 		.ascii	"output\000"
 4607      757400
 4608              	.LASF81:
 4609 0020 69646163 		.ascii	"idac_value\000"
 4609      5F76616C 
 4609      756500
 4610              	.LASF28:
 4611 002b 73706565 		.ascii	"speed_right\000"
 4611      645F7269 
 4611      67687400 
 4612              	.LASF133:
 4613 0037 5C5C6164 		.ascii	"\\\\ad.monash.edu\\home\\User026\\bamcg3\\Documents"
 4613      2E6D6F6E 
 4613      6173682E 
 4613      6564755C 
 4613      686F6D65 
 4614 0064 5C476974 		.ascii	"\\GitHub\\ECE3091_Group17\\Group17RobotReal\\Group1"
 4614      4875625C 
 4614      45434533 
 4614      3039315F 
 4614      47726F75 
 4615 0093 37526F62 		.ascii	"7Robot.cydsn\000"
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 104


 4615      6F742E63 
 4615      7964736E 
 4615      00
 4616              	.LASF33:
 4617 00a0 756C7472 		.ascii	"ultrasonic_sensor\000"
 4617      61736F6E 
 4617      69635F73 
 4617      656E736F 
 4617      7200
 4618              	.LASF48:
 4619 00b2 7075636B 		.ascii	"puckPileLocation\000"
 4619      50696C65 
 4619      4C6F6361 
 4619      74696F6E 
 4619      00
 4620              	.LASF23:
 4621 00c3 66726F6E 		.ascii	"front_left\000"
 4621      745F6C65 
 4621      667400
 4622              	.LASF8:
 4623 00ce 756E7369 		.ascii	"unsigned int\000"
 4623      676E6564 
 4623      20696E74 
 4623      00
 4624              	.LASF134:
 4625 00db 64697374 		.ascii	"distance_set\000"
 4625      616E6365 
 4625      5F736574 
 4625      00
 4626              	.LASF101:
 4627 00e8 64697374 		.ascii	"distanceSensor\000"
 4627      616E6365 
 4627      53656E73 
 4627      6F7200
 4628              	.LASF93:
 4629 00f7 4D6F746F 		.ascii	"Motor_Left_Driver_WriteCompare\000"
 4629      725F4C65 
 4629      66745F44 
 4629      72697665 
 4629      725F5772 
 4630              	.LASF56:
 4631 0116 756C7472 		.ascii	"ultrasonic_distances_mm\000"
 4631      61736F6E 
 4631      69635F64 
 4631      69737461 
 4631      6E636573 
 4632              	.LASF9:
 4633 012e 5F5F696E 		.ascii	"__int32_t\000"
 4633      7433325F 
 4633      7400
 4634              	.LASF97:
 4635 0138 4D6F746F 		.ascii	"Motor_Right_Decoder_SetCounter\000"
 4635      725F5269 
 4635      6768745F 
 4635      4465636F 
 4635      6465725F 
 4636              	.LASF86:
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 105


 4637 0157 756C7472 		.ascii	"ultrasonicInterruptHandler\000"
 4637      61736F6E 
 4637      6963496E 
 4637      74657272 
 4637      75707448 
 4638              	.LASF40:
 4639 0172 7075636B 		.ascii	"puckRackIndex\000"
 4639      5261636B 
 4639      496E6465 
 4639      7800
 4640              	.LASF69:
 4641 0180 626C6F63 		.ascii	"blockEastClearance\000"
 4641      6B456173 
 4641      74436C65 
 4641      6172616E 
 4641      636500
 4642              	.LASF122:
 4643 0193 4D6F746F 		.ascii	"Motor_Left_Driver_Start\000"
 4643      725F4C65 
 4643      66745F44 
 4643      72697665 
 4643      725F5374 
 4644              	.LASF46:
 4645 01ab 73776565 		.ascii	"sweeping\000"
 4645      70696E67 
 4645      00
 4646              	.LASF19:
 4647 01b4 7075636B 		.ascii	"puck_scan\000"
 4647      5F736361 
 4647      6E00
 4648              	.LASF55:
 4649 01be 53504545 		.ascii	"SPEED\000"
 4649      4400
 4650              	.LASF89:
 4651 01c4 636F6C6F 		.ascii	"colourSensingOutput\000"
 4651      75725365 
 4651      6E73696E 
 4651      674F7574 
 4651      70757400 
 4652              	.LASF39:
 4653 01d8 7075636B 		.ascii	"puckConstructionPlanIndex\000"
 4653      436F6E73 
 4653      74727563 
 4653      74696F6E 
 4653      506C616E 
 4654              	.LASF96:
 4655 01f2 4D6F746F 		.ascii	"Motor_Left_Decoder_SetCounter\000"
 4655      725F4C65 
 4655      66745F44 
 4655      65636F64 
 4655      65725F53 
 4656              	.LASF123:
 4657 0210 4D6F746F 		.ascii	"Motor_Right_Driver_Start\000"
 4657      725F5269 
 4657      6768745F 
 4657      44726976 
 4657      65725F53 
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 106


 4658              	.LASF37:
 4659 0229 6D6F746F 		.ascii	"motor_testing\000"
 4659      725F7465 
 4659      7374696E 
 4659      6700
 4660              	.LASF98:
 4661 0237 4D6F746F 		.ascii	"Motor_Left_Driver_Sleep\000"
 4661      725F4C65 
 4661      66745F44 
 4661      72697665 
 4661      725F536C 
 4662              	.LASF11:
 4663 024f 666C6F61 		.ascii	"float\000"
 4663      7400
 4664              	.LASF128:
 4665 0255 536F6E69 		.ascii	"Sonic_StartEx\000"
 4665      635F5374 
 4665      61727445 
 4665      7800
 4666              	.LASF73:
 4667 0263 63757272 		.ascii	"currentPosition\000"
 4667      656E7450 
 4667      6F736974 
 4667      696F6E00 
 4668              	.LASF88:
 4669 0273 6368616E 		.ascii	"changeHeightToPuck\000"
 4669      67654865 
 4669      69676874 
 4669      546F5075 
 4669      636B00
 4670              	.LASF59:
 4671 0286 6D6F7669 		.ascii	"moving\000"
 4671      6E6700
 4672              	.LASF90:
 4673 028d 4D6F746F 		.ascii	"Motor_Left_Control_Write\000"
 4673      725F4C65 
 4673      66745F43 
 4673      6F6E7472 
 4673      6F6C5F57 
 4674              	.LASF7:
 4675 02a6 6C6F6E67 		.ascii	"long long unsigned int\000"
 4675      206C6F6E 
 4675      6720756E 
 4675      7369676E 
 4675      65642069 
 4676              	.LASF27:
 4677 02bd 73706565 		.ascii	"speed_left\000"
 4677      645F6C65 
 4677      667400
 4678              	.LASF63:
 4679 02c8 63757272 		.ascii	"currentPuckStackSize\000"
 4679      656E7450 
 4679      75636B53 
 4679      7461636B 
 4679      53697A65 
 4680              	.LASF129:
 4681 02dd 53746172 		.ascii	"Start_StartEx\000"
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 107


 4681      745F5374 
 4681      61727445 
 4681      7800
 4682              	.LASF78:
 4683 02eb 6D6F7665 		.ascii	"moveRightAllowed\000"
 4683      52696768 
 4683      74416C6C 
 4683      6F776564 
 4683      00
 4684              	.LASF42:
 4685 02fc 64726976 		.ascii	"driveStraightEnable\000"
 4685      65537472 
 4685      61696768 
 4685      74456E61 
 4685      626C6500 
 4686              	.LASF105:
 4687 0310 4D6F746F 		.ascii	"Motor_Right_Decoder_GetCounter\000"
 4687      725F5269 
 4687      6768745F 
 4687      4465636F 
 4687      6465725F 
 4688              	.LASF117:
 4689 032f 5261636B 		.ascii	"Rack_Servo_PWM_WriteCompare\000"
 4689      5F536572 
 4689      766F5F50 
 4689      574D5F57 
 4689      72697465 
 4690              	.LASF111:
 4691 034b 4144435F 		.ascii	"ADC_Start\000"
 4691      53746172 
 4691      7400
 4692              	.LASF115:
 4693 0355 636F6E74 		.ascii	"control_led_Write\000"
 4693      726F6C5F 
 4693      6C65645F 
 4693      57726974 
 4693      6500
 4694              	.LASF99:
 4695 0367 4D6F746F 		.ascii	"Motor_Right_Driver_Sleep\000"
 4695      725F5269 
 4695      6768745F 
 4695      44726976 
 4695      65725F53 
 4696              	.LASF131:
 4697 0380 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 4697      43313120 
 4697      352E342E 
 4697      31203230 
 4697      31363036 
 4698 03b3 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 4698      20726576 
 4698      6973696F 
 4698      6E203233 
 4698      37373135 
 4699 03e6 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 4699      66756E63 
 4699      74696F6E 
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 108


 4699      2D736563 
 4699      74696F6E 
 4700              	.LASF21:
 4701 040e 7075636B 		.ascii	"puck_detect\000"
 4701      5F646574 
 4701      65637400 
 4702              	.LASF50:
 4703 041a 64726976 		.ascii	"drivingBackwardFlag\000"
 4703      696E6742 
 4703      61636B77 
 4703      61726446 
 4703      6C616700 
 4704              	.LASF103:
 4705 042e 55415254 		.ascii	"UART_1_PutString\000"
 4705      5F315F50 
 4705      75745374 
 4705      72696E67 
 4705      00
 4706              	.LASF38:
 4707 043f 756C7472 		.ascii	"ultrasonic_testing\000"
 4707      61736F6E 
 4707      69635F74 
 4707      65737469 
 4707      6E6700
 4708              	.LASF104:
 4709 0452 4D6F746F 		.ascii	"Motor_Left_Decoder_GetCounter\000"
 4709      725F4C65 
 4709      66745F44 
 4709      65636F64 
 4709      65725F47 
 4710              	.LASF80:
 4711 0470 6D6F7665 		.ascii	"moveBackwardAllowed\000"
 4711      4261636B 
 4711      77617264 
 4711      416C6C6F 
 4711      77656400 
 4712              	.LASF83:
 4713 0484 504C414E 		.ascii	"PLAN_SCAN_VERTICAL\000"
 4713      5F534341 
 4713      4E5F5645 
 4713      52544943 
 4713      414C00
 4714              	.LASF92:
 4715 0497 4D6F746F 		.ascii	"Motor_Left_Driver_Wakeup\000"
 4715      725F4C65 
 4715      66745F44 
 4715      72697665 
 4715      725F5761 
 4716              	.LASF29:
 4717 04b0 6D6F7665 		.ascii	"moveUntil\000"
 4717      556E7469 
 4717      6C00
 4718              	.LASF31:
 4719 04ba 636F756E 		.ascii	"count_right\000"
 4719      745F7269 
 4719      67687400 
 4720              	.LASF119:
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 109


 4721 04c6 47726970 		.ascii	"Gripper_Servo_PWM_Start\000"
 4721      7065725F 
 4721      53657276 
 4721      6F5F5057 
 4721      4D5F5374 
 4722              	.LASF61:
 4723 04de 63757272 		.ascii	"currentOrientation\000"
 4723      656E744F 
 4723      7269656E 
 4723      74617469 
 4723      6F6E00
 4724              	.LASF22:
 4725 04f1 73747261 		.ascii	"straightAdjust\000"
 4725      69676874 
 4725      41646A75 
 4725      737400
 4726              	.LASF13:
 4727 0500 63686172 		.ascii	"char\000"
 4727      00
 4728              	.LASF125:
 4729 0505 4D6F746F 		.ascii	"Motor_Right_Decoder_Start\000"
 4729      725F5269 
 4729      6768745F 
 4729      4465636F 
 4729      6465725F 
 4730              	.LASF51:
 4731 051f 7475726E 		.ascii	"turningLeftFlag\000"
 4731      696E674C 
 4731      65667446 
 4731      6C616700 
 4732              	.LASF70:
 4733 052f 626C6F63 		.ascii	"blockWestClearance\000"
 4733      6B576573 
 4733      74436C65 
 4733      6172616E 
 4733      636500
 4734              	.LASF79:
 4735 0542 6D6F7665 		.ascii	"moveForwardAllowed\000"
 4735      466F7277 
 4735      61726441 
 4735      6C6C6F77 
 4735      656400
 4736              	.LASF77:
 4737 0555 6D6F7665 		.ascii	"moveLeftAllowed\000"
 4737      4C656674 
 4737      416C6C6F 
 4737      77656400 
 4738              	.LASF26:
 4739 0565 746F6C65 		.ascii	"tolerance\000"
 4739      72616E63 
 4739      6500
 4740              	.LASF95:
 4741 056f 4D6F746F 		.ascii	"Motor_Right_Driver_WriteCompare\000"
 4741      725F5269 
 4741      6768745F 
 4741      44726976 
 4741      65725F57 
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 110


 4742              	.LASF112:
 4743 058f 49444143 		.ascii	"IDAC8_1_Start\000"
 4743      385F315F 
 4743      53746172 
 4743      7400
 4744              	.LASF6:
 4745 059d 6C6F6E67 		.ascii	"long long int\000"
 4745      206C6F6E 
 4745      6720696E 
 4745      7400
 4746              	.LASF121:
 4747 05ab 47726970 		.ascii	"Gripper_Servo_PWM_Sleep\000"
 4747      7065725F 
 4747      53657276 
 4747      6F5F5057 
 4747      4D5F536C 
 4748              	.LASF66:
 4749 05c3 62656769 		.ascii	"beginNavigation\000"
 4749      6E4E6176 
 4749      69676174 
 4749      696F6E00 
 4750              	.LASF67:
 4751 05d3 70617468 		.ascii	"pathToPucks\000"
 4751      546F5075 
 4751      636B7300 
 4752              	.LASF57:
 4753 05df 636F6C6F 		.ascii	"colour_flag\000"
 4753      75725F66 
 4753      6C616700 
 4754              	.LASF32:
 4755 05eb 636F6D70 		.ascii	"compare\000"
 4755      61726500 
 4756              	.LASF64:
 4757 05f3 7075636B 		.ascii	"puckConstructionPlan\000"
 4757      436F6E73 
 4757      74727563 
 4757      74696F6E 
 4757      506C616E 
 4758              	.LASF85:
 4759 0608 64697374 		.ascii	"distance_returned_global\000"
 4759      616E6365 
 4759      5F726574 
 4759      75726E65 
 4759      645F676C 
 4760              	.LASF114:
 4761 0621 49444143 		.ascii	"IDAC8_1_SetValue\000"
 4761      385F315F 
 4761      53657456 
 4761      616C7565 
 4761      00
 4762              	.LASF94:
 4763 0632 4D6F746F 		.ascii	"Motor_Right_Driver_Wakeup\000"
 4763      725F5269 
 4763      6768745F 
 4763      44726976 
 4763      65725F57 
 4764              	.LASF43:
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 111


 4765 064c 63757272 		.ascii	"currentPuckRackScanningIndex\000"
 4765      656E7450 
 4765      75636B52 
 4765      61636B53 
 4765      63616E6E 
 4766              	.LASF116:
 4767 0669 5261636B 		.ascii	"Rack_Servo_PWM_Start\000"
 4767      5F536572 
 4767      766F5F50 
 4767      574D5F53 
 4767      74617274 
 4768              	.LASF65:
 4769 067e 686F7269 		.ascii	"horizontalPuckGrid\000"
 4769      7A6F6E74 
 4769      616C5075 
 4769      636B4772 
 4769      696400
 4770              	.LASF130:
 4771 0691 6D697368 		.ascii	"mishaSwivel\000"
 4771      61537769 
 4771      76656C00 
 4772              	.LASF82:
 4773 069d 636F6C6F 		.ascii	"colour_sensing_algorithm\000"
 4773      75725F73 
 4773      656E7369 
 4773      6E675F61 
 4773      6C676F72 
 4774              	.LASF14:
 4775 06b6 6C6F6E67 		.ascii	"long double\000"
 4775      20646F75 
 4775      626C6500 
 4776              	.LASF102:
 4777 06c2 73707269 		.ascii	"sprintf\000"
 4777      6E746600 
 4778              	.LASF49:
 4779 06ca 64726976 		.ascii	"drivingForwardFlag\000"
 4779      696E6746 
 4779      6F727761 
 4779      7264466C 
 4779      616700
 4780              	.LASF60:
 4781 06dd 756C7472 		.ascii	"ultrasonic_flag\000"
 4781      61736F6E 
 4781      69635F66 
 4781      6C616700 
 4782              	.LASF71:
 4783 06ed 7075636B 		.ascii	"puckEastClearance\000"
 4783      45617374 
 4783      436C6561 
 4783      72616E63 
 4783      6500
 4784              	.LASF106:
 4785 06ff 636F6C6F 		.ascii	"colourSensingInitialise\000"
 4785      75725365 
 4785      6E73696E 
 4785      67496E69 
 4785      7469616C 
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 112


 4786              	.LASF127:
 4787 0717 54696D65 		.ascii	"Timer_1_ReadStatusRegister\000"
 4787      725F315F 
 4787      52656164 
 4787      53746174 
 4787      75735265 
 4788              	.LASF30:
 4789 0732 636F756E 		.ascii	"count_left\000"
 4789      745F6C65 
 4789      667400
 4790              	.LASF75:
 4791 073d 64657369 		.ascii	"desiredOrientation\000"
 4791      7265644F 
 4791      7269656E 
 4791      74617469 
 4791      6F6E00
 4792              	.LASF2:
 4793 0750 73686F72 		.ascii	"short int\000"
 4793      7420696E 
 4793      7400
 4794              	.LASF91:
 4795 075a 4D6F746F 		.ascii	"Motor_Right_Control_Write\000"
 4795      725F5269 
 4795      6768745F 
 4795      436F6E74 
 4795      726F6C5F 
 4796              	.LASF4:
 4797 0774 6C6F6E67 		.ascii	"long int\000"
 4797      20696E74 
 4797      00
 4798              	.LASF41:
 4799 077d 49544D5F 		.ascii	"ITM_RxBuffer\000"
 4799      52784275 
 4799      66666572 
 4799      00
 4800              	.LASF109:
 4801 078a 5449415F 		.ascii	"TIA_1_Start\000"
 4801      315F5374 
 4801      61727400 
 4802              	.LASF118:
 4803 0796 5261636B 		.ascii	"Rack_Servo_PWM_Sleep\000"
 4803      5F536572 
 4803      766F5F50 
 4803      574D5F53 
 4803      6C656570 
 4804              	.LASF74:
 4805 07ab 64657369 		.ascii	"desiredPosition\000"
 4805      72656450 
 4805      6F736974 
 4805      696F6E00 
 4806              	.LASF52:
 4807 07bb 7475726E 		.ascii	"turningRightFlag\000"
 4807      696E6752 
 4807      69676874 
 4807      466C6167 
 4807      00
 4808              	.LASF120:
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 113


 4809 07cc 47726970 		.ascii	"Gripper_Servo_PWM_WriteCompare\000"
 4809      7065725F 
 4809      53657276 
 4809      6F5F5057 
 4809      4D5F5772 
 4810              	.LASF110:
 4811 07eb 55415254 		.ascii	"UART_1_Start\000"
 4811      5F315F53 
 4811      74617274 
 4811      00
 4812              	.LASF47:
 4813 07f8 626C6F63 		.ascii	"block_edge_location\000"
 4813      6B5F6564 
 4813      67655F6C 
 4813      6F636174 
 4813      696F6E00 
 4814              	.LASF68:
 4815 080c 70617468 		.ascii	"pathPastBlock\000"
 4815      50617374 
 4815      426C6F63 
 4815      6B00
 4816              	.LASF16:
 4817 081a 53746172 		.ascii	"StartIH\000"
 4817      74494800 
 4818              	.LASF36:
 4819 0822 73657276 		.ascii	"servo_testing\000"
 4819      6F5F7465 
 4819      7374696E 
 4819      6700
 4820              	.LASF15:
 4821 0830 73697A65 		.ascii	"sizetype\000"
 4821      74797065 
 4821      00
 4822              	.LASF107:
 4823 0839 636F6E74 		.ascii	"control_photodiode_Write\000"
 4823      726F6C5F 
 4823      70686F74 
 4823      6F64696F 
 4823      64655F57 
 4824              	.LASF5:
 4825 0852 6C6F6E67 		.ascii	"long unsigned int\000"
 4825      20756E73 
 4825      69676E65 
 4825      6420696E 
 4825      7400
 4826              	.LASF20:
 4827 0864 6D6F7665 		.ascii	"moveUntilPuck\000"
 4827      556E7469 
 4827      6C507563 
 4827      6B00
 4828              	.LASF10:
 4829 0872 696E7433 		.ascii	"int32_t\000"
 4829      325F7400 
 4830              	.LASF100:
 4831 087a 6D697368 		.ascii	"mishaMoveDynamic\000"
 4831      614D6F76 
 4831      6544796E 
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 114


 4831      616D6963 
 4831      00
 4832              	.LASF53:
 4833 088b 696E6974 		.ascii	"initialisation\000"
 4833      69616C69 
 4833      73617469 
 4833      6F6E00
 4834              	.LASF24:
 4835 089a 66726F6E 		.ascii	"front_right\000"
 4835      745F7269 
 4835      67687400 
 4836              	.LASF1:
 4837 08a6 756E7369 		.ascii	"unsigned char\000"
 4837      676E6564 
 4837      20636861 
 4837      7200
 4838              	.LASF113:
 4839 08b4 49444143 		.ascii	"IDAC8_1_SetRange\000"
 4839      385F315F 
 4839      53657452 
 4839      616E6765 
 4839      00
 4840              	.LASF44:
 4841 08c5 7075636B 		.ascii	"puckRackColours\000"
 4841      5261636B 
 4841      436F6C6F 
 4841      75727300 
 4842              	.LASF45:
 4843 08d5 7075636B 		.ascii	"puckRackOffsetsFromWest\000"
 4843      5261636B 
 4843      4F666673 
 4843      65747346 
 4843      726F6D57 
 4844              	.LASF58:
 4845 08ed 73746174 		.ascii	"state\000"
 4845      6500
 4846              	.LASF124:
 4847 08f3 4D6F746F 		.ascii	"Motor_Left_Decoder_Start\000"
 4847      725F4C65 
 4847      66745F44 
 4847      65636F64 
 4847      65725F53 
 4848              	.LASF25:
 4849 090c 64696666 		.ascii	"difference\000"
 4849      6572656E 
 4849      636500
 4850              	.LASF76:
 4851 0917 6D6F7665 		.ascii	"moveNow\000"
 4851      4E6F7700 
 4852              	.LASF84:
 4853 091f 63757272 		.ascii	"current_stage\000"
 4853      656E745F 
 4853      73746167 
 4853      6500
 4854              	.LASF126:
 4855 092d 54696D65 		.ascii	"Timer_1_Start\000"
 4855      725F315F 
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\cc0nWH3r.s 			page 115


 4855      53746172 
 4855      7400
 4856              	.LASF0:
 4857 093b 7369676E 		.ascii	"signed char\000"
 4857      65642063 
 4857      68617200 
 4858              	.LASF108:
 4859 0947 61726D43 		.ascii	"armClose\000"
 4859      6C6F7365 
 4859      00
 4860              	.LASF3:
 4861 0950 73686F72 		.ascii	"short unsigned int\000"
 4861      7420756E 
 4861      7369676E 
 4861      65642069 
 4861      6E7400
 4862              	.LASF135:
 4863 0963 6D61696E 		.ascii	"main\000"
 4863      00
 4864              	.LASF35:
 4865 0968 636F6C6F 		.ascii	"colour_calibration\000"
 4865      75725F63 
 4865      616C6962 
 4865      72617469 
 4865      6F6E00
 4866              	.LASF18:
 4867 097b 7075636B 		.ascii	"puck_correct\000"
 4867      5F636F72 
 4867      72656374 
 4867      00
 4868              	.LASF12:
 4869 0988 646F7562 		.ascii	"double\000"
 4869      6C6500
 4870              	.LASF62:
 4871 098f 72756E6E 		.ascii	"running\000"
 4871      696E6700 
 4872              	.LASF72:
 4873 0997 7075636B 		.ascii	"puckWestClearance\000"
 4873      57657374 
 4873      436C6561 
 4873      72616E63 
 4873      6500
 4874              	.LASF34:
 4875 09a9 64697374 		.ascii	"distance_sensor\000"
 4875      616E6365 
 4875      5F73656E 
 4875      736F7200 
 4876              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
