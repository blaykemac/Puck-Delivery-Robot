ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.TIH,"ax",%progbits
  20              		.align	2
  21              		.global	TIH
  22              		.thumb
  23              		.thumb_func
  24              		.type	TIH, %function
  25              	TIH:
  26              	.LFB64:
  27              		.file 1 "main.c"
   1:main.c        **** 
   2:main.c        **** /* ========================================
   3:main.c        ****  *
   4:main.c        ****  * Copyright Group 17, 2019
   5:main.c        ****  * All Rights Reserved
   6:main.c        ****  * UNPUBLISHED, LICENSED SOFTWARE.
   7:main.c        ****  *
   8:main.c        ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   9:main.c        ****  * WHICH IS THE PROPERTY OF Blayke, Misha, Nidhin.
  10:main.c        ****  *
  11:main.c        ****  * ========================================
  12:main.c        **** */
  13:main.c        **** 
  14:main.c        **** // * PSOC LIBRARY * //
  15:main.c        **** #include "project.h"
  16:main.c        **** 
  17:main.c        **** // * C LIBRARIES * // 
  18:main.c        **** #include <stdio.h>
  19:main.c        **** #include <math.h>
  20:main.c        **** 
  21:main.c        **** // * OUR LIBRARIES * //
  22:main.c        **** #include "main.h"
  23:main.c        **** #include "colour.h"
  24:main.c        **** #include "ultrasonic.h" 
  25:main.c        **** #include "dcmotor.h"
  26:main.c        **** #include "servo.h"
  27:main.c        **** #include "customMath.h"
  28:main.c        **** 
  29:main.c        **** 
  30:main.c        **** extern char output[32];   
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 2


  31:main.c        **** 
  32:main.c        **** // * STATE VARIABLES * //
  33:main.c        **** int state = STATE_SCAN_PLAN;
  34:main.c        **** int running = 1;
  35:main.c        **** int sweeping = 0;
  36:main.c        **** float block_edge_location[4] = {0,0,0,0}; // N E S W edge positions respectively
  37:main.c        **** 
  38:main.c        **** // * PUCK CONSTRUCTION VARIABLES * //
  39:main.c        **** int currentPuckStackSize = 0; // How many pucks are currently on the construction plate
  40:main.c        **** int puckRackColours[5] = {BLANK,BLANK,BLANK,BLANK,BLANK}; // 5 slots in puck rack.
  41:main.c        **** int puckConstructionPlan[3] = {BLANK,BLANK,BLANK};
  42:main.c        **** int currentPuckRackScanningIndex = 0;
  43:main.c        **** int puckRackOffsetsFromWest[5] = {PUCK_RACK_0_WEST_DISTANCE,
  44:main.c        ****                                 PUCK_RACK_1_WEST_DISTANCE,
  45:main.c        ****                                 PUCK_RACK_2_WEST_DISTANCE,
  46:main.c        ****                                 PUCK_RACK_3_WEST_DISTANCE,
  47:main.c        ****                                 PUCK_RACK_4_WEST_DISTANCE };
  48:main.c        **** 
  49:main.c        **** float horizontalPuckGrid = 0;
  50:main.c        **** 
  51:main.c        **** // * NAVIGATION AND POSITION VARIABLES * //
  52:main.c        **** 
  53:main.c        **** int beginNavigation = 0; // Allow us to break out of the intial phase when powered up
  54:main.c        **** 
  55:main.c        **** int pathToPucks; // This will give us a corridor that we should initially take when trying to go to
  56:main.c        **** int pathPastBlock;
  57:main.c        **** 
  58:main.c        **** float currentPosition[2] = {0,0};
  59:main.c        **** float desiredPosition[2];
  60:main.c        **** int currentOrientation = 90; //in degrees (convert to radians when needed)- 90 assuming we start fa
  61:main.c        **** int desiredOrientation;
  62:main.c        **** 
  63:main.c        **** short int moveNow = 1; //This is a flag that lets the main program tell the moving functions
  64:main.c        **** //whethe we want the robot to be moving or not. For example, when we need to operate servos
  65:main.c        **** //the main program would set moveNow to FALSE.
  66:main.c        **** 
  67:main.c        **** //The four flags below let the rest of the program know if the robot is trying to drive 
  68:main.c        **** //forward or back, turn left or right. At the start of every motion, turn these flags on
  69:main.c        **** //at the end turn them off.
  70:main.c        **** short int drivingForwardFlag = 0;
  71:main.c        **** short int drivingBackwardFlag = 0;
  72:main.c        **** short int turningLeftFlag = 0;
  73:main.c        **** short int turningRightFlag = 0;
  74:main.c        **** 
  75:main.c        **** //These flags will be used by the main program to allow the robot to move in certain directions
  76:main.c        **** short int moveLeftAllowed;
  77:main.c        **** short int moveRightAllowed;
  78:main.c        **** short int moveForwardAllowed;
  79:main.c        **** short int moveBackwardAllowed;
  80:main.c        **** 
  81:main.c        **** 
  82:main.c        **** // * COLOUR VARIABLES * //
  83:main.c        **** 
  84:main.c        **** int idac_value = 0;  
  85:main.c        **** int colour_flag = 1;                    // sets which photodiode to use 
  86:main.c        **** int colour_sensing_algorithm = 0;      // Determines which colour sensing algorithm to use:
  87:main.c        ****                                                 // 0: Wall algorithm
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 3


  88:main.c        ****                                             // 1: Claw algorithm
  89:main.c        ****                                                 // 2: old algorithm
  90:main.c        **** 
  91:main.c        **** int moving = 0; // Temp to stop while loop from repeated runs of scanning plan code
  92:main.c        **** 
  93:main.c        **** const int PLAN_SCAN_VERTICAL = 10; // Set to ultrasonic distance at the home base 
  94:main.c        **** 
  95:main.c        **** int current_stage = 1;      // There are 3 stages, we start at 1
  96:main.c        **** 
  97:main.c        **** 
  98:main.c        **** // * INTERRUPT HANDLING * // 
  99:main.c        **** CY_ISR(TIH)                             // Ultrasonic ISR Definition
 100:main.c        **** {
  28              		.loc 1 100 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 08B5     		push	{r3, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 3, -8
  35              		.cfi_offset 14, -4
 101:main.c        ****     ultrasonicInterruptHandler();
  36              		.loc 1 101 0
  37 0002 FFF7FEFF 		bl	ultrasonicInterruptHandler
  38              	.LVL0:
  39 0006 08BD     		pop	{r3, pc}
  40              		.cfi_endproc
  41              	.LFE64:
  42              		.size	TIH, .-TIH
  43              		.section	.text.StartIH,"ax",%progbits
  44              		.align	2
  45              		.global	StartIH
  46              		.thumb
  47              		.thumb_func
  48              		.type	StartIH, %function
  49              	StartIH:
  50              	.LFB65:
 102:main.c        **** }
 103:main.c        **** 
 104:main.c        **** CY_ISR(StartIH)                             // Ultrasonic ISR Definition
 105:main.c        **** {
  51              		.loc 1 105 0
  52              		.cfi_startproc
  53              		@ args = 0, pretend = 0, frame = 0
  54              		@ frame_needed = 0, uses_anonymous_args = 0
  55 0000 08B5     		push	{r3, lr}
  56              		.cfi_def_cfa_offset 8
  57              		.cfi_offset 3, -8
  58              		.cfi_offset 14, -4
 106:main.c        ****     CyDelay(100);
  59              		.loc 1 106 0
  60 0002 6420     		movs	r0, #100
  61 0004 FFF7FEFF 		bl	CyDelay
  62              	.LVL1:
 107:main.c        ****     
 108:main.c        ****     beginNavigation = 1;
  63              		.loc 1 108 0
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 4


  64 0008 0122     		movs	r2, #1
  65 000a 034B     		ldr	r3, .L5
  66 000c 1A60     		str	r2, [r3]
 109:main.c        ****     colour_flag = 0; 
  67              		.loc 1 109 0
  68 000e 0022     		movs	r2, #0
  69 0010 024B     		ldr	r3, .L5+4
  70 0012 1A60     		str	r2, [r3]
  71 0014 08BD     		pop	{r3, pc}
  72              	.L6:
  73 0016 00BF     		.align	2
  74              	.L5:
  75 0018 00000000 		.word	.LANCHOR0
  76 001c 00000000 		.word	.LANCHOR1
  77              		.cfi_endproc
  78              	.LFE65:
  79              		.size	StartIH, .-StartIH
  80              		.section	.text.Encoder_Counts_1_IH,"ax",%progbits
  81              		.align	2
  82              		.global	Encoder_Counts_1_IH
  83              		.thumb
  84              		.thumb_func
  85              		.type	Encoder_Counts_1_IH, %function
  86              	Encoder_Counts_1_IH:
  87              	.LFB66:
 110:main.c        **** }
 111:main.c        ****  
 112:main.c        **** //Interrupt service routines for dcmotor function
 113:main.c        **** CY_ISR(Encoder_Counts_1_IH){
  88              		.loc 1 113 0
  89              		.cfi_startproc
  90              		@ args = 0, pretend = 0, frame = 0
  91              		@ frame_needed = 0, uses_anonymous_args = 0
  92 0000 08B5     		push	{r3, lr}
  93              		.cfi_def_cfa_offset 8
  94              		.cfi_offset 3, -8
  95              		.cfi_offset 14, -4
 114:main.c        ****     stopMotor1AndUpdate();
  96              		.loc 1 114 0
  97 0002 FFF7FEFF 		bl	stopMotor1AndUpdate
  98              	.LVL2:
  99 0006 08BD     		pop	{r3, pc}
 100              		.cfi_endproc
 101              	.LFE66:
 102              		.size	Encoder_Counts_1_IH, .-Encoder_Counts_1_IH
 103              		.section	.text.Encoder_Counts_2_IH,"ax",%progbits
 104              		.align	2
 105              		.global	Encoder_Counts_2_IH
 106              		.thumb
 107              		.thumb_func
 108              		.type	Encoder_Counts_2_IH, %function
 109              	Encoder_Counts_2_IH:
 110              	.LFB67:
 115:main.c        **** }
 116:main.c        **** 
 117:main.c        **** CY_ISR(Encoder_Counts_2_IH){
 111              		.loc 1 117 0
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 5


 112              		.cfi_startproc
 113              		@ args = 0, pretend = 0, frame = 0
 114              		@ frame_needed = 0, uses_anonymous_args = 0
 115 0000 08B5     		push	{r3, lr}
 116              		.cfi_def_cfa_offset 8
 117              		.cfi_offset 3, -8
 118              		.cfi_offset 14, -4
 118:main.c        ****     stopMotor2AndUpdate();
 119              		.loc 1 118 0
 120 0002 FFF7FEFF 		bl	stopMotor2AndUpdate
 121              	.LVL3:
 122 0006 08BD     		pop	{r3, pc}
 123              		.cfi_endproc
 124              	.LFE67:
 125              		.size	Encoder_Counts_2_IH, .-Encoder_Counts_2_IH
 126              		.section	.text.Drift_Check_IH,"ax",%progbits
 127              		.align	2
 128              		.global	Drift_Check_IH
 129              		.thumb
 130              		.thumb_func
 131              		.type	Drift_Check_IH, %function
 132              	Drift_Check_IH:
 133              	.LFB68:
 119:main.c        **** }
 120:main.c        **** 
 121:main.c        **** CY_ISR(Drift_Check_IH){    
 134              		.loc 1 121 0
 135              		.cfi_startproc
 136              		@ args = 0, pretend = 0, frame = 0
 137              		@ frame_needed = 0, uses_anonymous_args = 0
 138 0000 08B5     		push	{r3, lr}
 139              		.cfi_def_cfa_offset 8
 140              		.cfi_offset 3, -8
 141              		.cfi_offset 14, -4
 122:main.c        ****     Drift_Check_Timer_ReadStatusRegister(); //Clears the interrupt
 142              		.loc 1 122 0
 143 0002 FFF7FEFF 		bl	Drift_Check_Timer_ReadStatusRegister
 144              	.LVL4:
 123:main.c        ****     Drift_Check_Timer_Stop(); //Stops the timer
 145              		.loc 1 123 0
 146 0006 FFF7FEFF 		bl	Drift_Check_Timer_Stop
 147              	.LVL5:
 124:main.c        ****     motor1EncoderCounts = Motor_1_Encoder_Counts_ReadCounter();
 148              		.loc 1 124 0
 149 000a FFF7FEFF 		bl	Motor_1_Encoder_Counts_ReadCounter
 150              	.LVL6:
 151 000e 044B     		ldr	r3, .L13
 152 0010 1860     		str	r0, [r3]
 125:main.c        ****     motor2EncoderCounts = Motor_2_Encoder_Counts_ReadCounter();
 153              		.loc 1 125 0
 154 0012 FFF7FEFF 		bl	Motor_2_Encoder_Counts_ReadCounter
 155              	.LVL7:
 156 0016 034B     		ldr	r3, .L13+4
 157 0018 1860     		str	r0, [r3]
 126:main.c        ****     driftCorrect(); //Does checking
 158              		.loc 1 126 0
 159 001a FFF7FEFF 		bl	driftCorrect
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 6


 160              	.LVL8:
 161 001e 08BD     		pop	{r3, pc}
 162              	.L14:
 163              		.align	2
 164              	.L13:
 165 0020 00000000 		.word	motor1EncoderCounts
 166 0024 00000000 		.word	motor2EncoderCounts
 167              		.cfi_endproc
 168              	.LFE68:
 169              		.size	Drift_Check_IH, .-Drift_Check_IH
 170              		.section	.text.main,"ax",%progbits
 171              		.align	2
 172              		.global	main
 173              		.thumb
 174              		.thumb_func
 175              		.type	main, %function
 176              	main:
 177              	.LFB69:
 127:main.c        **** }
 128:main.c        **** 
 129:main.c        **** 
 130:main.c        **** int main(void)
 131:main.c        **** {
 178              		.loc 1 131 0
 179              		.cfi_startproc
 180              		@ args = 0, pretend = 0, frame = 0
 181              		@ frame_needed = 0, uses_anonymous_args = 0
 182 0000 38B5     		push	{r3, r4, r5, lr}
 183              		.cfi_def_cfa_offset 16
 184              		.cfi_offset 3, -16
 185              		.cfi_offset 4, -12
 186              		.cfi_offset 5, -8
 187              		.cfi_offset 14, -4
 132:main.c        ****     CyGlobalIntEnable; /* Enable global interrupts. */
 188              		.loc 1 132 0
 189              		.syntax unified
 190              	@ 132 "main.c" 1
 191 0002 62B6     		CPSIE   i
 192              	@ 0 "" 2
 133:main.c        **** 
 134:main.c        ****     
 135:main.c        ****     TIA_1_Start();
 193              		.loc 1 135 0
 194              		.thumb
 195              		.syntax unified
 196 0004 FFF7FEFF 		bl	TIA_1_Start
 197              	.LVL9:
 136:main.c        ****     UART_1_Start();
 198              		.loc 1 136 0
 199 0008 FFF7FEFF 		bl	UART_1_Start
 200              	.LVL10:
 137:main.c        ****     UART_1_PutString("UART commencing... \n");
 201              		.loc 1 137 0
 202 000c 3648     		ldr	r0, .L19
 203 000e FFF7FEFF 		bl	UART_1_PutString
 204              	.LVL11:
 138:main.c        ****     ADC_Start();
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 7


 205              		.loc 1 138 0
 206 0012 FFF7FEFF 		bl	ADC_Start
 207              	.LVL12:
 139:main.c        ****     IDAC8_1_Start();
 208              		.loc 1 139 0
 209 0016 FFF7FEFF 		bl	IDAC8_1_Start
 210              	.LVL13:
 140:main.c        ****     
 141:main.c        ****     // DEBUGGING:
 142:main.c        ****     int colour_calibration = FALSE;             // Do we want to calibrate the sensor? 
 143:main.c        ****     int servo_testing = FALSE;                  // Do the servos need to be tested?      
 144:main.c        ****     
 145:main.c        ****     // IDAC initialisation: 
 146:main.c        ****     IDAC8_1_SetRange(IDAC8_1_RANGE_32uA);       // Sets the range between 0 and 32uA
 211              		.loc 1 146 0
 212 001a 0020     		movs	r0, #0
 213 001c FFF7FEFF 		bl	IDAC8_1_SetRange
 214              	.LVL14:
 147:main.c        ****     IDAC8_1_SetValue(idac_value);               // set a value between 0 and 255
 215              		.loc 1 147 0
 216 0020 324D     		ldr	r5, .L19+4
 217 0022 2879     		ldrb	r0, [r5, #4]	@ zero_extendqisi2
 218 0024 FFF7FEFF 		bl	IDAC8_1_SetValue
 219              	.LVL15:
 148:main.c        ****     
 149:main.c        ****     // Colour Sensing Initialisation & Debugging:
 150:main.c        ****     colour_sensing_algorithm = 0;
 220              		.loc 1 150 0
 221 0028 0024     		movs	r4, #0
 222 002a AC60     		str	r4, [r5, #8]
 151:main.c        ****     control_photodiode_Write(colour_sensing_algorithm);            // controls which photodiode is 
 223              		.loc 1 151 0
 224 002c 2046     		mov	r0, r4
 225 002e FFF7FEFF 		bl	control_photodiode_Write
 226              	.LVL16:
 152:main.c        ****                                                 // 0: wall
 153:main.c        ****                                                 // 1: claw
 154:main.c        ****     control_led_Write(1);   CyDelay(500);  // Ensures all the RGBs are working
 227              		.loc 1 154 0
 228 0032 0120     		movs	r0, #1
 229 0034 FFF7FEFF 		bl	control_led_Write
 230              	.LVL17:
 231 0038 4FF4FA70 		mov	r0, #500
 232 003c FFF7FEFF 		bl	CyDelay
 233              	.LVL18:
 155:main.c        ****     control_led_Write(2);   CyDelay(500);
 234              		.loc 1 155 0
 235 0040 0220     		movs	r0, #2
 236 0042 FFF7FEFF 		bl	control_led_Write
 237              	.LVL19:
 238 0046 4FF4FA70 		mov	r0, #500
 239 004a FFF7FEFF 		bl	CyDelay
 240              	.LVL20:
 156:main.c        ****     control_led_Write(3);   CyDelay(500);
 241              		.loc 1 156 0
 242 004e 0320     		movs	r0, #3
 243 0050 FFF7FEFF 		bl	control_led_Write
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 8


 244              	.LVL21:
 245 0054 4FF4FA70 		mov	r0, #500
 246 0058 FFF7FEFF 		bl	CyDelay
 247              	.LVL22:
 157:main.c        ****     control_led_Write(0);   CyDelay(500);
 248              		.loc 1 157 0
 249 005c 2046     		mov	r0, r4
 250 005e FFF7FEFF 		bl	control_led_Write
 251              	.LVL23:
 252 0062 4FF4FA70 		mov	r0, #500
 253 0066 FFF7FEFF 		bl	CyDelay
 254              	.LVL24:
 158:main.c        ****     ColourSensingInitialise();                  // Initialises the colour sensor
 255              		.loc 1 158 0
 256 006a FFF7FEFF 		bl	ColourSensingInitialise
 257              	.LVL25:
 159:main.c        ****     
 160:main.c        **** 
 161:main.c        ****     //Servos for the arm instatination
 162:main.c        ****     Rack_Servo_PWM_Start();
 258              		.loc 1 162 0
 259 006e FFF7FEFF 		bl	Rack_Servo_PWM_Start
 260              	.LVL26:
 163:main.c        ****     Rack_Servo_PWM_WriteCompare(1000);          // BRINGs rack to highest position, so not to mess 
 261              		.loc 1 163 0
 262 0072 4FF47A70 		mov	r0, #1000
 263 0076 FFF7FEFF 		bl	Rack_Servo_PWM_WriteCompare
 264              	.LVL27:
 164:main.c        ****     CyDelay(500);
 265              		.loc 1 164 0
 266 007a 4FF4FA70 		mov	r0, #500
 267 007e FFF7FEFF 		bl	CyDelay
 268              	.LVL28:
 165:main.c        ****     Rack_Servo_PWM_Sleep();
 269              		.loc 1 165 0
 270 0082 FFF7FEFF 		bl	Rack_Servo_PWM_Sleep
 271              	.LVL29:
 166:main.c        ****     
 167:main.c        ****     Gripper_Servo_PWM_Start();
 272              		.loc 1 167 0
 273 0086 FFF7FEFF 		bl	Gripper_Servo_PWM_Start
 274              	.LVL30:
 168:main.c        ****     Gripper_Servo_PWM_WriteCompare(1120);       //This is the open gripper position
 275              		.loc 1 168 0
 276 008a 4FF48C60 		mov	r0, #1120
 277 008e FFF7FEFF 		bl	Gripper_Servo_PWM_WriteCompare
 278              	.LVL31:
 169:main.c        ****     CyDelay(500);
 279              		.loc 1 169 0
 280 0092 4FF4FA70 		mov	r0, #500
 281 0096 FFF7FEFF 		bl	CyDelay
 282              	.LVL32:
 170:main.c        ****     Gripper_Servo_PWM_Sleep();
 283              		.loc 1 170 0
 284 009a FFF7FEFF 		bl	Gripper_Servo_PWM_Sleep
 285              	.LVL33:
 171:main.c        ****     
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 9


 172:main.c        ****     // Ultrasonic Initialisation: 
 173:main.c        ****     
 174:main.c        ****         
 175:main.c        ****     // Timer and ISR instantiation
 176:main.c        ****     Timer_1_Start();
 286              		.loc 1 176 0
 287 009e FFF7FEFF 		bl	Timer_1_Start
 288              	.LVL34:
 177:main.c        ****     Timer_1_ReadStatusRegister();
 289              		.loc 1 177 0
 290 00a2 FFF7FEFF 		bl	Timer_1_ReadStatusRegister
 291              	.LVL35:
 178:main.c        ****     Sonic_StartEx(TIH);
 292              		.loc 1 178 0
 293 00a6 1248     		ldr	r0, .L19+8
 294 00a8 FFF7FEFF 		bl	Sonic_StartEx
 295              	.LVL36:
 179:main.c        ****     Start_StartEx(StartIH);
 296              		.loc 1 179 0
 297 00ac 1148     		ldr	r0, .L19+12
 298 00ae FFF7FEFF 		bl	Start_StartEx
 299              	.LVL37:
 180:main.c        ****     beginNavigation = 0;
 300              		.loc 1 180 0
 301 00b2 2C60     		str	r4, [r5]
 181:main.c        ****     
 182:main.c        ****     //Initialising DC motors
 183:main.c        ****     Motor_1_driver_Start();
 302              		.loc 1 183 0
 303 00b4 FFF7FEFF 		bl	Motor_1_driver_Start
 304              	.LVL38:
 184:main.c        ****     Motor_2_driver_Start();
 305              		.loc 1 184 0
 306 00b8 FFF7FEFF 		bl	Motor_2_driver_Start
 307              	.LVL39:
 185:main.c        ****     motorDutyCycleUpdate(0,0,0,0);//Have the motors stand still
 308              		.loc 1 185 0
 309 00bc 0020     		movs	r0, #0
 310 00be 0346     		mov	r3, r0
 311 00c0 0246     		mov	r2, r0
 312 00c2 0146     		mov	r1, r0
 313 00c4 FFF7FEFF 		bl	motorDutyCycleUpdate
 314              	.LVL40:
 186:main.c        ****     
 187:main.c        ****     //Initialising counters
 188:main.c        ****     Motor_1_Encoder_Counts_Start();
 315              		.loc 1 188 0
 316 00c8 FFF7FEFF 		bl	Motor_1_Encoder_Counts_Start
 317              	.LVL41:
 189:main.c        ****     Motor_2_Encoder_Counts_Start();
 318              		.loc 1 189 0
 319 00cc FFF7FEFF 		bl	Motor_2_Encoder_Counts_Start
 320              	.LVL42:
 190:main.c        ****     
 191:main.c        ****     //Initialising timers
 192:main.c        ****     Drift_Check_Timer_Start();
 321              		.loc 1 192 0
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 10


 322 00d0 FFF7FEFF 		bl	Drift_Check_Timer_Start
 323              	.LVL43:
 193:main.c        ****     
 194:main.c        ****     //Starts and enables the interrupts for the motor encoder counts
 195:main.c        ****     Encoder_Counts_1_Interrupt_StartEx(Encoder_Counts_1_IH); 
 324              		.loc 1 195 0
 325 00d4 0848     		ldr	r0, .L19+16
 326 00d6 FFF7FEFF 		bl	Encoder_Counts_1_Interrupt_StartEx
 327              	.LVL44:
 196:main.c        ****     Encoder_Counts_2_Interrupt_StartEx(Encoder_Counts_2_IH);
 328              		.loc 1 196 0
 329 00da 0848     		ldr	r0, .L19+20
 330 00dc FFF7FEFF 		bl	Encoder_Counts_2_Interrupt_StartEx
 331              	.LVL45:
 197:main.c        ****     Drift_Check_Interrupt_StartEx(Drift_Check_IH);		
 332              		.loc 1 197 0
 333 00e0 0748     		ldr	r0, .L19+24
 334 00e2 FFF7FEFF 		bl	Drift_Check_Interrupt_StartEx
 335              	.LVL46:
 336              	.L17:
 337 00e6 FEE7     		b	.L17
 338              	.L20:
 339              		.align	2
 340              	.L19:
 341 00e8 00000000 		.word	.LC0
 342 00ec 00000000 		.word	.LANCHOR0
 343 00f0 00000000 		.word	TIH
 344 00f4 00000000 		.word	StartIH
 345 00f8 00000000 		.word	Encoder_Counts_1_IH
 346 00fc 00000000 		.word	Encoder_Counts_2_IH
 347 0100 00000000 		.word	Drift_Check_IH
 348              		.cfi_endproc
 349              	.LFE69:
 350              		.size	main, .-main
 351              		.section	.text.armMoving,"ax",%progbits
 352              		.align	2
 353              		.global	armMoving
 354              		.thumb
 355              		.thumb_func
 356              		.type	armMoving, %function
 357              	armMoving:
 358              	.LFB70:
 198:main.c        **** 
 199:main.c        ****     // Main Loop for States
 200:main.c        ****         
 201:main.c        ****     for(;;)
 202:main.c        ****     {   
 203:main.c        ****         // Start button is pressed so quit sensing
 204:main.c        **** 
 205:main.c        ****         /*
 206:main.c        ****         while (beginNavigation == 0) {
 207:main.c        ****             distanceCheck();           
 208:main.c        ****             UART_1_PutString("\n");
 209:main.c        ****             CyDelay(1000); // Check distance once a second.
 210:main.c        ****                 
 211:main.c        ****         }
 212:main.c        ****         */
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 11


 213:main.c        **** 
 214:main.c        **** 
 215:main.c        ****         
 216:main.c        **** 
 217:main.c        ****         if (state == STATE_SCAN_PLAN) {              // colour sensing, while switch has not been p
 218:main.c        ****             
 219:main.c        ****             // Colour Calibration: 
 220:main.c        ****             if (colour_calibration)
 221:main.c        ****             {
 222:main.c        ****                 int lock = FALSE;
 223:main.c        ****                 do 
 224:main.c        ****                     {   
 225:main.c        ****                         if (lock == FALSE) 
 226:main.c        ****                         {
 227:main.c        ****                             
 228:main.c        ****                             changeHeightToPuck(1);
 229:main.c        **** 
 230:main.c        ****                             UART_1_PutString("Count \t BLANK \t RED \t GREEN \t BLUE \t \n");
 231:main.c        ****                             for (int i = 0; i < 50; i++)
 232:main.c        ****                             {
 233:main.c        ****                             sprintf(output, "%d \t", i);
 234:main.c        ****                             UART_1_PutString(output);
 235:main.c        ****                             ColourSensingCalibration(); 
 236:main.c        ****                             UART_1_PutString("\n");
 237:main.c        ****                             }         
 238:main.c        ****                             lock = TRUE;    
 239:main.c        ****                         }
 240:main.c        ****                 } while (lock == TRUE);    
 241:main.c        ****             }
 242:main.c        ****             
 243:main.c        ****             // Servo Testing:
 244:main.c        ****             if (servo_testing) 
 245:main.c        ****             {
 246:main.c        ****                 int lock = FALSE;
 247:main.c        ****                 do 
 248:main.c        ****                     {   
 249:main.c        ****                         if (lock == FALSE) 
 250:main.c        ****                         {
 251:main.c        ****                             UART_1_PutString("Servo Testing: ");
 252:main.c        ****                             
 253:main.c        ****                             armMoving();
 254:main.c        ****                             
 255:main.c        ****                             
 256:main.c        ****                             for(int i = 0; i < 4; i++)
 257:main.c        ****                             {
 258:main.c        ****                                 changeHeightToPuck(i);
 259:main.c        ****                                 CyDelay(1000);
 260:main.c        ****                             }
 261:main.c        **** 
 262:main.c        ****                             lock = TRUE;    
 263:main.c        ****                         }
 264:main.c        ****                 } while (lock == TRUE);    
 265:main.c        ****             }    
 266:main.c        ****                 
 267:main.c        ****                 
 268:main.c        ****             }
 269:main.c        ****             
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 12


 270:main.c        **** 
 271:main.c        ****             
 272:main.c        ****             /*
 273:main.c        ****             if (!moving){
 274:main.c        ****                 moving = 1;
 275:main.c        ****             if (initialisation){moveBackwardIndefinitely(); initialisation = 0;}
 276:main.c        ****             else {moveForwardIndefinitely();}        
 277:main.c        ****            
 278:main.c        ****             
 279:main.c        ****             moveAndAngle(SCAN_INITIALISE_HORIZONTAL,PLAN_SCAN_VERTICAL,WEST_ANGLE); // Move beyond 
 280:main.c        ****             
 281:main.c        ****             // Read the black wall
 282:main.c        ****             
 283:main.c        ****             for (currentPuckRackScanningIndex = 0; currentPuckRackScanningIndex <= 4; currentPuckRa
 284:main.c        ****                 moveAndAngle(puckRackOffsetsFromWest[currentPuckRackScanningIndex],PLAN_SCAN_VERTIC
 285:main.c        ****                 puckRackColours[currentPuckRackScanningIndex] = colourSensingOutput();
 286:main.c        ****             }
 287:main.c        **** 
 288:main.c        ****             
 289:main.c        ****             
 290:main.c        ****             int puckConstructionPlanIndex = 0; // Will be used to iterate through the 3 puck colour
 291:main.c        ****             
 292:main.c        ****             // Iterate over all 5 rack slots and place the 3 colours into puckConstructionPlan.
 293:main.c        ****             for (int puckRackIndex = 0; puckRackIndex < 5; puckRackIndex++){
 294:main.c        ****                 if (puckRackColours[puckRackIndex] != BLANK && puckConstructionPlanIndex != 3){
 295:main.c        ****                     puckConstructionPlan[puckConstructionPlanIndex] = puckRackColours[puckRackIndex
 296:main.c        ****                     puckConstructionPlanIndex++;
 297:main.c        ****                 }
 298:main.c        ****             }
 299:main.c        ****             
 300:main.c        **** 
 301:main.c        ****             */
 302:main.c        ****         }
 303:main.c        ****         
 304:main.c        ****         
 305:main.c        **** 
 306:main.c        ****     	if (state == STATE_LOCATE_BLOCK_AND_PUCKS){
 307:main.c        ****             
 308:main.c        ****             // Finding where the boundaries of the block are
 309:main.c        ****     		// Sweep across WEST to EAST until discrepancy
 310:main.c        ****             // But first sense the construction plan and then drive to wall and turn around to prep
 311:main.c        ****             
 312:main.c        ****             /*
 313:main.c        ****     		moveForwardIndefinitely();
 314:main.c        ****     		turnRight(180); // Now facing EAST wall
 315:main.c        ****     		moveForwardIndefinitely(); // Do this until we get to EAST wall
 316:main.c        ****             */
 317:main.c        ****             
 318:main.c        ****             moveAndAngle(20,20,EAST_ANGLE); // Move to a position near construction base in an EAST
 319:main.c        ****             moveForwardIndefinitely(); // Scan until we reach EAST wall.
 320:main.c        ****             
 321:main.c        ****             // Will now know the boundaries of the block.
 322:main.c        ****             // Figure out direction we want to travel
 323:main.c        ****             
 324:main.c        **** 
 325:main.c        ****             pathPastBlock = (block_edge_location[WEST] >= WIDTH_SENSOR_TO_SENSOR + SAFETY_MARGIN ? 
 326:main.c        ****             pathToPucks = (puckPileLocation < ARENA_WIDTH / 2 ? WEST:EAST);
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 13


 327:main.c        ****             
 328:main.c        ****             state = STATE_GO_TO_PUCKS;
 329:main.c        **** 	    }
 330:main.c        ****         
 331:main.c        ****         
 332:main.c        **** 
 333:main.c        ****         if (state == STATE_GO_TO_PUCKS){
 334:main.c        ****             if (pathPastBlock == WEST){
 335:main.c        ****                 if (pathToPucks != WEST) {
 336:main.c        ****                     moveAndAngle(SAFETY_MARGIN / 2 + WIDTH_SENSOR_TO_SENSOR / 2, ARENA_LENGTH - FRO
 337:main.c        ****                 }
 338:main.c        ****                 else {moveAndAngle(SAFETY_MARGIN / 2 + WIDTH_SENSOR_TO_SENSOR / 2, ARENA_LENGTH - F
 339:main.c        ****             }
 340:main.c        ****             else {
 341:main.c        ****                 if (pathToPucks != EAST) {
 342:main.c        ****                     moveAndAngle(ARENA_WIDTH - SAFETY_MARGIN / 2 - WIDTH_SENSOR_TO_SENSOR / 2, AREN
 343:main.c        ****                 }
 344:main.c        ****                 else {moveAndAngle(ARENA_WIDTH - SAFETY_MARGIN / 2 - WIDTH_SENSOR_TO_SENSOR / 2, AR
 345:main.c        ****             }
 346:main.c        ****             
 347:main.c        ****             // Now depending on if the pucks are in the corner or not, 
 348:main.c        ****             
 349:main.c        ****             // We are now in front of the pucks
 350:main.c        ****             state = STATE_FIND_REQUIRED_PUCK;
 351:main.c        ****         }
 352:main.c        ****         
 353:main.c        ****         
 354:main.c        ****         
 355:main.c        ****         if (state == STATE_FIND_REQUIRED_PUCK){
 356:main.c        ****             int requiredColour = puckConstructionPlan[currentPuckStackSize];
 357:main.c        ****             int puckFound = 0;
 358:main.c        ****             
 359:main.c        ****             
 360:main.c        ****             // Let's assume that we get to the east or west of the puck pile and we are as close to
 361:main.c        ****             if (roundDirection() == NORTH){
 362:main.c        **** 
 363:main.c        ****             }
 364:main.c        ****             else if (roundDirection() == EAST){
 365:main.c        ****                 // Poll ultrasonics, displaceRight until no longer see the pucks
 366:main.c        ****                 // Drive up to the middle puck
 367:main.c        ****                 // We know that we used moveAndAngle() to get to the exact vertical position of the
 368:main.c        ****                 moveForwardIndefinitely();
 369:main.c        ****                 
 370:main.c        ****                 // May need to displaceRight a bit to ensure that we are perfectly centered with th
 371:main.c        ****                 // Now we need to inch forward with the claw lifted
 372:main.c        ****                 // Also store the horizontal location of the pucks based off our current position. 
 373:main.c        ****                 
 374:main.c        ****                 horizontalPuckGrid = currentPosition[0]; // Take our horizontal position as a refer
 375:main.c        ****                 
 376:main.c        ****                 changeHeightToPuck(1); // Lift up enough so we dont hit the pucks when scanning the
 377:main.c        ****                 moveForward(DISTANCE_STOPPED_FROM_PUCK); // Move forward until colour sensor above 
 378:main.c        ****                
 379:main.c        ****                 if (colourSensingOutput() == puckConstructionPlan[currentPuckStackSize]){ 
 380:main.c        ****                     // This is the puck we need
 381:main.c        ****                     moveBackward(DISTANCE_STOPPED_FROM_PUCK); // Reverse to make room for lowering 
 382:main.c        ****                     lowerAndOpen(0); // We are grabbing the pucks from the ground.
 383:main.c        ****                     moveForward(DISTANCE_STOPPED_FROM_PUCK);
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 14


 384:main.c        ****                     closeAndRaise(1); // Lift above the height of the ground pucks
 385:main.c        **** 
 386:main.c        ****                 }
 387:main.c        ****                 
 388:main.c        ****                 // If the colour isn't what we need, we could pick it up and drop it somewhere out 
 389:main.c        ****                 else {
 390:main.c        ****                     moveBackward(DISTANCE_STOPPED_FROM_PUCK); // Need to check the next puck
 391:main.c        ****                     displaceLeft(5,22);
 392:main.c        ****                     changeHeightToPuck(1); // Lift up enough so we dont hit the pucks when scanning
 393:main.c        ****                     moveForward(DISTANCE_STOPPED_FROM_PUCK); // Move forward until colour sensor ab
 394:main.c        ****                     
 395:main.c        ****                     // Scan the next puck
 396:main.c        ****                     if (colourSensingOutput() == puckConstructionPlan[currentPuckStackSize]){ 
 397:main.c        ****                         // This is the puck we need
 398:main.c        ****                         moveBackward(DISTANCE_STOPPED_FROM_PUCK); // Reverse to make room for lower
 399:main.c        ****                         lowerAndOpen(0); // We are grabbing the pucks from the ground.
 400:main.c        ****                         moveForward(DISTANCE_STOPPED_FROM_PUCK);
 401:main.c        ****                         closeAndRaise(1); // Lift above the height of the ground pucks
 402:main.c        **** 
 403:main.c        ****                     }
 404:main.c        ****                     
 405:main.c        ****                     else {
 406:main.c        ****                         moveBackward(DISTANCE_STOPPED_FROM_PUCK); // Need to check the next puck
 407:main.c        ****                         displaceLeft(5,22);
 408:main.c        ****                         changeHeightToPuck(1); // Lift up enough so we dont hit the pucks when scan
 409:main.c        ****                         moveForward(DISTANCE_STOPPED_FROM_PUCK); // Move forward until colour senso
 410:main.c        ****                         
 411:main.c        ****                         if (colourSensingOutput() == puckConstructionPlan[currentPuckStackSize]){ 
 412:main.c        ****                             // This is the puck we need
 413:main.c        ****                             moveBackward(DISTANCE_STOPPED_FROM_PUCK); // Reverse to make room for l
 414:main.c        ****                             lowerAndOpen(0); // We are grabbing the pucks from the ground.
 415:main.c        ****                             moveForward(DISTANCE_STOPPED_FROM_PUCK);
 416:main.c        ****                             closeAndRaise(1); // Lift above the height of the ground pucks
 417:main.c        **** 
 418:main.c        ****                         }
 419:main.c        ****                     
 420:main.c        ****                     }
 421:main.c        ****                 }
 422:main.c        ****                 
 423:main.c        ****                 if (colourSensingOutput() == puckConstructionPlan[currentPuckStackSize]){ 
 424:main.c        ****                     // This is the puck we need
 425:main.c        ****                     moveBackward(DISTANCE_STOPPED_FROM_PUCK); // Reverse to make room for lowering 
 426:main.c        ****                     lowerAndOpen(0); // We are grabbing the pucks from the ground.
 427:main.c        ****                     moveForward(DISTANCE_STOPPED_FROM_PUCK);
 428:main.c        ****                     closeAndRaise(1); // Lift above the height of the ground pucks
 429:main.c        **** 
 430:main.c        ****                 }
 431:main.c        ****                 
 432:main.c        ****             }
 433:main.c        ****             
 434:main.c        ****             else if (roundDirection() == WEST){
 435:main.c        ****                 // Poll ultrasonics, displaceRight until no longer see the pucks
 436:main.c        ****                 // Drive up to the middle puck
 437:main.c        ****                 // We know that we used moveAndAngle() to get to the exact vertical position of the
 438:main.c        ****                 moveForwardIndefinitely();
 439:main.c        ****             }
 440:main.c        ****             
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 15


 441:main.c        ****             /*
 442:main.c        ****             while(!puckFound){
 443:main.c        ****                   
 444:main.c        ****             }
 445:main.c        ****             */
 446:main.c        ****         }
 447:main.c        ****         
 448:main.c        ****         if (state == STATE_DEPOSIT_PUCK){
 449:main.c        **** 
 450:main.c        ****             moveAndAngle(CONSTRUCTION_MIDPOINT,CONSTRUCTION_DISTANCE_FROM_WALL + 10, SOUTH_ANGLE); 
 451:main.c        ****             lowerAndOpen(currentPuckStackSize);
 452:main.c        ****             moveAndAngle(CONSTRUCTION_MIDPOINT,CONSTRUCTION_DISTANCE_FROM_WALL, SOUTH_ANGLE); // Ta
 453:main.c        ****             changeHeightToPuck(currentPuckStackSize + 1); // Lift claw above stack to avoid hitting
 454:main.c        ****             moveAndAngle(CONSTRUCTION_MIDPOINT,CONSTRUCTION_DISTANCE_FROM_WALL, SOUTH_ANGLE); // Ta
 455:main.c        **** 
 456:main.c        ****             
 457:main.c        ****             lowerAndOpen(current_stage);
 458:main.c        ****             changeHeightToPuck(current_stage + 1); // Lift claw above stack to avoid hitting the st
 459:main.c        ****             
 460:main.c        ****             current_stage++;
 461:main.c        ****             
 462:main.c        ****             if (current_stage == 3){state = STATE_PARK_HOME;}        // Returns to home 
 463:main.c        ****             
 464:main.c        ****         }
 465:main.c        ****         
 466:main.c        ****         if (state == STATE_PARK_HOME){
 467:main.c        ****             moveAndAngle(HOME_MIDPOINT, HOME_PARKING_DISTANCE, NORTH_ANGLE); // Should reverse into
 468:main.c        ****             
 469:main.c        ****             // Run code to stop robot entirely.
 470:main.c        ****         }
 471:main.c        ****         
 472:main.c        ****         
 473:main.c        **** }
 474:main.c        **** 
 475:main.c        **** void armMoving(void){
 359              		.loc 1 475 0
 360              		.cfi_startproc
 361              		@ args = 0, pretend = 0, frame = 0
 362              		@ frame_needed = 0, uses_anonymous_args = 0
 363 0000 38B5     		push	{r3, r4, r5, lr}
 364              		.cfi_def_cfa_offset 16
 365              		.cfi_offset 3, -16
 366              		.cfi_offset 4, -12
 367              		.cfi_offset 5, -8
 368              		.cfi_offset 14, -4
 369              	.LVL47:
 476:main.c        ****     
 477:main.c        ****     int puck_correct = FALSE;   // A flag to determine if the correct puck has been picked up
 478:main.c        ****     int puck_scan;
 479:main.c        ****     
 480:main.c        ****     puckRackColours[1] = RED;
 370              		.loc 1 480 0
 371 0002 0122     		movs	r2, #1
 372 0004 0D4B     		ldr	r3, .L27
 373 0006 1A61     		str	r2, [r3, #16]
 481:main.c        ****     
 482:main.c        **** // States
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 16


 483:main.c        ****     // moving
 484:main.c        ****     changeHeightToPuck(3);  // Arm has to be lifted to highest position
 374              		.loc 1 484 0
 375 0008 0320     		movs	r0, #3
 376 000a FFF7FEFF 		bl	changeHeightToPuck
 377              	.LVL48:
 477:main.c        ****     int puck_scan;
 378              		.loc 1 477 0
 379 000e 0025     		movs	r5, #0
 485:main.c        ****         // THIS WILL be ensured by always returning the claw to the highest position after completi
 486:main.c        ****         
 487:main.c        ****     // Scanning puck:
 488:main.c        ****     while (puck_correct == FALSE) 
 380              		.loc 1 488 0
 381 0010 11E0     		b	.L22
 382              	.LVL49:
 383              	.L24:
 489:main.c        ****     {
 490:main.c        ****                                 // robot moves forward towards puck
 491:main.c        ****         changeHeightToPuck(1);  // arm lowers onto robot
 384              		.loc 1 491 0
 385 0012 0120     		movs	r0, #1
 386 0014 FFF7FEFF 		bl	changeHeightToPuck
 387              	.LVL50:
 492:main.c        ****         puck_scan = colourSensingOutput();  // colour sensor takes a scan
 388              		.loc 1 492 0
 389 0018 FFF7FEFF 		bl	colourSensingOutput
 390              	.LVL51:
 391 001c 0446     		mov	r4, r0
 392              	.LVL52:
 493:main.c        ****         changeHeightToPuck(3);  // arm returns to high position
 393              		.loc 1 493 0
 394 001e 0320     		movs	r0, #3
 395              	.LVL53:
 396 0020 FFF7FEFF 		bl	changeHeightToPuck
 397              	.LVL54:
 494:main.c        ****                                 // robot moves backwards
 495:main.c        ****         if (puck_scan == puckConstructionPlan[current_stage]) {puck_correct = TRUE;}
 398              		.loc 1 495 0
 399 0024 064B     		ldr	r3, .L27+4
 400 0026 9A68     		ldr	r2, [r3, #8]
 401 0028 044B     		ldr	r3, .L27
 402 002a 03EB8203 		add	r3, r3, r2, lsl #2
 403 002e 1B6A     		ldr	r3, [r3, #32]
 404 0030 9C42     		cmp	r4, r3
 405 0032 00D1     		bne	.L22
 406 0034 0125     		movs	r5, #1
 407              	.LVL55:
 408              	.L22:
 488:main.c        ****     {
 409              		.loc 1 488 0
 410 0036 002D     		cmp	r5, #0
 411 0038 EBD0     		beq	.L24
 496:main.c        ****                                 // if colour == true:
 497:main.c        ****                                     // enter picking up puck from 
 498:main.c        ****         else 
 499:main.c        ****         {
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 17


 500:main.c        ****                                 // if colour == false
 501:main.c        ****                                     // robot translates to side to see next puck, and performs scan
 502:main.c        ****         }
 503:main.c        ****     }
 504:main.c        ****     
 505:main.c        ****     /*
 506:main.c        ****     
 507:main.c        ****     // Picking Up puck from pile:
 508:main.c        ****     changeHeightToPuck(0);      // arm lowers to ground
 509:main.c        ****                                 // robot moves forward
 510:main.c        ****     armClose();                 // claw closes on puck
 511:main.c        ****     changeHeightToPuck(3);      // arm lifts up to highest position
 512:main.c        ****                                 // robot moves back away from puck area   
 513:main.c        ****       
 514:main.c        ****     
 515:main.c        ****     // Deposition puck in construction zone:
 516:main.c        ****                                 // arm will be in highest position from moving
 517:main.c        ****         changeHeightToPuck(current_stage-1);    // arm moves to position of stacking pucks         
 518:main.c        ****                                                 // stage 1st = ground/0
 519:main.c        ****                                                 // stage 2nd = 1
 520:main.c        ****                                                 // stage 3rd = 2
 521:main.c        ****         armOpen();              // gripper releases puck
 522:main.c        ****         changeHeightToPuck(3);  // arm moves back to highest position availabe
 523:main.c        ****                                 // robot moves away 
 524:main.c        ****     */
 525:main.c        ****     
 526:main.c        **** }
 412              		.loc 1 526 0
 413 003a 38BD     		pop	{r3, r4, r5, pc}
 414              	.LVL56:
 415              	.L28:
 416              		.align	2
 417              	.L27:
 418 003c 00000000 		.word	.LANCHOR0
 419 0040 00000000 		.word	.LANCHOR1
 420              		.cfi_endproc
 421              	.LFE70:
 422              		.size	armMoving, .-armMoving
 423              		.global	current_stage
 424              		.global	PLAN_SCAN_VERTICAL
 425              		.global	moving
 426              		.global	colour_sensing_algorithm
 427              		.global	colour_flag
 428              		.global	idac_value
 429              		.comm	moveBackwardAllowed,2,2
 430              		.comm	moveForwardAllowed,2,2
 431              		.comm	moveRightAllowed,2,2
 432              		.comm	moveLeftAllowed,2,2
 433              		.global	moveNow
 434              		.comm	desiredOrientation,4,4
 435              		.global	currentOrientation
 436              		.comm	desiredPosition,8,4
 437              		.global	currentPosition
 438              		.comm	pathPastBlock,4,4
 439              		.comm	pathToPucks,4,4
 440              		.global	beginNavigation
 441              		.global	horizontalPuckGrid
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 18


 442              		.global	puckConstructionPlan
 443              		.global	currentPuckStackSize
 444              		.global	running
 445              		.global	state
 446              		.comm	motor2EncoderCounts,4,4
 447              		.comm	motor1EncoderCounts,4,4
 448              		.comm	M2_BD,4,4
 449              		.comm	M2_FD,4,4
 450              		.comm	M1_BD,4,4
 451              		.comm	M1_FD,4,4
 452              		.comm	motor2Enable,2,2
 453              		.comm	motor1Enable,2,2
 454              		.comm	initialisation,4,4
 455              		.comm	output,32,4
 456              		.global	turningRightFlag
 457              		.global	turningLeftFlag
 458              		.global	drivingBackwardFlag
 459              		.global	drivingForwardFlag
 460              		.comm	puckPileLocation,4,4
 461              		.global	block_edge_location
 462              		.global	sweeping
 463              		.global	puckRackOffsetsFromWest
 464              		.global	puckRackColours
 465              		.global	currentPuckRackScanningIndex
 466              		.comm	driveStraightEnable,4,4
 467              		.section	.rodata
 468              		.align	2
 469              		.type	PLAN_SCAN_VERTICAL, %object
 470              		.size	PLAN_SCAN_VERTICAL, 4
 471              	PLAN_SCAN_VERTICAL:
 472 0000 0A000000 		.word	10
 473              		.data
 474              		.align	2
 475              		.set	.LANCHOR1,. + 0
 476              		.type	colour_flag, %object
 477              		.size	colour_flag, 4
 478              	colour_flag:
 479 0000 01000000 		.word	1
 480              		.type	state, %object
 481              		.size	state, 4
 482              	state:
 483 0004 01000000 		.word	1
 484              		.type	current_stage, %object
 485              		.size	current_stage, 4
 486              	current_stage:
 487 0008 01000000 		.word	1
 488              		.type	moveNow, %object
 489              		.size	moveNow, 2
 490              	moveNow:
 491 000c 0100     		.short	1
 492 000e 0000     		.space	2
 493              		.type	currentOrientation, %object
 494              		.size	currentOrientation, 4
 495              	currentOrientation:
 496 0010 5A000000 		.word	90
 497              		.type	running, %object
 498              		.size	running, 4
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 19


 499              	running:
 500 0014 01000000 		.word	1
 501              		.type	puckRackOffsetsFromWest, %object
 502              		.size	puckRackOffsetsFromWest, 20
 503              	puckRackOffsetsFromWest:
 504 0018 48000000 		.word	72
 505 001c 42000000 		.word	66
 506 0020 3C000000 		.word	60
 507 0024 36000000 		.word	54
 508 0028 30000000 		.word	48
 509              		.section	.rodata.str1.4,"aMS",%progbits,1
 510              		.align	2
 511              	.LC0:
 512 0000 55415254 		.ascii	"UART commencing... \012\000"
 512      20636F6D 
 512      6D656E63 
 512      696E672E 
 512      2E2E200A 
 513              		.bss
 514              		.align	2
 515              		.set	.LANCHOR0,. + 0
 516              		.type	beginNavigation, %object
 517              		.size	beginNavigation, 4
 518              	beginNavigation:
 519 0000 00000000 		.space	4
 520              		.type	idac_value, %object
 521              		.size	idac_value, 4
 522              	idac_value:
 523 0004 00000000 		.space	4
 524              		.type	colour_sensing_algorithm, %object
 525              		.size	colour_sensing_algorithm, 4
 526              	colour_sensing_algorithm:
 527 0008 00000000 		.space	4
 528              		.type	puckRackColours, %object
 529              		.size	puckRackColours, 20
 530              	puckRackColours:
 531 000c 00000000 		.space	20
 531      00000000 
 531      00000000 
 531      00000000 
 531      00000000 
 532              		.type	puckConstructionPlan, %object
 533              		.size	puckConstructionPlan, 12
 534              	puckConstructionPlan:
 535 0020 00000000 		.space	12
 535      00000000 
 535      00000000 
 536              		.type	moving, %object
 537              		.size	moving, 4
 538              	moving:
 539 002c 00000000 		.space	4
 540              		.type	currentPosition, %object
 541              		.size	currentPosition, 8
 542              	currentPosition:
 543 0030 00000000 		.space	8
 543      00000000 
 544              		.type	horizontalPuckGrid, %object
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 20


 545              		.size	horizontalPuckGrid, 4
 546              	horizontalPuckGrid:
 547 0038 00000000 		.space	4
 548              		.type	currentPuckStackSize, %object
 549              		.size	currentPuckStackSize, 4
 550              	currentPuckStackSize:
 551 003c 00000000 		.space	4
 552              		.type	turningRightFlag, %object
 553              		.size	turningRightFlag, 2
 554              	turningRightFlag:
 555 0040 0000     		.space	2
 556              		.type	turningLeftFlag, %object
 557              		.size	turningLeftFlag, 2
 558              	turningLeftFlag:
 559 0042 0000     		.space	2
 560              		.type	drivingBackwardFlag, %object
 561              		.size	drivingBackwardFlag, 2
 562              	drivingBackwardFlag:
 563 0044 0000     		.space	2
 564              		.type	drivingForwardFlag, %object
 565              		.size	drivingForwardFlag, 2
 566              	drivingForwardFlag:
 567 0046 0000     		.space	2
 568              		.type	block_edge_location, %object
 569              		.size	block_edge_location, 16
 570              	block_edge_location:
 571 0048 00000000 		.space	16
 571      00000000 
 571      00000000 
 571      00000000 
 572              		.type	sweeping, %object
 573              		.size	sweeping, 4
 574              	sweeping:
 575 0058 00000000 		.space	4
 576              		.type	currentPuckRackScanningIndex, %object
 577              		.size	currentPuckRackScanningIndex, 4
 578              	currentPuckRackScanningIndex:
 579 005c 00000000 		.space	4
 580              		.text
 581              	.Letext0:
 582              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 583              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 584              		.file 4 "Generated_Source\\PSoC5/core_cm3.h"
 585              		.file 5 "ultrasonic.h"
 586              		.file 6 "main.h"
 587              		.file 7 "dcmotor.h"
 588              		.file 8 "Generated_Source\\PSoC5/CyLib.h"
 589              		.file 9 "Generated_Source\\PSoC5/Drift_Check_Timer.h"
 590              		.file 10 "Generated_Source\\PSoC5/Motor_1_Encoder_Counts.h"
 591              		.file 11 "Generated_Source\\PSoC5/Motor_2_Encoder_Counts.h"
 592              		.file 12 "Generated_Source\\PSoC5/TIA_1.h"
 593              		.file 13 "Generated_Source\\PSoC5/UART_1.h"
 594              		.file 14 "Generated_Source\\PSoC5/ADC.h"
 595              		.file 15 "Generated_Source\\PSoC5/IDAC8_1.h"
 596              		.file 16 "Generated_Source\\PSoC5/control_photodiode.h"
 597              		.file 17 "Generated_Source\\PSoC5/control_led.h"
 598              		.file 18 "colour.h"
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 21


 599              		.file 19 "Generated_Source\\PSoC5/Rack_Servo_PWM.h"
 600              		.file 20 "Generated_Source\\PSoC5/Gripper_Servo_PWM.h"
 601              		.file 21 "Generated_Source\\PSoC5/Timer_1.h"
 602              		.file 22 "Generated_Source\\PSoC5/Sonic.h"
 603              		.file 23 "Generated_Source\\PSoC5/Start.h"
 604              		.file 24 "Generated_Source\\PSoC5/Motor_1_driver.h"
 605              		.file 25 "Generated_Source\\PSoC5/Motor_2_driver.h"
 606              		.file 26 "Generated_Source\\PSoC5/Encoder_Counts_1_Interrupt.h"
 607              		.file 27 "Generated_Source\\PSoC5/Encoder_Counts_2_Interrupt.h"
 608              		.file 28 "Generated_Source\\PSoC5/Drift_Check_Interrupt.h"
 609              		.file 29 "servo.h"
 610              		.section	.debug_info,"",%progbits
 611              	.Ldebug_info0:
 612 0000 5C090000 		.4byte	0x95c
 613 0004 0400     		.2byte	0x4
 614 0006 00000000 		.4byte	.Ldebug_abbrev0
 615 000a 04       		.byte	0x4
 616 000b 01       		.uleb128 0x1
 617 000c 3C070000 		.4byte	.LASF110
 618 0010 0C       		.byte	0xc
 619 0011 ED050000 		.4byte	.LASF111
 620 0015 9E060000 		.4byte	.LASF112
 621 0019 00000000 		.4byte	.Ldebug_ranges0+0
 622 001d 00000000 		.4byte	0
 623 0021 00000000 		.4byte	.Ldebug_line0
 624 0025 02       		.uleb128 0x2
 625 0026 01       		.byte	0x1
 626 0027 06       		.byte	0x6
 627 0028 4A000000 		.4byte	.LASF0
 628 002c 02       		.uleb128 0x2
 629 002d 01       		.byte	0x1
 630 002e 08       		.byte	0x8
 631 002f 0B040000 		.4byte	.LASF1
 632 0033 02       		.uleb128 0x2
 633 0034 02       		.byte	0x2
 634 0035 05       		.byte	0x5
 635 0036 8F000000 		.4byte	.LASF2
 636 003a 02       		.uleb128 0x2
 637 003b 02       		.byte	0x2
 638 003c 07       		.byte	0x7
 639 003d C9050000 		.4byte	.LASF3
 640 0041 03       		.uleb128 0x3
 641 0042 84060000 		.4byte	.LASF9
 642 0046 02       		.byte	0x2
 643 0047 3F       		.byte	0x3f
 644 0048 4C000000 		.4byte	0x4c
 645 004c 02       		.uleb128 0x2
 646 004d 04       		.byte	0x4
 647 004e 05       		.byte	0x5
 648 004f 32030000 		.4byte	.LASF4
 649 0053 02       		.uleb128 0x2
 650 0054 04       		.byte	0x4
 651 0055 07       		.byte	0x7
 652 0056 F4050000 		.4byte	.LASF5
 653 005a 02       		.uleb128 0x2
 654 005b 08       		.byte	0x8
 655 005c 05       		.byte	0x5
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 22


 656 005d C4020000 		.4byte	.LASF6
 657 0061 02       		.uleb128 0x2
 658 0062 08       		.byte	0x8
 659 0063 07       		.byte	0x7
 660 0064 50040000 		.4byte	.LASF7
 661 0068 04       		.uleb128 0x4
 662 0069 04       		.byte	0x4
 663 006a 05       		.byte	0x5
 664 006b 696E7400 		.ascii	"int\000"
 665 006f 02       		.uleb128 0x2
 666 0070 04       		.byte	0x4
 667 0071 07       		.byte	0x7
 668 0072 87040000 		.4byte	.LASF8
 669 0076 03       		.uleb128 0x3
 670 0077 43050000 		.4byte	.LASF10
 671 007b 03       		.byte	0x3
 672 007c 2C       		.byte	0x2c
 673 007d 41000000 		.4byte	0x41
 674 0081 02       		.uleb128 0x2
 675 0082 04       		.byte	0x4
 676 0083 04       		.byte	0x4
 677 0084 AB020000 		.4byte	.LASF11
 678 0088 02       		.uleb128 0x2
 679 0089 08       		.byte	0x8
 680 008a 04       		.byte	0x4
 681 008b 14060000 		.4byte	.LASF12
 682 008f 02       		.uleb128 0x2
 683 0090 01       		.byte	0x1
 684 0091 08       		.byte	0x8
 685 0092 38050000 		.4byte	.LASF13
 686 0096 02       		.uleb128 0x2
 687 0097 08       		.byte	0x8
 688 0098 04       		.byte	0x4
 689 0099 FF030000 		.4byte	.LASF14
 690 009d 02       		.uleb128 0x2
 691 009e 04       		.byte	0x4
 692 009f 07       		.byte	0x7
 693 00a0 08070000 		.4byte	.LASF15
 694 00a4 05       		.uleb128 0x5
 695 00a5 54494800 		.ascii	"TIH\000"
 696 00a9 01       		.byte	0x1
 697 00aa 63       		.byte	0x63
 698 00ab 00000000 		.4byte	.LFB64
 699 00af 08000000 		.4byte	.LFE64-.LFB64
 700 00b3 01       		.uleb128 0x1
 701 00b4 9C       		.byte	0x9c
 702 00b5 C3000000 		.4byte	0xc3
 703 00b9 06       		.uleb128 0x6
 704 00ba 06000000 		.4byte	.LVL0
 705 00be A7070000 		.4byte	0x7a7
 706 00c2 00       		.byte	0
 707 00c3 07       		.uleb128 0x7
 708 00c4 45010000 		.4byte	.LASF16
 709 00c8 01       		.byte	0x1
 710 00c9 68       		.byte	0x68
 711 00ca 00000000 		.4byte	.LFB65
 712 00ce 20000000 		.4byte	.LFE65-.LFB65
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 23


 713 00d2 01       		.uleb128 0x1
 714 00d3 9C       		.byte	0x9c
 715 00d4 E9000000 		.4byte	0xe9
 716 00d8 08       		.uleb128 0x8
 717 00d9 08000000 		.4byte	.LVL1
 718 00dd B2070000 		.4byte	0x7b2
 719 00e1 09       		.uleb128 0x9
 720 00e2 01       		.uleb128 0x1
 721 00e3 50       		.byte	0x50
 722 00e4 02       		.uleb128 0x2
 723 00e5 08       		.byte	0x8
 724 00e6 64       		.byte	0x64
 725 00e7 00       		.byte	0
 726 00e8 00       		.byte	0
 727 00e9 07       		.uleb128 0x7
 728 00ea 2C060000 		.4byte	.LASF17
 729 00ee 01       		.byte	0x1
 730 00ef 71       		.byte	0x71
 731 00f0 00000000 		.4byte	.LFB66
 732 00f4 08000000 		.4byte	.LFE66-.LFB66
 733 00f8 01       		.uleb128 0x1
 734 00f9 9C       		.byte	0x9c
 735 00fa 08010000 		.4byte	0x108
 736 00fe 06       		.uleb128 0x6
 737 00ff 06000000 		.4byte	.LVL2
 738 0103 BD070000 		.4byte	0x7bd
 739 0107 00       		.byte	0
 740 0108 07       		.uleb128 0x7
 741 0109 36000000 		.4byte	.LASF18
 742 010d 01       		.byte	0x1
 743 010e 75       		.byte	0x75
 744 010f 00000000 		.4byte	.LFB67
 745 0113 08000000 		.4byte	.LFE67-.LFB67
 746 0117 01       		.uleb128 0x1
 747 0118 9C       		.byte	0x9c
 748 0119 27010000 		.4byte	0x127
 749 011d 06       		.uleb128 0x6
 750 011e 06000000 		.4byte	.LVL3
 751 0122 C8070000 		.4byte	0x7c8
 752 0126 00       		.byte	0
 753 0127 07       		.uleb128 0x7
 754 0128 6B060000 		.4byte	.LASF19
 755 012c 01       		.byte	0x1
 756 012d 79       		.byte	0x79
 757 012e 00000000 		.4byte	.LFB68
 758 0132 28000000 		.4byte	.LFE68-.LFB68
 759 0136 01       		.uleb128 0x1
 760 0137 9C       		.byte	0x9c
 761 0138 6A010000 		.4byte	0x16a
 762 013c 06       		.uleb128 0x6
 763 013d 06000000 		.4byte	.LVL4
 764 0141 D3070000 		.4byte	0x7d3
 765 0145 06       		.uleb128 0x6
 766 0146 0A000000 		.4byte	.LVL5
 767 014a DE070000 		.4byte	0x7de
 768 014e 06       		.uleb128 0x6
 769 014f 0E000000 		.4byte	.LVL6
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 24


 770 0153 E9070000 		.4byte	0x7e9
 771 0157 06       		.uleb128 0x6
 772 0158 16000000 		.4byte	.LVL7
 773 015c F4070000 		.4byte	0x7f4
 774 0160 06       		.uleb128 0x6
 775 0161 1E000000 		.4byte	.LVL8
 776 0165 FF070000 		.4byte	0x7ff
 777 0169 00       		.byte	0
 778 016a 0A       		.uleb128 0xa
 779 016b 40010000 		.4byte	.LASF113
 780 016f 01       		.byte	0x1
 781 0170 82       		.byte	0x82
 782 0171 68000000 		.4byte	0x68
 783 0175 00000000 		.4byte	.LFB69
 784 0179 04010000 		.4byte	.LFE69-.LFB69
 785 017d 01       		.uleb128 0x1
 786 017e 9C       		.byte	0x9c
 787 017f E0030000 		.4byte	0x3e0
 788 0183 0B       		.uleb128 0xb
 789 0184 DE000000 		.4byte	.LASF20
 790 0188 01       		.byte	0x1
 791 0189 8E       		.byte	0x8e
 792 018a 68000000 		.4byte	0x68
 793 018e 00       		.byte	0
 794 018f 0B       		.uleb128 0xb
 795 0190 79040000 		.4byte	.LASF21
 796 0194 01       		.byte	0x1
 797 0195 8F       		.byte	0x8f
 798 0196 68000000 		.4byte	0x68
 799 019a 00       		.byte	0
 800 019b 06       		.uleb128 0x6
 801 019c 08000000 		.4byte	.LVL9
 802 01a0 0A080000 		.4byte	0x80a
 803 01a4 06       		.uleb128 0x6
 804 01a5 0C000000 		.4byte	.LVL10
 805 01a9 15080000 		.4byte	0x815
 806 01ad 0C       		.uleb128 0xc
 807 01ae 12000000 		.4byte	.LVL11
 808 01b2 20080000 		.4byte	0x820
 809 01b6 C4010000 		.4byte	0x1c4
 810 01ba 09       		.uleb128 0x9
 811 01bb 01       		.uleb128 0x1
 812 01bc 50       		.byte	0x50
 813 01bd 05       		.uleb128 0x5
 814 01be 03       		.byte	0x3
 815 01bf 00000000 		.4byte	.LC0
 816 01c3 00       		.byte	0
 817 01c4 06       		.uleb128 0x6
 818 01c5 16000000 		.4byte	.LVL12
 819 01c9 2B080000 		.4byte	0x82b
 820 01cd 06       		.uleb128 0x6
 821 01ce 1A000000 		.4byte	.LVL13
 822 01d2 36080000 		.4byte	0x836
 823 01d6 0C       		.uleb128 0xc
 824 01d7 20000000 		.4byte	.LVL14
 825 01db 41080000 		.4byte	0x841
 826 01df E9010000 		.4byte	0x1e9
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 25


 827 01e3 09       		.uleb128 0x9
 828 01e4 01       		.uleb128 0x1
 829 01e5 50       		.byte	0x50
 830 01e6 01       		.uleb128 0x1
 831 01e7 30       		.byte	0x30
 832 01e8 00       		.byte	0
 833 01e9 06       		.uleb128 0x6
 834 01ea 28000000 		.4byte	.LVL15
 835 01ee 4C080000 		.4byte	0x84c
 836 01f2 0C       		.uleb128 0xc
 837 01f3 32000000 		.4byte	.LVL16
 838 01f7 57080000 		.4byte	0x857
 839 01fb 06020000 		.4byte	0x206
 840 01ff 09       		.uleb128 0x9
 841 0200 01       		.uleb128 0x1
 842 0201 50       		.byte	0x50
 843 0202 02       		.uleb128 0x2
 844 0203 74       		.byte	0x74
 845 0204 00       		.sleb128 0
 846 0205 00       		.byte	0
 847 0206 0C       		.uleb128 0xc
 848 0207 38000000 		.4byte	.LVL17
 849 020b 62080000 		.4byte	0x862
 850 020f 19020000 		.4byte	0x219
 851 0213 09       		.uleb128 0x9
 852 0214 01       		.uleb128 0x1
 853 0215 50       		.byte	0x50
 854 0216 01       		.uleb128 0x1
 855 0217 31       		.byte	0x31
 856 0218 00       		.byte	0
 857 0219 0C       		.uleb128 0xc
 858 021a 40000000 		.4byte	.LVL18
 859 021e B2070000 		.4byte	0x7b2
 860 0222 2E020000 		.4byte	0x22e
 861 0226 09       		.uleb128 0x9
 862 0227 01       		.uleb128 0x1
 863 0228 50       		.byte	0x50
 864 0229 03       		.uleb128 0x3
 865 022a 0A       		.byte	0xa
 866 022b F401     		.2byte	0x1f4
 867 022d 00       		.byte	0
 868 022e 0C       		.uleb128 0xc
 869 022f 46000000 		.4byte	.LVL19
 870 0233 62080000 		.4byte	0x862
 871 0237 41020000 		.4byte	0x241
 872 023b 09       		.uleb128 0x9
 873 023c 01       		.uleb128 0x1
 874 023d 50       		.byte	0x50
 875 023e 01       		.uleb128 0x1
 876 023f 32       		.byte	0x32
 877 0240 00       		.byte	0
 878 0241 0C       		.uleb128 0xc
 879 0242 4E000000 		.4byte	.LVL20
 880 0246 B2070000 		.4byte	0x7b2
 881 024a 56020000 		.4byte	0x256
 882 024e 09       		.uleb128 0x9
 883 024f 01       		.uleb128 0x1
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 26


 884 0250 50       		.byte	0x50
 885 0251 03       		.uleb128 0x3
 886 0252 0A       		.byte	0xa
 887 0253 F401     		.2byte	0x1f4
 888 0255 00       		.byte	0
 889 0256 0C       		.uleb128 0xc
 890 0257 54000000 		.4byte	.LVL21
 891 025b 62080000 		.4byte	0x862
 892 025f 69020000 		.4byte	0x269
 893 0263 09       		.uleb128 0x9
 894 0264 01       		.uleb128 0x1
 895 0265 50       		.byte	0x50
 896 0266 01       		.uleb128 0x1
 897 0267 33       		.byte	0x33
 898 0268 00       		.byte	0
 899 0269 0C       		.uleb128 0xc
 900 026a 5C000000 		.4byte	.LVL22
 901 026e B2070000 		.4byte	0x7b2
 902 0272 7E020000 		.4byte	0x27e
 903 0276 09       		.uleb128 0x9
 904 0277 01       		.uleb128 0x1
 905 0278 50       		.byte	0x50
 906 0279 03       		.uleb128 0x3
 907 027a 0A       		.byte	0xa
 908 027b F401     		.2byte	0x1f4
 909 027d 00       		.byte	0
 910 027e 0C       		.uleb128 0xc
 911 027f 62000000 		.4byte	.LVL23
 912 0283 62080000 		.4byte	0x862
 913 0287 92020000 		.4byte	0x292
 914 028b 09       		.uleb128 0x9
 915 028c 01       		.uleb128 0x1
 916 028d 50       		.byte	0x50
 917 028e 02       		.uleb128 0x2
 918 028f 74       		.byte	0x74
 919 0290 00       		.sleb128 0
 920 0291 00       		.byte	0
 921 0292 0C       		.uleb128 0xc
 922 0293 6A000000 		.4byte	.LVL24
 923 0297 B2070000 		.4byte	0x7b2
 924 029b A7020000 		.4byte	0x2a7
 925 029f 09       		.uleb128 0x9
 926 02a0 01       		.uleb128 0x1
 927 02a1 50       		.byte	0x50
 928 02a2 03       		.uleb128 0x3
 929 02a3 0A       		.byte	0xa
 930 02a4 F401     		.2byte	0x1f4
 931 02a6 00       		.byte	0
 932 02a7 06       		.uleb128 0x6
 933 02a8 6E000000 		.4byte	.LVL25
 934 02ac 6D080000 		.4byte	0x86d
 935 02b0 06       		.uleb128 0x6
 936 02b1 72000000 		.4byte	.LVL26
 937 02b5 78080000 		.4byte	0x878
 938 02b9 0C       		.uleb128 0xc
 939 02ba 7A000000 		.4byte	.LVL27
 940 02be 83080000 		.4byte	0x883
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 27


 941 02c2 CE020000 		.4byte	0x2ce
 942 02c6 09       		.uleb128 0x9
 943 02c7 01       		.uleb128 0x1
 944 02c8 50       		.byte	0x50
 945 02c9 03       		.uleb128 0x3
 946 02ca 0A       		.byte	0xa
 947 02cb E803     		.2byte	0x3e8
 948 02cd 00       		.byte	0
 949 02ce 0C       		.uleb128 0xc
 950 02cf 82000000 		.4byte	.LVL28
 951 02d3 B2070000 		.4byte	0x7b2
 952 02d7 E3020000 		.4byte	0x2e3
 953 02db 09       		.uleb128 0x9
 954 02dc 01       		.uleb128 0x1
 955 02dd 50       		.byte	0x50
 956 02de 03       		.uleb128 0x3
 957 02df 0A       		.byte	0xa
 958 02e0 F401     		.2byte	0x1f4
 959 02e2 00       		.byte	0
 960 02e3 06       		.uleb128 0x6
 961 02e4 86000000 		.4byte	.LVL29
 962 02e8 8E080000 		.4byte	0x88e
 963 02ec 06       		.uleb128 0x6
 964 02ed 8A000000 		.4byte	.LVL30
 965 02f1 99080000 		.4byte	0x899
 966 02f5 0C       		.uleb128 0xc
 967 02f6 92000000 		.4byte	.LVL31
 968 02fa A4080000 		.4byte	0x8a4
 969 02fe 0A030000 		.4byte	0x30a
 970 0302 09       		.uleb128 0x9
 971 0303 01       		.uleb128 0x1
 972 0304 50       		.byte	0x50
 973 0305 03       		.uleb128 0x3
 974 0306 0A       		.byte	0xa
 975 0307 6004     		.2byte	0x460
 976 0309 00       		.byte	0
 977 030a 0C       		.uleb128 0xc
 978 030b 9A000000 		.4byte	.LVL32
 979 030f B2070000 		.4byte	0x7b2
 980 0313 1F030000 		.4byte	0x31f
 981 0317 09       		.uleb128 0x9
 982 0318 01       		.uleb128 0x1
 983 0319 50       		.byte	0x50
 984 031a 03       		.uleb128 0x3
 985 031b 0A       		.byte	0xa
 986 031c F401     		.2byte	0x1f4
 987 031e 00       		.byte	0
 988 031f 06       		.uleb128 0x6
 989 0320 9E000000 		.4byte	.LVL33
 990 0324 AF080000 		.4byte	0x8af
 991 0328 06       		.uleb128 0x6
 992 0329 A2000000 		.4byte	.LVL34
 993 032d BA080000 		.4byte	0x8ba
 994 0331 06       		.uleb128 0x6
 995 0332 A6000000 		.4byte	.LVL35
 996 0336 C5080000 		.4byte	0x8c5
 997 033a 0C       		.uleb128 0xc
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 28


 998 033b AC000000 		.4byte	.LVL36
 999 033f D0080000 		.4byte	0x8d0
 1000 0343 51030000 		.4byte	0x351
 1001 0347 09       		.uleb128 0x9
 1002 0348 01       		.uleb128 0x1
 1003 0349 50       		.byte	0x50
 1004 034a 05       		.uleb128 0x5
 1005 034b 03       		.byte	0x3
 1006 034c 00000000 		.4byte	TIH
 1007 0350 00       		.byte	0
 1008 0351 0C       		.uleb128 0xc
 1009 0352 B2000000 		.4byte	.LVL37
 1010 0356 DB080000 		.4byte	0x8db
 1011 035a 68030000 		.4byte	0x368
 1012 035e 09       		.uleb128 0x9
 1013 035f 01       		.uleb128 0x1
 1014 0360 50       		.byte	0x50
 1015 0361 05       		.uleb128 0x5
 1016 0362 03       		.byte	0x3
 1017 0363 00000000 		.4byte	StartIH
 1018 0367 00       		.byte	0
 1019 0368 06       		.uleb128 0x6
 1020 0369 B8000000 		.4byte	.LVL38
 1021 036d E6080000 		.4byte	0x8e6
 1022 0371 06       		.uleb128 0x6
 1023 0372 BC000000 		.4byte	.LVL39
 1024 0376 F1080000 		.4byte	0x8f1
 1025 037a 06       		.uleb128 0x6
 1026 037b C8000000 		.4byte	.LVL40
 1027 037f FC080000 		.4byte	0x8fc
 1028 0383 06       		.uleb128 0x6
 1029 0384 CC000000 		.4byte	.LVL41
 1030 0388 07090000 		.4byte	0x907
 1031 038c 06       		.uleb128 0x6
 1032 038d D0000000 		.4byte	.LVL42
 1033 0391 12090000 		.4byte	0x912
 1034 0395 06       		.uleb128 0x6
 1035 0396 D4000000 		.4byte	.LVL43
 1036 039a 1D090000 		.4byte	0x91d
 1037 039e 0C       		.uleb128 0xc
 1038 039f DA000000 		.4byte	.LVL44
 1039 03a3 28090000 		.4byte	0x928
 1040 03a7 B5030000 		.4byte	0x3b5
 1041 03ab 09       		.uleb128 0x9
 1042 03ac 01       		.uleb128 0x1
 1043 03ad 50       		.byte	0x50
 1044 03ae 05       		.uleb128 0x5
 1045 03af 03       		.byte	0x3
 1046 03b0 00000000 		.4byte	Encoder_Counts_1_IH
 1047 03b4 00       		.byte	0
 1048 03b5 0C       		.uleb128 0xc
 1049 03b6 E0000000 		.4byte	.LVL45
 1050 03ba 33090000 		.4byte	0x933
 1051 03be CC030000 		.4byte	0x3cc
 1052 03c2 09       		.uleb128 0x9
 1053 03c3 01       		.uleb128 0x1
 1054 03c4 50       		.byte	0x50
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 29


 1055 03c5 05       		.uleb128 0x5
 1056 03c6 03       		.byte	0x3
 1057 03c7 00000000 		.4byte	Encoder_Counts_2_IH
 1058 03cb 00       		.byte	0
 1059 03cc 08       		.uleb128 0x8
 1060 03cd E6000000 		.4byte	.LVL46
 1061 03d1 3E090000 		.4byte	0x93e
 1062 03d5 09       		.uleb128 0x9
 1063 03d6 01       		.uleb128 0x1
 1064 03d7 50       		.byte	0x50
 1065 03d8 05       		.uleb128 0x5
 1066 03d9 03       		.byte	0x3
 1067 03da 00000000 		.4byte	Drift_Check_IH
 1068 03de 00       		.byte	0
 1069 03df 00       		.byte	0
 1070 03e0 0D       		.uleb128 0xd
 1071 03e1 2A040000 		.4byte	.LASF22
 1072 03e5 01       		.byte	0x1
 1073 03e6 DB01     		.2byte	0x1db
 1074 03e8 00000000 		.4byte	.LFB70
 1075 03ec 44000000 		.4byte	.LFE70-.LFB70
 1076 03f0 01       		.uleb128 0x1
 1077 03f1 9C       		.byte	0x9c
 1078 03f2 55040000 		.4byte	0x455
 1079 03f6 0E       		.uleb128 0xe
 1080 03f7 29000000 		.4byte	.LASF23
 1081 03fb 01       		.byte	0x1
 1082 03fc DD01     		.2byte	0x1dd
 1083 03fe 68000000 		.4byte	0x68
 1084 0402 00000000 		.4byte	.LLST0
 1085 0406 0E       		.uleb128 0xe
 1086 0407 7A060000 		.4byte	.LASF24
 1087 040b 01       		.byte	0x1
 1088 040c DE01     		.2byte	0x1de
 1089 040e 68000000 		.4byte	0x68
 1090 0412 1F000000 		.4byte	.LLST1
 1091 0416 0C       		.uleb128 0xc
 1092 0417 0E000000 		.4byte	.LVL48
 1093 041b 49090000 		.4byte	0x949
 1094 041f 29040000 		.4byte	0x429
 1095 0423 09       		.uleb128 0x9
 1096 0424 01       		.uleb128 0x1
 1097 0425 50       		.byte	0x50
 1098 0426 01       		.uleb128 0x1
 1099 0427 33       		.byte	0x33
 1100 0428 00       		.byte	0
 1101 0429 0C       		.uleb128 0xc
 1102 042a 18000000 		.4byte	.LVL50
 1103 042e 49090000 		.4byte	0x949
 1104 0432 3C040000 		.4byte	0x43c
 1105 0436 09       		.uleb128 0x9
 1106 0437 01       		.uleb128 0x1
 1107 0438 50       		.byte	0x50
 1108 0439 01       		.uleb128 0x1
 1109 043a 31       		.byte	0x31
 1110 043b 00       		.byte	0
 1111 043c 06       		.uleb128 0x6
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 30


 1112 043d 1C000000 		.4byte	.LVL51
 1113 0441 54090000 		.4byte	0x954
 1114 0445 08       		.uleb128 0x8
 1115 0446 24000000 		.4byte	.LVL54
 1116 044a 49090000 		.4byte	0x949
 1117 044e 09       		.uleb128 0x9
 1118 044f 01       		.uleb128 0x1
 1119 0450 50       		.byte	0x50
 1120 0451 01       		.uleb128 0x1
 1121 0452 33       		.byte	0x33
 1122 0453 00       		.byte	0
 1123 0454 00       		.byte	0
 1124 0455 0F       		.uleb128 0xf
 1125 0456 2F070000 		.4byte	.LASF25
 1126 045a 04       		.byte	0x4
 1127 045b 1207     		.2byte	0x712
 1128 045d 61040000 		.4byte	0x461
 1129 0461 10       		.uleb128 0x10
 1130 0462 76000000 		.4byte	0x76
 1131 0466 11       		.uleb128 0x11
 1132 0467 11020000 		.4byte	.LASF26
 1133 046b 05       		.byte	0x5
 1134 046c 1D       		.byte	0x1d
 1135 046d 68000000 		.4byte	0x68
 1136 0471 05       		.uleb128 0x5
 1137 0472 03       		.byte	0x3
 1138 0473 00000000 		.4byte	driveStraightEnable
 1139 0477 11       		.uleb128 0x11
 1140 0478 96030000 		.4byte	.LASF27
 1141 047c 01       		.byte	0x1
 1142 047d 2A       		.byte	0x2a
 1143 047e 68000000 		.4byte	0x68
 1144 0482 05       		.uleb128 0x5
 1145 0483 03       		.byte	0x3
 1146 0484 00000000 		.4byte	currentPuckRackScanningIndex
 1147 0488 12       		.uleb128 0x12
 1148 0489 68000000 		.4byte	0x68
 1149 048d 98040000 		.4byte	0x498
 1150 0491 13       		.uleb128 0x13
 1151 0492 9D000000 		.4byte	0x9d
 1152 0496 04       		.byte	0x4
 1153 0497 00       		.byte	0
 1154 0498 11       		.uleb128 0x11
 1155 0499 8E060000 		.4byte	.LASF28
 1156 049d 01       		.byte	0x1
 1157 049e 28       		.byte	0x28
 1158 049f 88040000 		.4byte	0x488
 1159 04a3 05       		.uleb128 0x5
 1160 04a4 03       		.byte	0x3
 1161 04a5 00000000 		.4byte	puckRackColours
 1162 04a9 11       		.uleb128 0x11
 1163 04aa 25020000 		.4byte	.LASF29
 1164 04ae 01       		.byte	0x1
 1165 04af 2B       		.byte	0x2b
 1166 04b0 88040000 		.4byte	0x488
 1167 04b4 05       		.uleb128 0x5
 1168 04b5 03       		.byte	0x3
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 31


 1169 04b6 00000000 		.4byte	puckRackOffsetsFromWest
 1170 04ba 11       		.uleb128 0x11
 1171 04bb 2F050000 		.4byte	.LASF30
 1172 04bf 01       		.byte	0x1
 1173 04c0 23       		.byte	0x23
 1174 04c1 68000000 		.4byte	0x68
 1175 04c5 05       		.uleb128 0x5
 1176 04c6 03       		.byte	0x3
 1177 04c7 00000000 		.4byte	sweeping
 1178 04cb 12       		.uleb128 0x12
 1179 04cc 81000000 		.4byte	0x81
 1180 04d0 DB040000 		.4byte	0x4db
 1181 04d4 13       		.uleb128 0x13
 1182 04d5 9D000000 		.4byte	0x9d
 1183 04d9 03       		.byte	0x3
 1184 04da 00       		.byte	0
 1185 04db 11       		.uleb128 0x11
 1186 04dc 3C040000 		.4byte	.LASF31
 1187 04e0 01       		.byte	0x1
 1188 04e1 24       		.byte	0x24
 1189 04e2 CB040000 		.4byte	0x4cb
 1190 04e6 05       		.uleb128 0x5
 1191 04e7 03       		.byte	0x3
 1192 04e8 00000000 		.4byte	block_edge_location
 1193 04ec 11       		.uleb128 0x11
 1194 04ed 68030000 		.4byte	.LASF32
 1195 04f1 06       		.byte	0x6
 1196 04f2 7A       		.byte	0x7a
 1197 04f3 81000000 		.4byte	0x81
 1198 04f7 05       		.uleb128 0x5
 1199 04f8 03       		.byte	0x3
 1200 04f9 00000000 		.4byte	puckPileLocation
 1201 04fd 11       		.uleb128 0x11
 1202 04fe CB000000 		.4byte	.LASF33
 1203 0502 01       		.byte	0x1
 1204 0503 46       		.byte	0x46
 1205 0504 33000000 		.4byte	0x33
 1206 0508 05       		.uleb128 0x5
 1207 0509 03       		.byte	0x3
 1208 050a 00000000 		.4byte	drivingForwardFlag
 1209 050e 11       		.uleb128 0x11
 1210 050f 54030000 		.4byte	.LASF34
 1211 0513 01       		.byte	0x1
 1212 0514 47       		.byte	0x47
 1213 0515 33000000 		.4byte	0x33
 1214 0519 05       		.uleb128 0x5
 1215 051a 03       		.byte	0x3
 1216 051b 00000000 		.4byte	drivingBackwardFlag
 1217 051f 11       		.uleb128 0x11
 1218 0520 6A000000 		.4byte	.LASF35
 1219 0524 01       		.byte	0x1
 1220 0525 48       		.byte	0x48
 1221 0526 33000000 		.4byte	0x33
 1222 052a 05       		.uleb128 0x5
 1223 052b 03       		.byte	0x3
 1224 052c 00000000 		.4byte	turningLeftFlag
 1225 0530 11       		.uleb128 0x11
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 32


 1226 0531 9A020000 		.4byte	.LASF36
 1227 0535 01       		.byte	0x1
 1228 0536 49       		.byte	0x49
 1229 0537 33000000 		.4byte	0x33
 1230 053b 05       		.uleb128 0x5
 1231 053c 03       		.byte	0x3
 1232 053d 00000000 		.4byte	turningRightFlag
 1233 0541 11       		.uleb128 0x11
 1234 0542 0E080000 		.4byte	.LASF37
 1235 0546 05       		.byte	0x5
 1236 0547 2B       		.byte	0x2b
 1237 0548 68000000 		.4byte	0x68
 1238 054c 05       		.uleb128 0x5
 1239 054d 03       		.byte	0x3
 1240 054e 00000000 		.4byte	initialisation
 1241 0552 12       		.uleb128 0x12
 1242 0553 8F000000 		.4byte	0x8f
 1243 0557 62050000 		.4byte	0x562
 1244 055b 13       		.uleb128 0x13
 1245 055c 9D000000 		.4byte	0x9d
 1246 0560 1F       		.byte	0x1f
 1247 0561 00       		.byte	0
 1248 0562 11       		.uleb128 0x11
 1249 0563 11070000 		.4byte	.LASF38
 1250 0567 01       		.byte	0x1
 1251 0568 1E       		.byte	0x1e
 1252 0569 52050000 		.4byte	0x552
 1253 056d 05       		.uleb128 0x5
 1254 056e 03       		.byte	0x3
 1255 056f 00000000 		.4byte	output
 1256 0573 11       		.uleb128 0x11
 1257 0574 C3050000 		.4byte	.LASF39
 1258 0578 07       		.byte	0x7
 1259 0579 2D       		.byte	0x2d
 1260 057a 68000000 		.4byte	0x68
 1261 057e 05       		.uleb128 0x5
 1262 057f 03       		.byte	0x3
 1263 0580 00000000 		.4byte	M1_FD
 1264 0584 11       		.uleb128 0x11
 1265 0585 3D050000 		.4byte	.LASF40
 1266 0589 07       		.byte	0x7
 1267 058a 2E       		.byte	0x2e
 1268 058b 68000000 		.4byte	0x68
 1269 058f 05       		.uleb128 0x5
 1270 0590 03       		.byte	0x3
 1271 0591 00000000 		.4byte	M1_BD
 1272 0595 11       		.uleb128 0x11
 1273 0596 08080000 		.4byte	.LASF41
 1274 059a 07       		.byte	0x7
 1275 059b 2F       		.byte	0x2f
 1276 059c 68000000 		.4byte	0x68
 1277 05a0 05       		.uleb128 0x5
 1278 05a1 03       		.byte	0x3
 1279 05a2 00000000 		.4byte	M2_FD
 1280 05a6 11       		.uleb128 0x11
 1281 05a7 29070000 		.4byte	.LASF42
 1282 05ab 07       		.byte	0x7
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 33


 1283 05ac 30       		.byte	0x30
 1284 05ad 68000000 		.4byte	0x68
 1285 05b1 05       		.uleb128 0x5
 1286 05b2 03       		.byte	0x3
 1287 05b3 00000000 		.4byte	M2_BD
 1288 05b7 11       		.uleb128 0x11
 1289 05b8 5A020000 		.4byte	.LASF43
 1290 05bc 07       		.byte	0x7
 1291 05bd 2B       		.byte	0x2b
 1292 05be 33000000 		.4byte	0x33
 1293 05c2 05       		.uleb128 0x5
 1294 05c3 03       		.byte	0x3
 1295 05c4 00000000 		.4byte	motor1Enable
 1296 05c8 11       		.uleb128 0x11
 1297 05c9 5E060000 		.4byte	.LASF44
 1298 05cd 07       		.byte	0x7
 1299 05ce 2C       		.byte	0x2c
 1300 05cf 33000000 		.4byte	0x33
 1301 05d3 05       		.uleb128 0x5
 1302 05d4 03       		.byte	0x3
 1303 05d5 00000000 		.4byte	motor2Enable
 1304 05d9 11       		.uleb128 0x11
 1305 05da 01010000 		.4byte	.LASF45
 1306 05de 07       		.byte	0x7
 1307 05df 31       		.byte	0x31
 1308 05e0 68000000 		.4byte	0x68
 1309 05e4 05       		.uleb128 0x5
 1310 05e5 03       		.byte	0x3
 1311 05e6 00000000 		.4byte	motor1EncoderCounts
 1312 05ea 11       		.uleb128 0x11
 1313 05eb 00000000 		.4byte	.LASF46
 1314 05ef 07       		.byte	0x7
 1315 05f0 32       		.byte	0x32
 1316 05f1 68000000 		.4byte	0x68
 1317 05f5 05       		.uleb128 0x5
 1318 05f6 03       		.byte	0x3
 1319 05f7 00000000 		.4byte	motor2EncoderCounts
 1320 05fb 11       		.uleb128 0x11
 1321 05fc F3030000 		.4byte	.LASF47
 1322 0600 01       		.byte	0x1
 1323 0601 55       		.byte	0x55
 1324 0602 68000000 		.4byte	0x68
 1325 0606 05       		.uleb128 0x5
 1326 0607 03       		.byte	0x3
 1327 0608 00000000 		.4byte	colour_flag
 1328 060c 11       		.uleb128 0x11
 1329 060d 58060000 		.4byte	.LASF48
 1330 0611 01       		.byte	0x1
 1331 0612 21       		.byte	0x21
 1332 0613 68000000 		.4byte	0x68
 1333 0617 05       		.uleb128 0x5
 1334 0618 03       		.byte	0x3
 1335 0619 00000000 		.4byte	state
 1336 061d 11       		.uleb128 0x11
 1337 061e 8A050000 		.4byte	.LASF49
 1338 0622 01       		.byte	0x1
 1339 0623 5B       		.byte	0x5b
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 34


 1340 0624 68000000 		.4byte	0x68
 1341 0628 05       		.uleb128 0x5
 1342 0629 03       		.byte	0x3
 1343 062a 00000000 		.4byte	moving
 1344 062e 12       		.uleb128 0x12
 1345 062f 81000000 		.4byte	0x81
 1346 0633 3E060000 		.4byte	0x63e
 1347 0637 13       		.uleb128 0x13
 1348 0638 9D000000 		.4byte	0x9d
 1349 063c 01       		.byte	0x1
 1350 063d 00       		.byte	0
 1351 063e 11       		.uleb128 0x11
 1352 063f AD000000 		.4byte	.LASF50
 1353 0643 01       		.byte	0x1
 1354 0644 3A       		.byte	0x3a
 1355 0645 2E060000 		.4byte	0x62e
 1356 0649 05       		.uleb128 0x5
 1357 064a 03       		.byte	0x3
 1358 064b 00000000 		.4byte	currentPosition
 1359 064f 11       		.uleb128 0x11
 1360 0650 B3050000 		.4byte	.LASF51
 1361 0654 01       		.byte	0x1
 1362 0655 3B       		.byte	0x3b
 1363 0656 2E060000 		.4byte	0x62e
 1364 065a 05       		.uleb128 0x5
 1365 065b 03       		.byte	0x3
 1366 065c 00000000 		.4byte	desiredPosition
 1367 0660 11       		.uleb128 0x11
 1368 0661 D0040000 		.4byte	.LASF52
 1369 0665 01       		.byte	0x1
 1370 0666 3C       		.byte	0x3c
 1371 0667 68000000 		.4byte	0x68
 1372 066b 05       		.uleb128 0x5
 1373 066c 03       		.byte	0x3
 1374 066d 00000000 		.4byte	currentOrientation
 1375 0671 11       		.uleb128 0x11
 1376 0672 2D010000 		.4byte	.LASF53
 1377 0676 01       		.byte	0x1
 1378 0677 3D       		.byte	0x3d
 1379 0678 68000000 		.4byte	0x68
 1380 067c 05       		.uleb128 0x5
 1381 067d 03       		.byte	0x3
 1382 067e 00000000 		.4byte	desiredOrientation
 1383 0682 11       		.uleb128 0x11
 1384 0683 34040000 		.4byte	.LASF54
 1385 0687 01       		.byte	0x1
 1386 0688 3F       		.byte	0x3f
 1387 0689 33000000 		.4byte	0x33
 1388 068d 05       		.uleb128 0x5
 1389 068e 03       		.byte	0x3
 1390 068f 00000000 		.4byte	moveNow
 1391 0693 11       		.uleb128 0x11
 1392 0694 F8060000 		.4byte	.LASF55
 1393 0698 01       		.byte	0x1
 1394 0699 4C       		.byte	0x4c
 1395 069a 33000000 		.4byte	0x33
 1396 069e 05       		.uleb128 0x5
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 35


 1397 069f 03       		.byte	0x3
 1398 06a0 00000000 		.4byte	moveLeftAllowed
 1399 06a4 11       		.uleb128 0x11
 1400 06a5 18070000 		.4byte	.LASF56
 1401 06a9 01       		.byte	0x1
 1402 06aa 4D       		.byte	0x4d
 1403 06ab 33000000 		.4byte	0x33
 1404 06af 05       		.uleb128 0x5
 1405 06b0 03       		.byte	0x3
 1406 06b1 00000000 		.4byte	moveRightAllowed
 1407 06b5 11       		.uleb128 0x11
 1408 06b6 E3040000 		.4byte	.LASF57
 1409 06ba 01       		.byte	0x1
 1410 06bb 4E       		.byte	0x4e
 1411 06bc 33000000 		.4byte	0x33
 1412 06c0 05       		.uleb128 0x5
 1413 06c1 03       		.byte	0x3
 1414 06c2 00000000 		.4byte	moveForwardAllowed
 1415 06c6 11       		.uleb128 0x11
 1416 06c7 7F010000 		.4byte	.LASF58
 1417 06cb 01       		.byte	0x1
 1418 06cc 4F       		.byte	0x4f
 1419 06cd 33000000 		.4byte	0x33
 1420 06d1 05       		.uleb128 0x5
 1421 06d2 03       		.byte	0x3
 1422 06d3 00000000 		.4byte	moveBackwardAllowed
 1423 06d7 11       		.uleb128 0x11
 1424 06d8 52020000 		.4byte	.LASF59
 1425 06dc 01       		.byte	0x1
 1426 06dd 22       		.byte	0x22
 1427 06de 68000000 		.4byte	0x68
 1428 06e2 05       		.uleb128 0x5
 1429 06e3 03       		.byte	0x3
 1430 06e4 00000000 		.4byte	running
 1431 06e8 11       		.uleb128 0x11
 1432 06e9 3D020000 		.4byte	.LASF60
 1433 06ed 01       		.byte	0x1
 1434 06ee 27       		.byte	0x27
 1435 06ef 68000000 		.4byte	0x68
 1436 06f3 05       		.uleb128 0x5
 1437 06f4 03       		.byte	0x3
 1438 06f5 00000000 		.4byte	currentPuckStackSize
 1439 06f9 12       		.uleb128 0x12
 1440 06fa 68000000 		.4byte	0x68
 1441 06fe 09070000 		.4byte	0x709
 1442 0702 13       		.uleb128 0x13
 1443 0703 9D000000 		.4byte	0x9d
 1444 0707 02       		.byte	0x2
 1445 0708 00       		.byte	0
 1446 0709 11       		.uleb128 0x11
 1447 070a 7A000000 		.4byte	.LASF61
 1448 070e 01       		.byte	0x1
 1449 070f 29       		.byte	0x29
 1450 0710 F9060000 		.4byte	0x6f9
 1451 0714 05       		.uleb128 0x5
 1452 0715 03       		.byte	0x3
 1453 0716 00000000 		.4byte	puckConstructionPlan
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 36


 1454 071a 11       		.uleb128 0x11
 1455 071b 5E050000 		.4byte	.LASF62
 1456 071f 01       		.byte	0x1
 1457 0720 31       		.byte	0x31
 1458 0721 81000000 		.4byte	0x81
 1459 0725 05       		.uleb128 0x5
 1460 0726 03       		.byte	0x3
 1461 0727 00000000 		.4byte	horizontalPuckGrid
 1462 072b 11       		.uleb128 0x11
 1463 072c F1000000 		.4byte	.LASF63
 1464 0730 01       		.byte	0x1
 1465 0731 35       		.byte	0x35
 1466 0732 68000000 		.4byte	0x68
 1467 0736 05       		.uleb128 0x5
 1468 0737 03       		.byte	0x3
 1469 0738 00000000 		.4byte	beginNavigation
 1470 073c 11       		.uleb128 0x11
 1471 073d E7070000 		.4byte	.LASF64
 1472 0741 01       		.byte	0x1
 1473 0742 37       		.byte	0x37
 1474 0743 68000000 		.4byte	0x68
 1475 0747 05       		.uleb128 0x5
 1476 0748 03       		.byte	0x3
 1477 0749 00000000 		.4byte	pathToPucks
 1478 074d 11       		.uleb128 0x11
 1479 074e 1A030000 		.4byte	.LASF65
 1480 0752 01       		.byte	0x1
 1481 0753 38       		.byte	0x38
 1482 0754 68000000 		.4byte	0x68
 1483 0758 05       		.uleb128 0x5
 1484 0759 03       		.byte	0x3
 1485 075a 00000000 		.4byte	pathPastBlock
 1486 075e 11       		.uleb128 0x11
 1487 075f 94040000 		.4byte	.LASF66
 1488 0763 01       		.byte	0x1
 1489 0764 54       		.byte	0x54
 1490 0765 68000000 		.4byte	0x68
 1491 0769 05       		.uleb128 0x5
 1492 076a 03       		.byte	0x3
 1493 076b 00000000 		.4byte	idac_value
 1494 076f 11       		.uleb128 0x11
 1495 0770 71050000 		.4byte	.LASF67
 1496 0774 01       		.byte	0x1
 1497 0775 56       		.byte	0x56
 1498 0776 68000000 		.4byte	0x68
 1499 077a 05       		.uleb128 0x5
 1500 077b 03       		.byte	0x3
 1501 077c 00000000 		.4byte	colour_sensing_algorithm
 1502 0780 11       		.uleb128 0x11
 1503 0781 4B050000 		.4byte	.LASF68
 1504 0785 01       		.byte	0x1
 1505 0786 5D       		.byte	0x5d
 1506 0787 91070000 		.4byte	0x791
 1507 078b 05       		.uleb128 0x5
 1508 078c 03       		.byte	0x3
 1509 078d 00000000 		.4byte	PLAN_SCAN_VERTICAL
 1510 0791 14       		.uleb128 0x14
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 37


 1511 0792 68000000 		.4byte	0x68
 1512 0796 11       		.uleb128 0x11
 1513 0797 F6040000 		.4byte	.LASF69
 1514 079b 01       		.byte	0x1
 1515 079c 5F       		.byte	0x5f
 1516 079d 68000000 		.4byte	0x68
 1517 07a1 05       		.uleb128 0x5
 1518 07a2 03       		.byte	0x3
 1519 07a3 00000000 		.4byte	current_stage
 1520 07a7 15       		.uleb128 0x15
 1521 07a8 7F020000 		.4byte	.LASF70
 1522 07ac 7F020000 		.4byte	.LASF70
 1523 07b0 05       		.byte	0x5
 1524 07b1 19       		.byte	0x19
 1525 07b2 15       		.uleb128 0x15
 1526 07b3 CA070000 		.4byte	.LASF71
 1527 07b7 CA070000 		.4byte	.LASF71
 1528 07bb 08       		.byte	0x8
 1529 07bc 76       		.byte	0x76
 1530 07bd 15       		.uleb128 0x15
 1531 07be 91050000 		.4byte	.LASF72
 1532 07c2 91050000 		.4byte	.LASF72
 1533 07c6 07       		.byte	0x7
 1534 07c7 1F       		.byte	0x1f
 1535 07c8 15       		.uleb128 0x15
 1536 07c9 99000000 		.4byte	.LASF73
 1537 07cd 99000000 		.4byte	.LASF73
 1538 07d1 07       		.byte	0x7
 1539 07d2 20       		.byte	0x20
 1540 07d3 15       		.uleb128 0x15
 1541 07d4 F5020000 		.4byte	.LASF74
 1542 07d8 F5020000 		.4byte	.LASF74
 1543 07dc 09       		.byte	0x9
 1544 07dd 5E       		.byte	0x5e
 1545 07de 15       		.uleb128 0x15
 1546 07df CF030000 		.4byte	.LASF75
 1547 07e3 CF030000 		.4byte	.LASF75
 1548 07e7 09       		.byte	0x9
 1549 07e8 5B       		.byte	0x5b
 1550 07e9 15       		.uleb128 0x15
 1551 07ea 35080000 		.4byte	.LASF76
 1552 07ee 35080000 		.4byte	.LASF76
 1553 07f2 0A       		.byte	0xa
 1554 07f3 5D       		.byte	0x5d
 1555 07f4 15       		.uleb128 0x15
 1556 07f5 9F040000 		.4byte	.LASF77
 1557 07f9 9F040000 		.4byte	.LASF77
 1558 07fd 0B       		.byte	0xb
 1559 07fe 5D       		.byte	0x5d
 1560 07ff 15       		.uleb128 0x15
 1561 0800 93010000 		.4byte	.LASF78
 1562 0804 93010000 		.4byte	.LASF78
 1563 0808 07       		.byte	0x7
 1564 0809 14       		.byte	0x14
 1565 080a 15       		.uleb128 0x15
 1566 080b 23050000 		.4byte	.LASF79
 1567 080f 23050000 		.4byte	.LASF79
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 38


 1568 0813 0C       		.byte	0xc
 1569 0814 3D       		.byte	0x3d
 1570 0815 15       		.uleb128 0x15
 1571 0816 E6030000 		.4byte	.LASF80
 1572 081a E6030000 		.4byte	.LASF80
 1573 081e 0D       		.byte	0xd
 1574 081f 54       		.byte	0x54
 1575 0820 15       		.uleb128 0x15
 1576 0821 1B060000 		.4byte	.LASF81
 1577 0825 1B060000 		.4byte	.LASF81
 1578 0829 0D       		.byte	0xd
 1579 082a 8B       		.byte	0x8b
 1580 082b 15       		.uleb128 0x15
 1581 082c 28030000 		.4byte	.LASF82
 1582 0830 28030000 		.4byte	.LASF82
 1583 0834 0E       		.byte	0xe
 1584 0835 3A       		.byte	0x3a
 1585 0836 15       		.uleb128 0x15
 1586 0837 C2040000 		.4byte	.LASF83
 1587 083b C2040000 		.4byte	.LASF83
 1588 083f 0F       		.byte	0xf
 1589 0840 3C       		.byte	0x3c
 1590 0841 15       		.uleb128 0x15
 1591 0842 19040000 		.4byte	.LASF84
 1592 0846 19040000 		.4byte	.LASF84
 1593 084a 0F       		.byte	0xf
 1594 084b 40       		.byte	0x40
 1595 084c 15       		.uleb128 0x15
 1596 084d DC050000 		.4byte	.LASF85
 1597 0851 DC050000 		.4byte	.LASF85
 1598 0855 0F       		.byte	0xf
 1599 0856 41       		.byte	0x41
 1600 0857 15       		.uleb128 0x15
 1601 0858 3B030000 		.4byte	.LASF86
 1602 085c 3B030000 		.4byte	.LASF86
 1603 0860 10       		.byte	0x10
 1604 0861 2F       		.byte	0x2f
 1605 0862 15       		.uleb128 0x15
 1606 0863 67040000 		.4byte	.LASF87
 1607 0867 67040000 		.4byte	.LASF87
 1608 086b 11       		.byte	0x11
 1609 086c 2F       		.byte	0x2f
 1610 086d 15       		.uleb128 0x15
 1611 086e 15010000 		.4byte	.LASF88
 1612 0872 15010000 		.4byte	.LASF88
 1613 0876 12       		.byte	0x12
 1614 0877 19       		.byte	0x19
 1615 0878 15       		.uleb128 0x15
 1616 0879 BB010000 		.4byte	.LASF89
 1617 087d BB010000 		.4byte	.LASF89
 1618 0881 13       		.byte	0x13
 1619 0882 92       		.byte	0x92
 1620 0883 15       		.uleb128 0x15
 1621 0884 B3030000 		.4byte	.LASF90
 1622 0888 B3030000 		.4byte	.LASF90
 1623 088c 13       		.byte	0x13
 1624 088d C3       		.byte	0xc3
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 39


 1625 088e 15       		.uleb128 0x15
 1626 088f 4D010000 		.4byte	.LASF91
 1627 0893 4D010000 		.4byte	.LASF91
 1628 0897 13       		.byte	0x13
 1629 0898 DC       		.byte	0xdc
 1630 0899 15       		.uleb128 0x15
 1631 089a 67020000 		.4byte	.LASF92
 1632 089e 67020000 		.4byte	.LASF92
 1633 08a2 14       		.byte	0x14
 1634 08a3 92       		.byte	0x92
 1635 08a4 15       		.uleb128 0x15
 1636 08a5 04050000 		.4byte	.LASF93
 1637 08a9 04050000 		.4byte	.LASF93
 1638 08ad 14       		.byte	0x14
 1639 08ae C3       		.byte	0xc3
 1640 08af 15       		.uleb128 0x15
 1641 08b0 40060000 		.4byte	.LASF94
 1642 08b4 40060000 		.4byte	.LASF94
 1643 08b8 14       		.byte	0x14
 1644 08b9 DC       		.byte	0xdc
 1645 08ba 15       		.uleb128 0x15
 1646 08bb A5050000 		.4byte	.LASF95
 1647 08bf A5050000 		.4byte	.LASF95
 1648 08c3 15       		.byte	0x15
 1649 08c4 5A       		.byte	0x5a
 1650 08c5 15       		.uleb128 0x15
 1651 08c6 A0010000 		.4byte	.LASF96
 1652 08ca A0010000 		.4byte	.LASF96
 1653 08ce 15       		.byte	0x15
 1654 08cf 5E       		.byte	0x5e
 1655 08d0 15       		.uleb128 0x15
 1656 08d1 BD000000 		.4byte	.LASF97
 1657 08d5 BD000000 		.4byte	.LASF97
 1658 08d9 16       		.byte	0x16
 1659 08da 18       		.byte	0x18
 1660 08db 15       		.uleb128 0x15
 1661 08dc 06060000 		.4byte	.LASF98
 1662 08e0 06060000 		.4byte	.LASF98
 1663 08e4 17       		.byte	0x17
 1664 08e5 18       		.byte	0x18
 1665 08e6 15       		.uleb128 0x15
 1666 08e7 D2070000 		.4byte	.LASF99
 1667 08eb D2070000 		.4byte	.LASF99
 1668 08ef 18       		.byte	0x18
 1669 08f0 92       		.byte	0x92
 1670 08f1 15       		.uleb128 0x15
 1671 08f2 F3070000 		.4byte	.LASF100
 1672 08f6 F3070000 		.4byte	.LASF100
 1673 08fa 19       		.byte	0x19
 1674 08fb 92       		.byte	0x92
 1675 08fc 15       		.uleb128 0x15
 1676 08fd 14000000 		.4byte	.LASF101
 1677 0901 14000000 		.4byte	.LASF101
 1678 0905 07       		.byte	0x7
 1679 0906 13       		.byte	0x13
 1680 0907 15       		.uleb128 0x15
 1681 0908 62010000 		.4byte	.LASF102
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 40


 1682 090c 62010000 		.4byte	.LASF102
 1683 0910 0A       		.byte	0xa
 1684 0911 4F       		.byte	0x4f
 1685 0912 15       		.uleb128 0x15
 1686 0913 79030000 		.4byte	.LASF103
 1687 0917 79030000 		.4byte	.LASF103
 1688 091b 0B       		.byte	0xb
 1689 091c 4F       		.byte	0x4f
 1690 091d 15       		.uleb128 0x15
 1691 091e 1D080000 		.4byte	.LASF104
 1692 0922 1D080000 		.4byte	.LASF104
 1693 0926 09       		.byte	0x9
 1694 0927 5A       		.byte	0x5a
 1695 0928 15       		.uleb128 0x15
 1696 0929 D0010000 		.4byte	.LASF105
 1697 092d D0010000 		.4byte	.LASF105
 1698 0931 1A       		.byte	0x1a
 1699 0932 18       		.byte	0x18
 1700 0933 15       		.uleb128 0x15
 1701 0934 D2020000 		.4byte	.LASF106
 1702 0938 D2020000 		.4byte	.LASF106
 1703 093c 1B       		.byte	0x1b
 1704 093d 18       		.byte	0x18
 1705 093e 15       		.uleb128 0x15
 1706 093f F3010000 		.4byte	.LASF107
 1707 0943 F3010000 		.4byte	.LASF107
 1708 0947 1C       		.byte	0x1c
 1709 0948 18       		.byte	0x18
 1710 0949 15       		.uleb128 0x15
 1711 094a B1020000 		.4byte	.LASF108
 1712 094e B1020000 		.4byte	.LASF108
 1713 0952 1D       		.byte	0x1d
 1714 0953 0F       		.byte	0xf
 1715 0954 15       		.uleb128 0x15
 1716 0955 56000000 		.4byte	.LASF109
 1717 0959 56000000 		.4byte	.LASF109
 1718 095d 12       		.byte	0x12
 1719 095e 1C       		.byte	0x1c
 1720 095f 00       		.byte	0
 1721              		.section	.debug_abbrev,"",%progbits
 1722              	.Ldebug_abbrev0:
 1723 0000 01       		.uleb128 0x1
 1724 0001 11       		.uleb128 0x11
 1725 0002 01       		.byte	0x1
 1726 0003 25       		.uleb128 0x25
 1727 0004 0E       		.uleb128 0xe
 1728 0005 13       		.uleb128 0x13
 1729 0006 0B       		.uleb128 0xb
 1730 0007 03       		.uleb128 0x3
 1731 0008 0E       		.uleb128 0xe
 1732 0009 1B       		.uleb128 0x1b
 1733 000a 0E       		.uleb128 0xe
 1734 000b 55       		.uleb128 0x55
 1735 000c 17       		.uleb128 0x17
 1736 000d 11       		.uleb128 0x11
 1737 000e 01       		.uleb128 0x1
 1738 000f 10       		.uleb128 0x10
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 41


 1739 0010 17       		.uleb128 0x17
 1740 0011 00       		.byte	0
 1741 0012 00       		.byte	0
 1742 0013 02       		.uleb128 0x2
 1743 0014 24       		.uleb128 0x24
 1744 0015 00       		.byte	0
 1745 0016 0B       		.uleb128 0xb
 1746 0017 0B       		.uleb128 0xb
 1747 0018 3E       		.uleb128 0x3e
 1748 0019 0B       		.uleb128 0xb
 1749 001a 03       		.uleb128 0x3
 1750 001b 0E       		.uleb128 0xe
 1751 001c 00       		.byte	0
 1752 001d 00       		.byte	0
 1753 001e 03       		.uleb128 0x3
 1754 001f 16       		.uleb128 0x16
 1755 0020 00       		.byte	0
 1756 0021 03       		.uleb128 0x3
 1757 0022 0E       		.uleb128 0xe
 1758 0023 3A       		.uleb128 0x3a
 1759 0024 0B       		.uleb128 0xb
 1760 0025 3B       		.uleb128 0x3b
 1761 0026 0B       		.uleb128 0xb
 1762 0027 49       		.uleb128 0x49
 1763 0028 13       		.uleb128 0x13
 1764 0029 00       		.byte	0
 1765 002a 00       		.byte	0
 1766 002b 04       		.uleb128 0x4
 1767 002c 24       		.uleb128 0x24
 1768 002d 00       		.byte	0
 1769 002e 0B       		.uleb128 0xb
 1770 002f 0B       		.uleb128 0xb
 1771 0030 3E       		.uleb128 0x3e
 1772 0031 0B       		.uleb128 0xb
 1773 0032 03       		.uleb128 0x3
 1774 0033 08       		.uleb128 0x8
 1775 0034 00       		.byte	0
 1776 0035 00       		.byte	0
 1777 0036 05       		.uleb128 0x5
 1778 0037 2E       		.uleb128 0x2e
 1779 0038 01       		.byte	0x1
 1780 0039 3F       		.uleb128 0x3f
 1781 003a 19       		.uleb128 0x19
 1782 003b 03       		.uleb128 0x3
 1783 003c 08       		.uleb128 0x8
 1784 003d 3A       		.uleb128 0x3a
 1785 003e 0B       		.uleb128 0xb
 1786 003f 3B       		.uleb128 0x3b
 1787 0040 0B       		.uleb128 0xb
 1788 0041 27       		.uleb128 0x27
 1789 0042 19       		.uleb128 0x19
 1790 0043 11       		.uleb128 0x11
 1791 0044 01       		.uleb128 0x1
 1792 0045 12       		.uleb128 0x12
 1793 0046 06       		.uleb128 0x6
 1794 0047 40       		.uleb128 0x40
 1795 0048 18       		.uleb128 0x18
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 42


 1796 0049 9742     		.uleb128 0x2117
 1797 004b 19       		.uleb128 0x19
 1798 004c 01       		.uleb128 0x1
 1799 004d 13       		.uleb128 0x13
 1800 004e 00       		.byte	0
 1801 004f 00       		.byte	0
 1802 0050 06       		.uleb128 0x6
 1803 0051 898201   		.uleb128 0x4109
 1804 0054 00       		.byte	0
 1805 0055 11       		.uleb128 0x11
 1806 0056 01       		.uleb128 0x1
 1807 0057 31       		.uleb128 0x31
 1808 0058 13       		.uleb128 0x13
 1809 0059 00       		.byte	0
 1810 005a 00       		.byte	0
 1811 005b 07       		.uleb128 0x7
 1812 005c 2E       		.uleb128 0x2e
 1813 005d 01       		.byte	0x1
 1814 005e 3F       		.uleb128 0x3f
 1815 005f 19       		.uleb128 0x19
 1816 0060 03       		.uleb128 0x3
 1817 0061 0E       		.uleb128 0xe
 1818 0062 3A       		.uleb128 0x3a
 1819 0063 0B       		.uleb128 0xb
 1820 0064 3B       		.uleb128 0x3b
 1821 0065 0B       		.uleb128 0xb
 1822 0066 27       		.uleb128 0x27
 1823 0067 19       		.uleb128 0x19
 1824 0068 11       		.uleb128 0x11
 1825 0069 01       		.uleb128 0x1
 1826 006a 12       		.uleb128 0x12
 1827 006b 06       		.uleb128 0x6
 1828 006c 40       		.uleb128 0x40
 1829 006d 18       		.uleb128 0x18
 1830 006e 9742     		.uleb128 0x2117
 1831 0070 19       		.uleb128 0x19
 1832 0071 01       		.uleb128 0x1
 1833 0072 13       		.uleb128 0x13
 1834 0073 00       		.byte	0
 1835 0074 00       		.byte	0
 1836 0075 08       		.uleb128 0x8
 1837 0076 898201   		.uleb128 0x4109
 1838 0079 01       		.byte	0x1
 1839 007a 11       		.uleb128 0x11
 1840 007b 01       		.uleb128 0x1
 1841 007c 31       		.uleb128 0x31
 1842 007d 13       		.uleb128 0x13
 1843 007e 00       		.byte	0
 1844 007f 00       		.byte	0
 1845 0080 09       		.uleb128 0x9
 1846 0081 8A8201   		.uleb128 0x410a
 1847 0084 00       		.byte	0
 1848 0085 02       		.uleb128 0x2
 1849 0086 18       		.uleb128 0x18
 1850 0087 9142     		.uleb128 0x2111
 1851 0089 18       		.uleb128 0x18
 1852 008a 00       		.byte	0
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 43


 1853 008b 00       		.byte	0
 1854 008c 0A       		.uleb128 0xa
 1855 008d 2E       		.uleb128 0x2e
 1856 008e 01       		.byte	0x1
 1857 008f 3F       		.uleb128 0x3f
 1858 0090 19       		.uleb128 0x19
 1859 0091 03       		.uleb128 0x3
 1860 0092 0E       		.uleb128 0xe
 1861 0093 3A       		.uleb128 0x3a
 1862 0094 0B       		.uleb128 0xb
 1863 0095 3B       		.uleb128 0x3b
 1864 0096 0B       		.uleb128 0xb
 1865 0097 27       		.uleb128 0x27
 1866 0098 19       		.uleb128 0x19
 1867 0099 49       		.uleb128 0x49
 1868 009a 13       		.uleb128 0x13
 1869 009b 8701     		.uleb128 0x87
 1870 009d 19       		.uleb128 0x19
 1871 009e 11       		.uleb128 0x11
 1872 009f 01       		.uleb128 0x1
 1873 00a0 12       		.uleb128 0x12
 1874 00a1 06       		.uleb128 0x6
 1875 00a2 40       		.uleb128 0x40
 1876 00a3 18       		.uleb128 0x18
 1877 00a4 9742     		.uleb128 0x2117
 1878 00a6 19       		.uleb128 0x19
 1879 00a7 01       		.uleb128 0x1
 1880 00a8 13       		.uleb128 0x13
 1881 00a9 00       		.byte	0
 1882 00aa 00       		.byte	0
 1883 00ab 0B       		.uleb128 0xb
 1884 00ac 34       		.uleb128 0x34
 1885 00ad 00       		.byte	0
 1886 00ae 03       		.uleb128 0x3
 1887 00af 0E       		.uleb128 0xe
 1888 00b0 3A       		.uleb128 0x3a
 1889 00b1 0B       		.uleb128 0xb
 1890 00b2 3B       		.uleb128 0x3b
 1891 00b3 0B       		.uleb128 0xb
 1892 00b4 49       		.uleb128 0x49
 1893 00b5 13       		.uleb128 0x13
 1894 00b6 1C       		.uleb128 0x1c
 1895 00b7 0B       		.uleb128 0xb
 1896 00b8 00       		.byte	0
 1897 00b9 00       		.byte	0
 1898 00ba 0C       		.uleb128 0xc
 1899 00bb 898201   		.uleb128 0x4109
 1900 00be 01       		.byte	0x1
 1901 00bf 11       		.uleb128 0x11
 1902 00c0 01       		.uleb128 0x1
 1903 00c1 31       		.uleb128 0x31
 1904 00c2 13       		.uleb128 0x13
 1905 00c3 01       		.uleb128 0x1
 1906 00c4 13       		.uleb128 0x13
 1907 00c5 00       		.byte	0
 1908 00c6 00       		.byte	0
 1909 00c7 0D       		.uleb128 0xd
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 44


 1910 00c8 2E       		.uleb128 0x2e
 1911 00c9 01       		.byte	0x1
 1912 00ca 3F       		.uleb128 0x3f
 1913 00cb 19       		.uleb128 0x19
 1914 00cc 03       		.uleb128 0x3
 1915 00cd 0E       		.uleb128 0xe
 1916 00ce 3A       		.uleb128 0x3a
 1917 00cf 0B       		.uleb128 0xb
 1918 00d0 3B       		.uleb128 0x3b
 1919 00d1 05       		.uleb128 0x5
 1920 00d2 27       		.uleb128 0x27
 1921 00d3 19       		.uleb128 0x19
 1922 00d4 11       		.uleb128 0x11
 1923 00d5 01       		.uleb128 0x1
 1924 00d6 12       		.uleb128 0x12
 1925 00d7 06       		.uleb128 0x6
 1926 00d8 40       		.uleb128 0x40
 1927 00d9 18       		.uleb128 0x18
 1928 00da 9742     		.uleb128 0x2117
 1929 00dc 19       		.uleb128 0x19
 1930 00dd 01       		.uleb128 0x1
 1931 00de 13       		.uleb128 0x13
 1932 00df 00       		.byte	0
 1933 00e0 00       		.byte	0
 1934 00e1 0E       		.uleb128 0xe
 1935 00e2 34       		.uleb128 0x34
 1936 00e3 00       		.byte	0
 1937 00e4 03       		.uleb128 0x3
 1938 00e5 0E       		.uleb128 0xe
 1939 00e6 3A       		.uleb128 0x3a
 1940 00e7 0B       		.uleb128 0xb
 1941 00e8 3B       		.uleb128 0x3b
 1942 00e9 05       		.uleb128 0x5
 1943 00ea 49       		.uleb128 0x49
 1944 00eb 13       		.uleb128 0x13
 1945 00ec 02       		.uleb128 0x2
 1946 00ed 17       		.uleb128 0x17
 1947 00ee 00       		.byte	0
 1948 00ef 00       		.byte	0
 1949 00f0 0F       		.uleb128 0xf
 1950 00f1 34       		.uleb128 0x34
 1951 00f2 00       		.byte	0
 1952 00f3 03       		.uleb128 0x3
 1953 00f4 0E       		.uleb128 0xe
 1954 00f5 3A       		.uleb128 0x3a
 1955 00f6 0B       		.uleb128 0xb
 1956 00f7 3B       		.uleb128 0x3b
 1957 00f8 05       		.uleb128 0x5
 1958 00f9 49       		.uleb128 0x49
 1959 00fa 13       		.uleb128 0x13
 1960 00fb 3F       		.uleb128 0x3f
 1961 00fc 19       		.uleb128 0x19
 1962 00fd 3C       		.uleb128 0x3c
 1963 00fe 19       		.uleb128 0x19
 1964 00ff 00       		.byte	0
 1965 0100 00       		.byte	0
 1966 0101 10       		.uleb128 0x10
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 45


 1967 0102 35       		.uleb128 0x35
 1968 0103 00       		.byte	0
 1969 0104 49       		.uleb128 0x49
 1970 0105 13       		.uleb128 0x13
 1971 0106 00       		.byte	0
 1972 0107 00       		.byte	0
 1973 0108 11       		.uleb128 0x11
 1974 0109 34       		.uleb128 0x34
 1975 010a 00       		.byte	0
 1976 010b 03       		.uleb128 0x3
 1977 010c 0E       		.uleb128 0xe
 1978 010d 3A       		.uleb128 0x3a
 1979 010e 0B       		.uleb128 0xb
 1980 010f 3B       		.uleb128 0x3b
 1981 0110 0B       		.uleb128 0xb
 1982 0111 49       		.uleb128 0x49
 1983 0112 13       		.uleb128 0x13
 1984 0113 3F       		.uleb128 0x3f
 1985 0114 19       		.uleb128 0x19
 1986 0115 02       		.uleb128 0x2
 1987 0116 18       		.uleb128 0x18
 1988 0117 00       		.byte	0
 1989 0118 00       		.byte	0
 1990 0119 12       		.uleb128 0x12
 1991 011a 01       		.uleb128 0x1
 1992 011b 01       		.byte	0x1
 1993 011c 49       		.uleb128 0x49
 1994 011d 13       		.uleb128 0x13
 1995 011e 01       		.uleb128 0x1
 1996 011f 13       		.uleb128 0x13
 1997 0120 00       		.byte	0
 1998 0121 00       		.byte	0
 1999 0122 13       		.uleb128 0x13
 2000 0123 21       		.uleb128 0x21
 2001 0124 00       		.byte	0
 2002 0125 49       		.uleb128 0x49
 2003 0126 13       		.uleb128 0x13
 2004 0127 2F       		.uleb128 0x2f
 2005 0128 0B       		.uleb128 0xb
 2006 0129 00       		.byte	0
 2007 012a 00       		.byte	0
 2008 012b 14       		.uleb128 0x14
 2009 012c 26       		.uleb128 0x26
 2010 012d 00       		.byte	0
 2011 012e 49       		.uleb128 0x49
 2012 012f 13       		.uleb128 0x13
 2013 0130 00       		.byte	0
 2014 0131 00       		.byte	0
 2015 0132 15       		.uleb128 0x15
 2016 0133 2E       		.uleb128 0x2e
 2017 0134 00       		.byte	0
 2018 0135 3F       		.uleb128 0x3f
 2019 0136 19       		.uleb128 0x19
 2020 0137 3C       		.uleb128 0x3c
 2021 0138 19       		.uleb128 0x19
 2022 0139 6E       		.uleb128 0x6e
 2023 013a 0E       		.uleb128 0xe
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 46


 2024 013b 03       		.uleb128 0x3
 2025 013c 0E       		.uleb128 0xe
 2026 013d 3A       		.uleb128 0x3a
 2027 013e 0B       		.uleb128 0xb
 2028 013f 3B       		.uleb128 0x3b
 2029 0140 0B       		.uleb128 0xb
 2030 0141 00       		.byte	0
 2031 0142 00       		.byte	0
 2032 0143 00       		.byte	0
 2033              		.section	.debug_loc,"",%progbits
 2034              	.Ldebug_loc0:
 2035              	.LLST0:
 2036 0000 02000000 		.4byte	.LVL47
 2037 0004 12000000 		.4byte	.LVL49
 2038 0008 0200     		.2byte	0x2
 2039 000a 30       		.byte	0x30
 2040 000b 9F       		.byte	0x9f
 2041 000c 12000000 		.4byte	.LVL49
 2042 0010 3C000000 		.4byte	.LVL56
 2043 0014 0100     		.2byte	0x1
 2044 0016 55       		.byte	0x55
 2045 0017 00000000 		.4byte	0
 2046 001b 00000000 		.4byte	0
 2047              	.LLST1:
 2048 001f 1E000000 		.4byte	.LVL52
 2049 0023 20000000 		.4byte	.LVL53
 2050 0027 0100     		.2byte	0x1
 2051 0029 50       		.byte	0x50
 2052 002a 20000000 		.4byte	.LVL53
 2053 002e 36000000 		.4byte	.LVL55
 2054 0032 0100     		.2byte	0x1
 2055 0034 54       		.byte	0x54
 2056 0035 00000000 		.4byte	0
 2057 0039 00000000 		.4byte	0
 2058              		.section	.debug_aranges,"",%progbits
 2059 0000 4C000000 		.4byte	0x4c
 2060 0004 0200     		.2byte	0x2
 2061 0006 00000000 		.4byte	.Ldebug_info0
 2062 000a 04       		.byte	0x4
 2063 000b 00       		.byte	0
 2064 000c 0000     		.2byte	0
 2065 000e 0000     		.2byte	0
 2066 0010 00000000 		.4byte	.LFB64
 2067 0014 08000000 		.4byte	.LFE64-.LFB64
 2068 0018 00000000 		.4byte	.LFB65
 2069 001c 20000000 		.4byte	.LFE65-.LFB65
 2070 0020 00000000 		.4byte	.LFB66
 2071 0024 08000000 		.4byte	.LFE66-.LFB66
 2072 0028 00000000 		.4byte	.LFB67
 2073 002c 08000000 		.4byte	.LFE67-.LFB67
 2074 0030 00000000 		.4byte	.LFB68
 2075 0034 28000000 		.4byte	.LFE68-.LFB68
 2076 0038 00000000 		.4byte	.LFB69
 2077 003c 04010000 		.4byte	.LFE69-.LFB69
 2078 0040 00000000 		.4byte	.LFB70
 2079 0044 44000000 		.4byte	.LFE70-.LFB70
 2080 0048 00000000 		.4byte	0
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 47


 2081 004c 00000000 		.4byte	0
 2082              		.section	.debug_ranges,"",%progbits
 2083              	.Ldebug_ranges0:
 2084 0000 00000000 		.4byte	.LFB64
 2085 0004 08000000 		.4byte	.LFE64
 2086 0008 00000000 		.4byte	.LFB65
 2087 000c 20000000 		.4byte	.LFE65
 2088 0010 00000000 		.4byte	.LFB66
 2089 0014 08000000 		.4byte	.LFE66
 2090 0018 00000000 		.4byte	.LFB67
 2091 001c 08000000 		.4byte	.LFE67
 2092 0020 00000000 		.4byte	.LFB68
 2093 0024 28000000 		.4byte	.LFE68
 2094 0028 00000000 		.4byte	.LFB69
 2095 002c 04010000 		.4byte	.LFE69
 2096 0030 00000000 		.4byte	.LFB70
 2097 0034 44000000 		.4byte	.LFE70
 2098 0038 00000000 		.4byte	0
 2099 003c 00000000 		.4byte	0
 2100              		.section	.debug_line,"",%progbits
 2101              	.Ldebug_line0:
 2102 0000 B6030000 		.section	.debug_str,"MS",%progbits,1
 2102      0200FE02 
 2102      00000201 
 2102      FB0E0D00 
 2102      01010101 
 2103              	.LASF46:
 2104 0000 6D6F746F 		.ascii	"motor2EncoderCounts\000"
 2104      7232456E 
 2104      636F6465 
 2104      72436F75 
 2104      6E747300 
 2105              	.LASF101:
 2106 0014 6D6F746F 		.ascii	"motorDutyCycleUpdate\000"
 2106      72447574 
 2106      79437963 
 2106      6C655570 
 2106      64617465 
 2107              	.LASF23:
 2108 0029 7075636B 		.ascii	"puck_correct\000"
 2108      5F636F72 
 2108      72656374 
 2108      00
 2109              	.LASF18:
 2110 0036 456E636F 		.ascii	"Encoder_Counts_2_IH\000"
 2110      6465725F 
 2110      436F756E 
 2110      74735F32 
 2110      5F494800 
 2111              	.LASF0:
 2112 004a 7369676E 		.ascii	"signed char\000"
 2112      65642063 
 2112      68617200 
 2113              	.LASF109:
 2114 0056 636F6C6F 		.ascii	"colourSensingOutput\000"
 2114      75725365 
 2114      6E73696E 
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 48


 2114      674F7574 
 2114      70757400 
 2115              	.LASF35:
 2116 006a 7475726E 		.ascii	"turningLeftFlag\000"
 2116      696E674C 
 2116      65667446 
 2116      6C616700 
 2117              	.LASF61:
 2118 007a 7075636B 		.ascii	"puckConstructionPlan\000"
 2118      436F6E73 
 2118      74727563 
 2118      74696F6E 
 2118      506C616E 
 2119              	.LASF2:
 2120 008f 73686F72 		.ascii	"short int\000"
 2120      7420696E 
 2120      7400
 2121              	.LASF73:
 2122 0099 73746F70 		.ascii	"stopMotor2AndUpdate\000"
 2122      4D6F746F 
 2122      7232416E 
 2122      64557064 
 2122      61746500 
 2123              	.LASF50:
 2124 00ad 63757272 		.ascii	"currentPosition\000"
 2124      656E7450 
 2124      6F736974 
 2124      696F6E00 
 2125              	.LASF97:
 2126 00bd 536F6E69 		.ascii	"Sonic_StartEx\000"
 2126      635F5374 
 2126      61727445 
 2126      7800
 2127              	.LASF33:
 2128 00cb 64726976 		.ascii	"drivingForwardFlag\000"
 2128      696E6746 
 2128      6F727761 
 2128      7264466C 
 2128      616700
 2129              	.LASF20:
 2130 00de 636F6C6F 		.ascii	"colour_calibration\000"
 2130      75725F63 
 2130      616C6962 
 2130      72617469 
 2130      6F6E00
 2131              	.LASF63:
 2132 00f1 62656769 		.ascii	"beginNavigation\000"
 2132      6E4E6176 
 2132      69676174 
 2132      696F6E00 
 2133              	.LASF45:
 2134 0101 6D6F746F 		.ascii	"motor1EncoderCounts\000"
 2134      7231456E 
 2134      636F6465 
 2134      72436F75 
 2134      6E747300 
 2135              	.LASF88:
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 49


 2136 0115 436F6C6F 		.ascii	"ColourSensingInitialise\000"
 2136      75725365 
 2136      6E73696E 
 2136      67496E69 
 2136      7469616C 
 2137              	.LASF53:
 2138 012d 64657369 		.ascii	"desiredOrientation\000"
 2138      7265644F 
 2138      7269656E 
 2138      74617469 
 2138      6F6E00
 2139              	.LASF113:
 2140 0140 6D61696E 		.ascii	"main\000"
 2140      00
 2141              	.LASF16:
 2142 0145 53746172 		.ascii	"StartIH\000"
 2142      74494800 
 2143              	.LASF91:
 2144 014d 5261636B 		.ascii	"Rack_Servo_PWM_Sleep\000"
 2144      5F536572 
 2144      766F5F50 
 2144      574D5F53 
 2144      6C656570 
 2145              	.LASF102:
 2146 0162 4D6F746F 		.ascii	"Motor_1_Encoder_Counts_Start\000"
 2146      725F315F 
 2146      456E636F 
 2146      6465725F 
 2146      436F756E 
 2147              	.LASF58:
 2148 017f 6D6F7665 		.ascii	"moveBackwardAllowed\000"
 2148      4261636B 
 2148      77617264 
 2148      416C6C6F 
 2148      77656400 
 2149              	.LASF78:
 2150 0193 64726966 		.ascii	"driftCorrect\000"
 2150      74436F72 
 2150      72656374 
 2150      00
 2151              	.LASF96:
 2152 01a0 54696D65 		.ascii	"Timer_1_ReadStatusRegister\000"
 2152      725F315F 
 2152      52656164 
 2152      53746174 
 2152      75735265 
 2153              	.LASF89:
 2154 01bb 5261636B 		.ascii	"Rack_Servo_PWM_Start\000"
 2154      5F536572 
 2154      766F5F50 
 2154      574D5F53 
 2154      74617274 
 2155              	.LASF105:
 2156 01d0 456E636F 		.ascii	"Encoder_Counts_1_Interrupt_StartEx\000"
 2156      6465725F 
 2156      436F756E 
 2156      74735F31 
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 50


 2156      5F496E74 
 2157              	.LASF107:
 2158 01f3 44726966 		.ascii	"Drift_Check_Interrupt_StartEx\000"
 2158      745F4368 
 2158      65636B5F 
 2158      496E7465 
 2158      72727570 
 2159              	.LASF26:
 2160 0211 64726976 		.ascii	"driveStraightEnable\000"
 2160      65537472 
 2160      61696768 
 2160      74456E61 
 2160      626C6500 
 2161              	.LASF29:
 2162 0225 7075636B 		.ascii	"puckRackOffsetsFromWest\000"
 2162      5261636B 
 2162      4F666673 
 2162      65747346 
 2162      726F6D57 
 2163              	.LASF60:
 2164 023d 63757272 		.ascii	"currentPuckStackSize\000"
 2164      656E7450 
 2164      75636B53 
 2164      7461636B 
 2164      53697A65 
 2165              	.LASF59:
 2166 0252 72756E6E 		.ascii	"running\000"
 2166      696E6700 
 2167              	.LASF43:
 2168 025a 6D6F746F 		.ascii	"motor1Enable\000"
 2168      7231456E 
 2168      61626C65 
 2168      00
 2169              	.LASF92:
 2170 0267 47726970 		.ascii	"Gripper_Servo_PWM_Start\000"
 2170      7065725F 
 2170      53657276 
 2170      6F5F5057 
 2170      4D5F5374 
 2171              	.LASF70:
 2172 027f 756C7472 		.ascii	"ultrasonicInterruptHandler\000"
 2172      61736F6E 
 2172      6963496E 
 2172      74657272 
 2172      75707448 
 2173              	.LASF36:
 2174 029a 7475726E 		.ascii	"turningRightFlag\000"
 2174      696E6752 
 2174      69676874 
 2174      466C6167 
 2174      00
 2175              	.LASF11:
 2176 02ab 666C6F61 		.ascii	"float\000"
 2176      7400
 2177              	.LASF108:
 2178 02b1 6368616E 		.ascii	"changeHeightToPuck\000"
 2178      67654865 
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 51


 2178      69676874 
 2178      546F5075 
 2178      636B00
 2179              	.LASF6:
 2180 02c4 6C6F6E67 		.ascii	"long long int\000"
 2180      206C6F6E 
 2180      6720696E 
 2180      7400
 2181              	.LASF106:
 2182 02d2 456E636F 		.ascii	"Encoder_Counts_2_Interrupt_StartEx\000"
 2182      6465725F 
 2182      436F756E 
 2182      74735F32 
 2182      5F496E74 
 2183              	.LASF74:
 2184 02f5 44726966 		.ascii	"Drift_Check_Timer_ReadStatusRegister\000"
 2184      745F4368 
 2184      65636B5F 
 2184      54696D65 
 2184      725F5265 
 2185              	.LASF65:
 2186 031a 70617468 		.ascii	"pathPastBlock\000"
 2186      50617374 
 2186      426C6F63 
 2186      6B00
 2187              	.LASF82:
 2188 0328 4144435F 		.ascii	"ADC_Start\000"
 2188      53746172 
 2188      7400
 2189              	.LASF4:
 2190 0332 6C6F6E67 		.ascii	"long int\000"
 2190      20696E74 
 2190      00
 2191              	.LASF86:
 2192 033b 636F6E74 		.ascii	"control_photodiode_Write\000"
 2192      726F6C5F 
 2192      70686F74 
 2192      6F64696F 
 2192      64655F57 
 2193              	.LASF34:
 2194 0354 64726976 		.ascii	"drivingBackwardFlag\000"
 2194      696E6742 
 2194      61636B77 
 2194      61726446 
 2194      6C616700 
 2195              	.LASF32:
 2196 0368 7075636B 		.ascii	"puckPileLocation\000"
 2196      50696C65 
 2196      4C6F6361 
 2196      74696F6E 
 2196      00
 2197              	.LASF103:
 2198 0379 4D6F746F 		.ascii	"Motor_2_Encoder_Counts_Start\000"
 2198      725F325F 
 2198      456E636F 
 2198      6465725F 
 2198      436F756E 
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 52


 2199              	.LASF27:
 2200 0396 63757272 		.ascii	"currentPuckRackScanningIndex\000"
 2200      656E7450 
 2200      75636B52 
 2200      61636B53 
 2200      63616E6E 
 2201              	.LASF90:
 2202 03b3 5261636B 		.ascii	"Rack_Servo_PWM_WriteCompare\000"
 2202      5F536572 
 2202      766F5F50 
 2202      574D5F57 
 2202      72697465 
 2203              	.LASF75:
 2204 03cf 44726966 		.ascii	"Drift_Check_Timer_Stop\000"
 2204      745F4368 
 2204      65636B5F 
 2204      54696D65 
 2204      725F5374 
 2205              	.LASF80:
 2206 03e6 55415254 		.ascii	"UART_1_Start\000"
 2206      5F315F53 
 2206      74617274 
 2206      00
 2207              	.LASF47:
 2208 03f3 636F6C6F 		.ascii	"colour_flag\000"
 2208      75725F66 
 2208      6C616700 
 2209              	.LASF14:
 2210 03ff 6C6F6E67 		.ascii	"long double\000"
 2210      20646F75 
 2210      626C6500 
 2211              	.LASF1:
 2212 040b 756E7369 		.ascii	"unsigned char\000"
 2212      676E6564 
 2212      20636861 
 2212      7200
 2213              	.LASF84:
 2214 0419 49444143 		.ascii	"IDAC8_1_SetRange\000"
 2214      385F315F 
 2214      53657452 
 2214      616E6765 
 2214      00
 2215              	.LASF22:
 2216 042a 61726D4D 		.ascii	"armMoving\000"
 2216      6F76696E 
 2216      6700
 2217              	.LASF54:
 2218 0434 6D6F7665 		.ascii	"moveNow\000"
 2218      4E6F7700 
 2219              	.LASF31:
 2220 043c 626C6F63 		.ascii	"block_edge_location\000"
 2220      6B5F6564 
 2220      67655F6C 
 2220      6F636174 
 2220      696F6E00 
 2221              	.LASF7:
 2222 0450 6C6F6E67 		.ascii	"long long unsigned int\000"
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 53


 2222      206C6F6E 
 2222      6720756E 
 2222      7369676E 
 2222      65642069 
 2223              	.LASF87:
 2224 0467 636F6E74 		.ascii	"control_led_Write\000"
 2224      726F6C5F 
 2224      6C65645F 
 2224      57726974 
 2224      6500
 2225              	.LASF21:
 2226 0479 73657276 		.ascii	"servo_testing\000"
 2226      6F5F7465 
 2226      7374696E 
 2226      6700
 2227              	.LASF8:
 2228 0487 756E7369 		.ascii	"unsigned int\000"
 2228      676E6564 
 2228      20696E74 
 2228      00
 2229              	.LASF66:
 2230 0494 69646163 		.ascii	"idac_value\000"
 2230      5F76616C 
 2230      756500
 2231              	.LASF77:
 2232 049f 4D6F746F 		.ascii	"Motor_2_Encoder_Counts_ReadCounter\000"
 2232      725F325F 
 2232      456E636F 
 2232      6465725F 
 2232      436F756E 
 2233              	.LASF83:
 2234 04c2 49444143 		.ascii	"IDAC8_1_Start\000"
 2234      385F315F 
 2234      53746172 
 2234      7400
 2235              	.LASF52:
 2236 04d0 63757272 		.ascii	"currentOrientation\000"
 2236      656E744F 
 2236      7269656E 
 2236      74617469 
 2236      6F6E00
 2237              	.LASF57:
 2238 04e3 6D6F7665 		.ascii	"moveForwardAllowed\000"
 2238      466F7277 
 2238      61726441 
 2238      6C6C6F77 
 2238      656400
 2239              	.LASF69:
 2240 04f6 63757272 		.ascii	"current_stage\000"
 2240      656E745F 
 2240      73746167 
 2240      6500
 2241              	.LASF93:
 2242 0504 47726970 		.ascii	"Gripper_Servo_PWM_WriteCompare\000"
 2242      7065725F 
 2242      53657276 
 2242      6F5F5057 
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 54


 2242      4D5F5772 
 2243              	.LASF79:
 2244 0523 5449415F 		.ascii	"TIA_1_Start\000"
 2244      315F5374 
 2244      61727400 
 2245              	.LASF30:
 2246 052f 73776565 		.ascii	"sweeping\000"
 2246      70696E67 
 2246      00
 2247              	.LASF13:
 2248 0538 63686172 		.ascii	"char\000"
 2248      00
 2249              	.LASF40:
 2250 053d 4D315F42 		.ascii	"M1_BD\000"
 2250      4400
 2251              	.LASF10:
 2252 0543 696E7433 		.ascii	"int32_t\000"
 2252      325F7400 
 2253              	.LASF68:
 2254 054b 504C414E 		.ascii	"PLAN_SCAN_VERTICAL\000"
 2254      5F534341 
 2254      4E5F5645 
 2254      52544943 
 2254      414C00
 2255              	.LASF62:
 2256 055e 686F7269 		.ascii	"horizontalPuckGrid\000"
 2256      7A6F6E74 
 2256      616C5075 
 2256      636B4772 
 2256      696400
 2257              	.LASF67:
 2258 0571 636F6C6F 		.ascii	"colour_sensing_algorithm\000"
 2258      75725F73 
 2258      656E7369 
 2258      6E675F61 
 2258      6C676F72 
 2259              	.LASF49:
 2260 058a 6D6F7669 		.ascii	"moving\000"
 2260      6E6700
 2261              	.LASF72:
 2262 0591 73746F70 		.ascii	"stopMotor1AndUpdate\000"
 2262      4D6F746F 
 2262      7231416E 
 2262      64557064 
 2262      61746500 
 2263              	.LASF95:
 2264 05a5 54696D65 		.ascii	"Timer_1_Start\000"
 2264      725F315F 
 2264      53746172 
 2264      7400
 2265              	.LASF51:
 2266 05b3 64657369 		.ascii	"desiredPosition\000"
 2266      72656450 
 2266      6F736974 
 2266      696F6E00 
 2267              	.LASF39:
 2268 05c3 4D315F46 		.ascii	"M1_FD\000"
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 55


 2268      4400
 2269              	.LASF3:
 2270 05c9 73686F72 		.ascii	"short unsigned int\000"
 2270      7420756E 
 2270      7369676E 
 2270      65642069 
 2270      6E7400
 2271              	.LASF85:
 2272 05dc 49444143 		.ascii	"IDAC8_1_SetValue\000"
 2272      385F315F 
 2272      53657456 
 2272      616C7565 
 2272      00
 2273              	.LASF111:
 2274 05ed 6D61696E 		.ascii	"main.c\000"
 2274      2E6300
 2275              	.LASF5:
 2276 05f4 6C6F6E67 		.ascii	"long unsigned int\000"
 2276      20756E73 
 2276      69676E65 
 2276      6420696E 
 2276      7400
 2277              	.LASF98:
 2278 0606 53746172 		.ascii	"Start_StartEx\000"
 2278      745F5374 
 2278      61727445 
 2278      7800
 2279              	.LASF12:
 2280 0614 646F7562 		.ascii	"double\000"
 2280      6C6500
 2281              	.LASF81:
 2282 061b 55415254 		.ascii	"UART_1_PutString\000"
 2282      5F315F50 
 2282      75745374 
 2282      72696E67 
 2282      00
 2283              	.LASF17:
 2284 062c 456E636F 		.ascii	"Encoder_Counts_1_IH\000"
 2284      6465725F 
 2284      436F756E 
 2284      74735F31 
 2284      5F494800 
 2285              	.LASF94:
 2286 0640 47726970 		.ascii	"Gripper_Servo_PWM_Sleep\000"
 2286      7065725F 
 2286      53657276 
 2286      6F5F5057 
 2286      4D5F536C 
 2287              	.LASF48:
 2288 0658 73746174 		.ascii	"state\000"
 2288      6500
 2289              	.LASF44:
 2290 065e 6D6F746F 		.ascii	"motor2Enable\000"
 2290      7232456E 
 2290      61626C65 
 2290      00
 2291              	.LASF19:
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 56


 2292 066b 44726966 		.ascii	"Drift_Check_IH\000"
 2292      745F4368 
 2292      65636B5F 
 2292      494800
 2293              	.LASF24:
 2294 067a 7075636B 		.ascii	"puck_scan\000"
 2294      5F736361 
 2294      6E00
 2295              	.LASF9:
 2296 0684 5F5F696E 		.ascii	"__int32_t\000"
 2296      7433325F 
 2296      7400
 2297              	.LASF28:
 2298 068e 7075636B 		.ascii	"puckRackColours\000"
 2298      5261636B 
 2298      436F6C6F 
 2298      75727300 
 2299              	.LASF112:
 2300 069e 433A5C55 		.ascii	"C:\\Users\\Misha\\Documents\\PSoC Creator\\ECE3091_"
 2300      73657273 
 2300      5C4D6973 
 2300      68615C44 
 2300      6F63756D 
 2301 06cc 47726F75 		.ascii	"Group17\\Group17RobotReal\\Group17Robot.cydsn\000"
 2301      7031375C 
 2301      47726F75 
 2301      70313752 
 2301      6F626F74 
 2302              	.LASF55:
 2303 06f8 6D6F7665 		.ascii	"moveLeftAllowed\000"
 2303      4C656674 
 2303      416C6C6F 
 2303      77656400 
 2304              	.LASF15:
 2305 0708 73697A65 		.ascii	"sizetype\000"
 2305      74797065 
 2305      00
 2306              	.LASF38:
 2307 0711 6F757470 		.ascii	"output\000"
 2307      757400
 2308              	.LASF56:
 2309 0718 6D6F7665 		.ascii	"moveRightAllowed\000"
 2309      52696768 
 2309      74416C6C 
 2309      6F776564 
 2309      00
 2310              	.LASF42:
 2311 0729 4D325F42 		.ascii	"M2_BD\000"
 2311      4400
 2312              	.LASF25:
 2313 072f 49544D5F 		.ascii	"ITM_RxBuffer\000"
 2313      52784275 
 2313      66666572 
 2313      00
 2314              	.LASF110:
 2315 073c 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2315      43313120 
ARM GAS  C:\Users\Misha\AppData\Local\Temp\ccO5S0vg.s 			page 57


 2315      352E342E 
 2315      31203230 
 2315      31363036 
 2316 076f 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 2316      20726576 
 2316      6973696F 
 2316      6E203233 
 2316      37373135 
 2317 07a2 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 2317      66756E63 
 2317      74696F6E 
 2317      2D736563 
 2317      74696F6E 
 2318              	.LASF71:
 2319 07ca 43794465 		.ascii	"CyDelay\000"
 2319      6C617900 
 2320              	.LASF99:
 2321 07d2 4D6F746F 		.ascii	"Motor_1_driver_Start\000"
 2321      725F315F 
 2321      64726976 
 2321      65725F53 
 2321      74617274 
 2322              	.LASF64:
 2323 07e7 70617468 		.ascii	"pathToPucks\000"
 2323      546F5075 
 2323      636B7300 
 2324              	.LASF100:
 2325 07f3 4D6F746F 		.ascii	"Motor_2_driver_Start\000"
 2325      725F325F 
 2325      64726976 
 2325      65725F53 
 2325      74617274 
 2326              	.LASF41:
 2327 0808 4D325F46 		.ascii	"M2_FD\000"
 2327      4400
 2328              	.LASF37:
 2329 080e 696E6974 		.ascii	"initialisation\000"
 2329      69616C69 
 2329      73617469 
 2329      6F6E00
 2330              	.LASF104:
 2331 081d 44726966 		.ascii	"Drift_Check_Timer_Start\000"
 2331      745F4368 
 2331      65636B5F 
 2331      54696D65 
 2331      725F5374 
 2332              	.LASF76:
 2333 0835 4D6F746F 		.ascii	"Motor_1_Encoder_Counts_ReadCounter\000"
 2333      725F315F 
 2333      456E636F 
 2333      6465725F 
 2333      436F756E 
 2334              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
