ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.TIH,"ax",%progbits
  20              		.align	2
  21              		.global	TIH
  22              		.thumb
  23              		.thumb_func
  24              		.type	TIH, %function
  25              	TIH:
  26              	.LFB64:
  27              		.file 1 "main.c"
   1:main.c        **** 
   2:main.c        **** /* ========================================
   3:main.c        ****  *
   4:main.c        ****  * Copyright Group 17, 2019
   5:main.c        ****  * All Rights Reserved
   6:main.c        ****  * UNPUBLISHED, LICENSED SOFTWARE.
   7:main.c        ****  *
   8:main.c        ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   9:main.c        ****  * WHICH IS THE PROPERTY OF Blayke, Misha, Nidhin.
  10:main.c        ****  *
  11:main.c        ****  * ========================================
  12:main.c        **** */
  13:main.c        **** 
  14:main.c        **** // * PSOC LIBRARY * //
  15:main.c        **** #include "project.h"
  16:main.c        **** 
  17:main.c        **** // * C LIBRARIES * // 
  18:main.c        **** #include <stdlib.h>
  19:main.c        **** #include <stdio.h>
  20:main.c        **** #include <math.h>
  21:main.c        **** 
  22:main.c        **** // * OUR LIBRARIES * //
  23:main.c        **** #include "main.h"
  24:main.c        **** #include "colour.h"
  25:main.c        **** #include "ultrasonic.h" 
  26:main.c        **** #include "servo.h"
  27:main.c        **** #include "mishamotor.h"
  28:main.c        **** #include "customMath.h"
  29:main.c        **** #include "navigation.h"
  30:main.c        **** 
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 2


  31:main.c        **** 
  32:main.c        **** extern char output[32];   
  33:main.c        **** 
  34:main.c        **** // * STATE VARIABLES * //
  35:main.c        **** int state = STATE_SCAN_PLAN;
  36:main.c        **** int running = 1;
  37:main.c        **** int sweeping = 0;
  38:main.c        **** float block_edge_location[4] = {0,0,0,0}; // N E S W edge positions respectively
  39:main.c        **** 
  40:main.c        **** // * PUCK CONSTRUCTION VARIABLES * //
  41:main.c        **** int currentPuckStackSize = 0; // How many pucks are currently on the construction plate
  42:main.c        **** int puckRackColours[5] = {BLANK,BLANK,BLANK,BLANK,BLANK}; // 5 slots in puck rack.
  43:main.c        **** int puckConstructionPlan[3] = {BLANK,BLANK,BLANK};
  44:main.c        **** int currentPuckRackScanningIndex = 0;
  45:main.c        **** int puckRackOffsetsFromWest[5] = {PUCK_RACK_0_WEST_DISTANCE,
  46:main.c        ****                                 PUCK_RACK_1_WEST_DISTANCE,
  47:main.c        ****                                 PUCK_RACK_2_WEST_DISTANCE,
  48:main.c        ****                                 PUCK_RACK_3_WEST_DISTANCE,
  49:main.c        ****                                 PUCK_RACK_4_WEST_DISTANCE };
  50:main.c        **** 
  51:main.c        **** float horizontalPuckGrid = 0;
  52:main.c        **** 
  53:main.c        **** // * NAVIGATION AND POSITION VARIABLES * //
  54:main.c        **** 
  55:main.c        **** int beginNavigation = 0; // Allow us to break out of the intial phase when powered up
  56:main.c        **** 
  57:main.c        **** int pathToPucks; // This will give us a corridor that we should initially take when trying to go to
  58:main.c        **** int pathPastBlock;
  59:main.c        **** 
  60:main.c        **** // These block clearance variables are only true if we have enough room either side of the block to
  61:main.c        **** // And only true for the puck clearance variables if there is enough room to be able to turn at the
  62:main.c        **** short int blockEastClearance = 0;
  63:main.c        **** short int blockWestClearance = 0;
  64:main.c        **** short int puckEastClearance = 0;
  65:main.c        **** short int puckWestClearance = 0;
  66:main.c        **** 
  67:main.c        **** float currentPosition[2] = {0,0};
  68:main.c        **** float desiredPosition[2];
  69:main.c        **** int currentOrientation = 90; //in degrees (convert to radians when needed)- 90 assuming we start fa
  70:main.c        **** int desiredOrientation;
  71:main.c        **** 
  72:main.c        **** short int moveNow = 1; //This is a flag that lets the main program tell the moving functions
  73:main.c        **** //whethe we want the robot to be moving or not. For example, when we need to operate servos
  74:main.c        **** //the main program would set moveNow to FALSE.
  75:main.c        **** 
  76:main.c        **** //The four flags below let the rest of the program know if the robot is trying to drive 
  77:main.c        **** //forward or back, turn left or right. At the start of every motion, turn these flags on
  78:main.c        **** //at the end turn them off.
  79:main.c        **** short int drivingForwardFlag = 0;
  80:main.c        **** short int drivingBackwardFlag = 0;
  81:main.c        **** short int turningLeftFlag = 0;
  82:main.c        **** short int turningRightFlag = 0;
  83:main.c        **** 
  84:main.c        **** //These flags will be used by the main program to allow the robot to move in certain directions
  85:main.c        **** short int moveLeftAllowed;
  86:main.c        **** short int moveRightAllowed;
  87:main.c        **** short int moveForwardAllowed;
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 3


  88:main.c        **** short int moveBackwardAllowed;
  89:main.c        **** 
  90:main.c        **** 
  91:main.c        **** // * COLOUR VARIABLES * //
  92:main.c        **** 
  93:main.c        **** int idac_value = 0;  
  94:main.c        **** int colour_flag = 1;                    // sets which photodiode to use 
  95:main.c        **** int colour_sensing_algorithm = 0;      // Determines which colour sensing algorithm to use:
  96:main.c        ****                                                 // 0: Wall algorithm
  97:main.c        ****                                             // 1: Claw algorithm
  98:main.c        ****                                                 // 2: old algorithm
  99:main.c        **** 
 100:main.c        **** int moving = 0; // Temp to stop while loop from repeated runs of scanning plan code
 101:main.c        **** 
 102:main.c        **** const int PLAN_SCAN_VERTICAL = 10; // Set to ultrasonic distance at the home base 
 103:main.c        **** 
 104:main.c        **** int current_stage = 1;      // There are 3 stages, we start at 1
 105:main.c        **** 
 106:main.c        **** 
 107:main.c        **** // GLOBAL VARIABLE
 108:main.c        **** int distance_returned_global;
 109:main.c        **** 
 110:main.c        **** 
 111:main.c        **** // * INTERRUPT HANDLING * // 
 112:main.c        **** CY_ISR(TIH)                             // Ultrasonic ISR Definition
 113:main.c        **** {
  28              		.loc 1 113 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 08B5     		push	{r3, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 3, -8
  35              		.cfi_offset 14, -4
 114:main.c        ****     ultrasonicInterruptHandler();
  36              		.loc 1 114 0
  37 0002 FFF7FEFF 		bl	ultrasonicInterruptHandler
  38              	.LVL0:
  39 0006 08BD     		pop	{r3, pc}
  40              		.cfi_endproc
  41              	.LFE64:
  42              		.size	TIH, .-TIH
  43              		.section	.text.StartIH,"ax",%progbits
  44              		.align	2
  45              		.global	StartIH
  46              		.thumb
  47              		.thumb_func
  48              		.type	StartIH, %function
  49              	StartIH:
  50              	.LFB65:
 115:main.c        **** }
 116:main.c        **** 
 117:main.c        **** CY_ISR(StartIH)                             // Ultrasonic ISR Definition
 118:main.c        **** {
  51              		.loc 1 118 0
  52              		.cfi_startproc
  53              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 4


  54              		@ frame_needed = 0, uses_anonymous_args = 0
  55 0000 08B5     		push	{r3, lr}
  56              		.cfi_def_cfa_offset 8
  57              		.cfi_offset 3, -8
  58              		.cfi_offset 14, -4
 119:main.c        ****     CyDelay(100);
  59              		.loc 1 119 0
  60 0002 6420     		movs	r0, #100
  61 0004 FFF7FEFF 		bl	CyDelay
  62              	.LVL1:
 120:main.c        ****     
 121:main.c        ****     beginNavigation = 1;
  63              		.loc 1 121 0
  64 0008 0122     		movs	r2, #1
  65 000a 034B     		ldr	r3, .L5
  66 000c 1A60     		str	r2, [r3]
 122:main.c        ****     colour_flag = 0; 
  67              		.loc 1 122 0
  68 000e 0022     		movs	r2, #0
  69 0010 024B     		ldr	r3, .L5+4
  70 0012 1A60     		str	r2, [r3]
  71 0014 08BD     		pop	{r3, pc}
  72              	.L6:
  73 0016 00BF     		.align	2
  74              	.L5:
  75 0018 00000000 		.word	.LANCHOR0
  76 001c 00000000 		.word	.LANCHOR1
  77              		.cfi_endproc
  78              	.LFE65:
  79              		.size	StartIH, .-StartIH
  80              		.section	.text.main,"ax",%progbits
  81              		.align	2
  82              		.global	main
  83              		.thumb
  84              		.thumb_func
  85              		.type	main, %function
  86              	main:
  87              	.LFB66:
 123:main.c        **** }
 124:main.c        ****  
 125:main.c        **** //Interrupt service routines for dcmotor function
 126:main.c        **** /*
 127:main.c        **** CY_ISR(Encoder_Counts_1_IH){
 128:main.c        ****     stopMotor1AndUpdate();
 129:main.c        **** }
 130:main.c        **** 
 131:main.c        **** CY_ISR(Encoder_Counts_2_IH){
 132:main.c        ****     stopMotor2AndUpdate();
 133:main.c        **** }
 134:main.c        **** 
 135:main.c        **** CY_ISR(Drift_Check_IH){    
 136:main.c        ****     Drift_Check_Timer_ReadStatusRegister(); //Clears the interrupt
 137:main.c        ****     Drift_Check_Timer_Stop(); //Stops the timer
 138:main.c        ****     motor1EncoderCounts = Motor_1_Encoder_Counts_ReadCounter();
 139:main.c        ****     motor2EncoderCounts = Motor_2_Encoder_Counts_ReadCounter();
 140:main.c        ****     driftCorrect(); //Does checking
 141:main.c        **** }
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 5


 142:main.c        **** */
 143:main.c        **** 
 144:main.c        **** int main(void)
 145:main.c        **** {
  88              		.loc 1 145 0
  89              		.cfi_startproc
  90              		@ args = 0, pretend = 0, frame = 0
  91              		@ frame_needed = 0, uses_anonymous_args = 0
  92 0000 70B5     		push	{r4, r5, r6, lr}
  93              		.cfi_def_cfa_offset 16
  94              		.cfi_offset 4, -16
  95              		.cfi_offset 5, -12
  96              		.cfi_offset 6, -8
  97              		.cfi_offset 14, -4
  98 0002 82B0     		sub	sp, sp, #8
  99              		.cfi_def_cfa_offset 24
 146:main.c        ****     CyGlobalIntEnable; /* Enable global interrupts. */
 100              		.loc 1 146 0
 101              		.syntax unified
 102              	@ 146 "main.c" 1
 103 0004 62B6     		CPSIE   i
 104              	@ 0 "" 2
 147:main.c        **** 
 148:main.c        ****     
 149:main.c        ****     TIA_1_Start();
 105              		.loc 1 149 0
 106              		.thumb
 107              		.syntax unified
 108 0006 FFF7FEFF 		bl	TIA_1_Start
 109              	.LVL2:
 150:main.c        ****     UART_1_Start();
 110              		.loc 1 150 0
 111 000a FFF7FEFF 		bl	UART_1_Start
 112              	.LVL3:
 151:main.c        ****     UART_1_PutString("UART commencing... \n");
 113              		.loc 1 151 0
 114 000e 6148     		ldr	r0, .L23
 115 0010 FFF7FEFF 		bl	UART_1_PutString
 116              	.LVL4:
 152:main.c        ****     ADC_Start();
 117              		.loc 1 152 0
 118 0014 FFF7FEFF 		bl	ADC_Start
 119              	.LVL5:
 153:main.c        ****     IDAC8_1_Start();
 120              		.loc 1 153 0
 121 0018 FFF7FEFF 		bl	IDAC8_1_Start
 122              	.LVL6:
 154:main.c        ****     
 155:main.c        ****     // DEBUGGING:
 156:main.c        ****     int colour_calibration = FALSE;             // Do we want to calibrate the sensor? 
 157:main.c        ****     int servo_testing = FALSE;                  // Do the servos need to be tested?      
 158:main.c        ****     int motor_testing = FALSE;
 159:main.c        ****     int ultrasonic_testing = FALSE;  
 160:main.c        ****     
 161:main.c        ****     
 162:main.c        ****     // IDAC initialisation: 
 163:main.c        ****     IDAC8_1_SetRange(IDAC8_1_RANGE_32uA);       // Sets the range between 0 and 32uA
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 6


 123              		.loc 1 163 0
 124 001c 0020     		movs	r0, #0
 125 001e FFF7FEFF 		bl	IDAC8_1_SetRange
 126              	.LVL7:
 164:main.c        ****     IDAC8_1_SetValue(idac_value);               // set a value between 0 and 255
 127              		.loc 1 164 0
 128 0022 5D4D     		ldr	r5, .L23+4
 129 0024 2879     		ldrb	r0, [r5, #4]	@ zero_extendqisi2
 130 0026 FFF7FEFF 		bl	IDAC8_1_SetValue
 131              	.LVL8:
 165:main.c        ****     
 166:main.c        ****     // Colour Sensing Initialisation & Debugging:
 167:main.c        ****     colour_sensing_algorithm = 0;
 132              		.loc 1 167 0
 133 002a 0024     		movs	r4, #0
 134 002c AC60     		str	r4, [r5, #8]
 168:main.c        ****     control_photodiode_Write(colour_sensing_algorithm);            // controls which photodiode is 
 135              		.loc 1 168 0
 136 002e 2046     		mov	r0, r4
 137 0030 FFF7FEFF 		bl	control_photodiode_Write
 138              	.LVL9:
 169:main.c        ****                                                 // 0: wall
 170:main.c        ****                                                 // 1: claw
 171:main.c        ****     control_led_Write(1);   CyDelay(500);  // Ensures all the RGBs are working
 139              		.loc 1 171 0
 140 0034 0120     		movs	r0, #1
 141 0036 FFF7FEFF 		bl	control_led_Write
 142              	.LVL10:
 143 003a 4FF4FA70 		mov	r0, #500
 144 003e FFF7FEFF 		bl	CyDelay
 145              	.LVL11:
 172:main.c        ****     control_led_Write(2);   CyDelay(500);
 146              		.loc 1 172 0
 147 0042 0220     		movs	r0, #2
 148 0044 FFF7FEFF 		bl	control_led_Write
 149              	.LVL12:
 150 0048 4FF4FA70 		mov	r0, #500
 151 004c FFF7FEFF 		bl	CyDelay
 152              	.LVL13:
 173:main.c        ****     control_led_Write(3);   CyDelay(500);
 153              		.loc 1 173 0
 154 0050 0320     		movs	r0, #3
 155 0052 FFF7FEFF 		bl	control_led_Write
 156              	.LVL14:
 157 0056 4FF4FA70 		mov	r0, #500
 158 005a FFF7FEFF 		bl	CyDelay
 159              	.LVL15:
 174:main.c        ****     control_led_Write(0);   CyDelay(500);
 160              		.loc 1 174 0
 161 005e 2046     		mov	r0, r4
 162 0060 FFF7FEFF 		bl	control_led_Write
 163              	.LVL16:
 164 0064 4FF4FA70 		mov	r0, #500
 165 0068 FFF7FEFF 		bl	CyDelay
 166              	.LVL17:
 175:main.c        ****     colourSensingInitialise();                  // Initialises the colour sensor
 167              		.loc 1 175 0
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 7


 168 006c FFF7FEFF 		bl	colourSensingInitialise
 169              	.LVL18:
 176:main.c        ****     
 177:main.c        **** 
 178:main.c        ****     //Servos for the arm instatination
 179:main.c        ****     Rack_Servo_PWM_Start();
 170              		.loc 1 179 0
 171 0070 FFF7FEFF 		bl	Rack_Servo_PWM_Start
 172              	.LVL19:
 180:main.c        ****     Rack_Servo_PWM_WriteCompare(1000);          // BRINGs rack to highest position, so not to mess 
 173              		.loc 1 180 0
 174 0074 4FF47A70 		mov	r0, #1000
 175 0078 FFF7FEFF 		bl	Rack_Servo_PWM_WriteCompare
 176              	.LVL20:
 181:main.c        ****     CyDelay(500);
 177              		.loc 1 181 0
 178 007c 4FF4FA70 		mov	r0, #500
 179 0080 FFF7FEFF 		bl	CyDelay
 180              	.LVL21:
 182:main.c        ****     Rack_Servo_PWM_Sleep();
 181              		.loc 1 182 0
 182 0084 FFF7FEFF 		bl	Rack_Servo_PWM_Sleep
 183              	.LVL22:
 183:main.c        ****     
 184:main.c        ****     Gripper_Servo_PWM_Start();
 184              		.loc 1 184 0
 185 0088 FFF7FEFF 		bl	Gripper_Servo_PWM_Start
 186              	.LVL23:
 185:main.c        ****     Gripper_Servo_PWM_WriteCompare(1120);       //This is the open gripper position
 187              		.loc 1 185 0
 188 008c 4FF48C60 		mov	r0, #1120
 189 0090 FFF7FEFF 		bl	Gripper_Servo_PWM_WriteCompare
 190              	.LVL24:
 186:main.c        ****     CyDelay(500);
 191              		.loc 1 186 0
 192 0094 4FF4FA70 		mov	r0, #500
 193 0098 FFF7FEFF 		bl	CyDelay
 194              	.LVL25:
 187:main.c        ****     Gripper_Servo_PWM_Sleep();
 195              		.loc 1 187 0
 196 009c FFF7FEFF 		bl	Gripper_Servo_PWM_Sleep
 197              	.LVL26:
 188:main.c        ****     
 189:main.c        ****     // Misha Motors Initialisation:
 190:main.c        ****     Motor_Left_Driver_Start();
 198              		.loc 1 190 0
 199 00a0 FFF7FEFF 		bl	Motor_Left_Driver_Start
 200              	.LVL27:
 191:main.c        ****     Motor_Left_Driver_Sleep();                  // Puts motor to sleep
 201              		.loc 1 191 0
 202 00a4 FFF7FEFF 		bl	Motor_Left_Driver_Sleep
 203              	.LVL28:
 192:main.c        ****     Motor_Right_Driver_Start();
 204              		.loc 1 192 0
 205 00a8 FFF7FEFF 		bl	Motor_Right_Driver_Start
 206              	.LVL29:
 193:main.c        ****     Motor_Right_Driver_Sleep();                 // Puts motor to sleep
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 8


 207              		.loc 1 193 0
 208 00ac FFF7FEFF 		bl	Motor_Right_Driver_Sleep
 209              	.LVL30:
 194:main.c        ****     
 195:main.c        ****     Motor_Left_Decoder_Start();
 210              		.loc 1 195 0
 211 00b0 FFF7FEFF 		bl	Motor_Left_Decoder_Start
 212              	.LVL31:
 196:main.c        ****     Motor_Right_Decoder_Start();
 213              		.loc 1 196 0
 214 00b4 FFF7FEFF 		bl	Motor_Right_Decoder_Start
 215              	.LVL32:
 197:main.c        ****    
 198:main.c        ****     // Timer and ISR instantiation
 199:main.c        ****     Timer_1_Start();
 216              		.loc 1 199 0
 217 00b8 FFF7FEFF 		bl	Timer_1_Start
 218              	.LVL33:
 200:main.c        ****     Timer_1_ReadStatusRegister();
 219              		.loc 1 200 0
 220 00bc FFF7FEFF 		bl	Timer_1_ReadStatusRegister
 221              	.LVL34:
 201:main.c        ****     Sonic_StartEx(TIH);
 222              		.loc 1 201 0
 223 00c0 3648     		ldr	r0, .L23+8
 224 00c2 FFF7FEFF 		bl	Sonic_StartEx
 225              	.LVL35:
 202:main.c        ****     Start_StartEx(StartIH);
 226              		.loc 1 202 0
 227 00c6 3648     		ldr	r0, .L23+12
 228 00c8 FFF7FEFF 		bl	Start_StartEx
 229              	.LVL36:
 203:main.c        ****     beginNavigation = 0;
 230              		.loc 1 203 0
 231 00cc 2C60     		str	r4, [r5]
 204:main.c        ****     
 205:main.c        ****     // Ultrasonic Initialisation & Calibration:
 206:main.c        ****     // The ultrasonics take several test measurements to ensure they are working
 207:main.c        ****         
 208:main.c        ****     UART_1_PutString("Ultrasonic Calibration tests: \n");
 232              		.loc 1 208 0
 233 00ce 3548     		ldr	r0, .L23+16
 234 00d0 FFF7FEFF 		bl	UART_1_PutString
 235              	.LVL37:
 236              	.LBB2:
 209:main.c        ****     for(int j = 0; j < 3; j++) 
 237              		.loc 1 209 0
 238 00d4 2546     		mov	r5, r4
 239 00d6 19E0     		b	.L8
 240              	.LVL38:
 241              	.L9:
 242              	.LBB3:
 210:main.c        ****     {
 211:main.c        ****         for (int i = 0; i < 5; i++)
 212:main.c        ****         {
 213:main.c        ****             distanceSensor(i);
 243              		.loc 1 213 0 discriminator 3
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 9


 244 00d8 2046     		mov	r0, r4
 245 00da FFF7FEFF 		bl	distanceSensor
 246              	.LVL39:
 214:main.c        ****             CyDelay(100);
 247              		.loc 1 214 0 discriminator 3
 248 00de 6420     		movs	r0, #100
 249 00e0 FFF7FEFF 		bl	CyDelay
 250              	.LVL40:
 215:main.c        ****             sprintf(output, "%d \t", ultrasonic_distances_mm[i]);
 251              		.loc 1 215 0 discriminator 3
 252 00e4 304E     		ldr	r6, .L23+20
 253 00e6 314B     		ldr	r3, .L23+24
 254 00e8 53F82420 		ldr	r2, [r3, r4, lsl #2]
 255 00ec 3049     		ldr	r1, .L23+28
 256 00ee 3046     		mov	r0, r6
 257 00f0 FFF7FEFF 		bl	sprintf
 258              	.LVL41:
 216:main.c        ****             UART_1_PutString(output);
 259              		.loc 1 216 0 discriminator 3
 260 00f4 3046     		mov	r0, r6
 261 00f6 FFF7FEFF 		bl	UART_1_PutString
 262              	.LVL42:
 211:main.c        ****         {
 263              		.loc 1 211 0 discriminator 3
 264 00fa 0134     		adds	r4, r4, #1
 265              	.LVL43:
 266 00fc 00E0     		b	.L10
 267              	.LVL44:
 268              	.L20:
 269              	.LBE3:
 270 00fe 0024     		movs	r4, #0
 271              	.L10:
 272              	.LVL45:
 273              	.LBB4:
 211:main.c        ****         {
 274              		.loc 1 211 0 is_stmt 0 discriminator 1
 275 0100 042C     		cmp	r4, #4
 276 0102 E9DD     		ble	.L9
 277              	.LBE4:
 217:main.c        ****         }
 218:main.c        ****         UART_1_PutString("\n\n");
 278              		.loc 1 218 0 is_stmt 1 discriminator 2
 279 0104 2B48     		ldr	r0, .L23+32
 280 0106 FFF7FEFF 		bl	UART_1_PutString
 281              	.LVL46:
 209:main.c        ****     {
 282              		.loc 1 209 0 discriminator 2
 283 010a 0135     		adds	r5, r5, #1
 284              	.LVL47:
 285              	.L8:
 209:main.c        ****     {
 286              		.loc 1 209 0 is_stmt 0 discriminator 1
 287 010c 022D     		cmp	r5, #2
 288 010e F6DD     		ble	.L20
 289              	.L18:
 290              	.LBE2:
 219:main.c        ****     }
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 10


 220:main.c        ****     
 221:main.c        ****     /*  OLD CODE FROM NIDHIN:
 222:main.c        ****     //Initialising DC motors
 223:main.c        ****     Motor_1_driver_Start();
 224:main.c        ****     Motor_2_driver_Start();
 225:main.c        ****     motorDutyCycleUpdate(0,0,0,0);//Have the motors stand still
 226:main.c        ****     
 227:main.c        ****     
 228:main.c        ****     //Initialising counters
 229:main.c        ****     Motor_1_Encoder_Counts_Start();
 230:main.c        ****     Motor_2_Encoder_Counts_Start();
 231:main.c        ****     
 232:main.c        ****     //Initialising timers
 233:main.c        ****     Drift_Check_Timer_Start();
 234:main.c        ****     
 235:main.c        ****     //Starts and enables the interrupts for the motor encoder counts
 236:main.c        ****     Encoder_Counts_1_Interrupt_StartEx(Encoder_Counts_1_IH); 
 237:main.c        ****     Encoder_Counts_2_Interrupt_StartEx(Encoder_Counts_2_IH);
 238:main.c        ****     Drift_Check_Interrupt_StartEx(Drift_Check_IH);		
 239:main.c        ****     */
 240:main.c        **** 
 241:main.c        ****     // Main Loop for States
 242:main.c        ****         
 243:main.c        ****     for(;;)
 244:main.c        ****     {   
 245:main.c        ****         
 246:main.c        **** 
 247:main.c        **** 
 248:main.c        ****         // Start button is pressed so quit sensing
 249:main.c        **** 
 250:main.c        ****         /*
 251:main.c        ****         while (beginNavigation == 0) {
 252:main.c        ****             distanceCheck();           
 253:main.c        ****             UART_1_PutString("\n");
 254:main.c        ****             CyDelay(1000); // Check distance once a second.
 255:main.c        ****                 
 256:main.c        ****         }
 257:main.c        ****         */
 258:main.c        ****         
 259:main.c        ****         
 260:main.c        ****         // Enter picking up puck state for the moment FOR TESTING
 261:main.c        ****         //colour_sensing_algorithm = 1;
 262:main.c        ****         //control_photodiode_Write(1);
 263:main.c        ****         //state = STATE_FIND_REQUIRED_PUCK;
 264:main.c        ****         
 265:main.c        ****         // Colour Calibration: 
 266:main.c        ****         if (colour_calibration)
 267:main.c        ****         {
 268:main.c        ****             int lock = FALSE;   
 269:main.c        ****             do 
 270:main.c        ****                 {   
 271:main.c        ****                     if (lock == FALSE) 
 272:main.c        ****                     {
 273:main.c        ****                         
 274:main.c        ****                         control_photodiode_Write(1);    // Claw
 275:main.c        ****                         changeHeightToPuck(0);
 276:main.c        **** 
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 11


 277:main.c        ****                         UART_1_PutString("Count \t BLANK \t RED \t GREEN \t BLUE \t \n");
 278:main.c        ****                         for (int i = 0; i < 50; i++)
 279:main.c        ****                         {
 280:main.c        ****                         sprintf(output, "%d \t", i);
 281:main.c        ****                         UART_1_PutString(output);
 282:main.c        ****                         colourSensingCalibration(); 
 283:main.c        ****                         UART_1_PutString("\n");
 284:main.c        ****                         }         
 285:main.c        ****                         lock = TRUE;    
 286:main.c        ****                     }
 287:main.c        ****             } while (lock == TRUE);    
 288:main.c        ****         }
 289:main.c        ****         
 290:main.c        ****         // Servo Testing:
 291:main.c        ****         if (servo_testing) 
 292:main.c        ****         {
 293:main.c        ****             int lock = FALSE;
 294:main.c        ****             do 
 295:main.c        ****                 {   
 296:main.c        ****                     if (lock == FALSE) 
 297:main.c        ****                     {
 298:main.c        ****                         UART_1_PutString("Servo Testing: ");
 299:main.c        ****                         
 300:main.c        ****                         armMoving();
 301:main.c        ****                         
 302:main.c        ****                         
 303:main.c        ****                         for(int i = 0; i < 4; i++)
 304:main.c        ****                         {
 305:main.c        ****                             changeHeightToPuck(i);
 306:main.c        ****                             CyDelay(1000);
 307:main.c        ****                         }
 308:main.c        **** 
 309:main.c        ****                         lock = TRUE;    
 310:main.c        ****                     }
 311:main.c        ****             } while (lock == TRUE);    
 312:main.c        ****         }    
 313:main.c        ****                 
 314:main.c        ****         // Motor Testing: 
 315:main.c        ****         if (motor_testing)
 316:main.c        ****         {
 317:main.c        ****             int lock = FALSE;
 318:main.c        ****             do 
 319:main.c        ****                 {   
 320:main.c        ****                     if (lock == FALSE) 
 321:main.c        ****                     {
 322:main.c        ****                         UART_1_PutString("Motor Testing: \n");
 323:main.c        **** 
 324:main.c        ****                         //mishaMoveForward();
 325:main.c        ****                         //mishaMoveBackward();
 326:main.c        ****                         //mishaMoveDynamic(-300);
 327:main.c        ****                         
 328:main.c        ****                         mishaSwivel(-180, SPEED);
 329:main.c        ****                         
 330:main.c        ****                         lock = TRUE;    
 331:main.c        ****                     }
 332:main.c        ****             } while (lock == TRUE);    
 333:main.c        ****         }    
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 12


 334:main.c        ****         
 335:main.c        ****         // Ultrasonic Testing:
 336:main.c        ****         
 337:main.c        ****         if (ultrasonic_testing) 
 338:main.c        ****         {
 339:main.c        ****             int lock = FALSE;
 340:main.c        ****             do 
 341:main.c        ****                 {   
 342:main.c        ****                     if (lock == FALSE) 
 343:main.c        ****                     {
 344:main.c        ****                         UART_1_PutString("Ultrasonic Testing: \n");
 345:main.c        ****                         
 346:main.c        ****                         //armMoving();
 347:main.c        ****                         //straightAdjust();
 348:main.c        ****                         
 349:main.c        ****                         int dick = 2;
 350:main.c        ****                         while(0) {
 351:main.c        ****                             distanceSensor(dick);
 352:main.c        ****                             CyDelay(500);
 353:main.c        ****                             sprintf(output, "%d \t %d \t %d \t %d \t %d \n", ultrasonic_distances_m
 354:main.c        ****                                                      ultrasonic_distances_mm[1],
 355:main.c        ****                                                      ultrasonic_distances_mm[2],
 356:main.c        ****                                                         ultrasonic_distances_mm[3],
 357:main.c        ****                                                         ultrasonic_distances_mm[4]);
 358:main.c        ****                             UART_1_PutString(output);
 359:main.c        ****                         }
 360:main.c        ****                         // 0 gave front left    // front left
 361:main.c        ****                         // 1 gave front right   // front right 
 362:main.c        ****                         // 2 gave back sensor   // side left now??? 
 363:main.c        ****                         // 3 gave side right    // side right 
 364:main.c        ****                         // 4 gave back sensor   // back sensor
 365:main.c        ****                         
 366:main.c        ****                         while(0) {
 367:main.c        ****                             for (int i = 0; i < 5; i++)
 368:main.c        ****                             {
 369:main.c        ****                                 distanceSensor(i);
 370:main.c        ****                                 CyDelay(100);
 371:main.c        ****                                 sprintf(output, "%d \t", ultrasonic_distances_mm[i]);
 372:main.c        ****                                 UART_1_PutString(output);
 373:main.c        ****                             }
 374:main.c        ****                             UART_1_PutString("\n");
 375:main.c        ****                         }
 376:main.c        ****                         
 377:main.c        ****                         
 378:main.c        ****                         
 379:main.c        ****                         
 380:main.c        ****                         // TEST FIRING
 381:main.c        ****                         for (int i = 0; i < 5; i++)
 382:main.c        ****                             {
 383:main.c        ****                                 distanceSensor(i);
 384:main.c        ****                                 CyDelay(100);
 385:main.c        ****                                 sprintf(output, "%d \t", ultrasonic_distances_mm[i]);
 386:main.c        ****                                 UART_1_PutString(output);
 387:main.c        ****                             }
 388:main.c        ****                         UART_1_PutString("\n");
 389:main.c        ****                         
 390:main.c        ****                         
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 13


 391:main.c        ****                         moveUntil(150, FORWARD, LESS_THAN, FRONT_LEFT, SPEED);              // shou
 392:main.c        ****                         straightAdjust();
 393:main.c        ****                         
 394:main.c        ****                         
 395:main.c        ****                         /*
 396:main.c        ****                         for (int i = 0; i < 5; i++)
 397:main.c        ****                         {
 398:main.c        ****                             sprintf(output, "%d: \t", i);       
 399:main.c        ****                             UART_1_PutString(output);
 400:main.c        ****                         }
 401:main.c        ****                         UART_1_PutString("\n");   
 402:main.c        ****                         
 403:main.c        ****                         
 404:main.c        ****                         for (int i = 0; i < 50; i++) {
 405:main.c        ****                         distanceCheck();
 406:main.c        ****                         CyDelay(200);
 407:main.c        ****                         }
 408:main.c        ****                         
 409:main.c        ****                         */
 410:main.c        ****                         
 411:main.c        ****                         //straightAdjust();
 412:main.c        ****                         
 413:main.c        ****                         
 414:main.c        ****                         lock = TRUE;    
 415:main.c        ****                     }
 416:main.c        ****             } while (lock == TRUE);    
 417:main.c        ****         }    
 418:main.c        **** 
 419:main.c        ****         // Manual state set for testing
 420:main.c        ****         state = STATE_DEPOSIT_PUCK;
 291              		.loc 1 420 0 is_stmt 1
 292 0110 294A     		ldr	r2, .L23+36
 293 0112 0523     		movs	r3, #5
 294 0114 5360     		str	r3, [r2, #4]
 421:main.c        ****         currentPuckStackSize = 2;
 295              		.loc 1 421 0
 296 0116 0220     		movs	r0, #2
 297 0118 1F49     		ldr	r1, .L23+4
 298 011a C860     		str	r0, [r1, #12]
 422:main.c        ****         current_stage = 3;
 299              		.loc 1 422 0
 300 011c 0321     		movs	r1, #3
 301 011e 9160     		str	r1, [r2, #8]
 423:main.c        ****          
 424:main.c        ****         if (state == STATE_SCAN_PLAN) {              // colour sensing, while switch has not been p
 425:main.c        ****             
 426:main.c        ****             while(0){
 427:main.c        ****                 moveUntil(400, FORWARD, LESS_THAN, FRONT_LEFT, SPEED);
 428:main.c        ****                 mishaMoveDynamic(-450, SPEED);
 429:main.c        ****                 CyDelay(500);   
 430:main.c        ****                 colourSensingInitialise();      // Initialises wall colour sensor against the black
 431:main.c        ****                 CyDelay(500);
 432:main.c        ****                 mishaMoveDynamic(170, SPEED);
 433:main.c        ****                 CyDelay(500);
 434:main.c        ****                 
 435:main.c        ****                 for (int i = 0; i < 5; i++) {                       // scan each of the pucks 
 436:main.c        ****                     puckRackColours[i] = colourSensingOutput();
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 14


 437:main.c        ****                     CyDelay(500);
 438:main.c        ****                     mishaMoveDynamic(61, SPEED);
 439:main.c        ****                     CyDelay(500);
 440:main.c        ****                 }
 441:main.c        ****             
 442:main.c        ****             }
 443:main.c        **** 
 444:main.c        ****             while(1) {}
 445:main.c        **** 
 446:main.c        ****             while(1){
 447:main.c        ****             
 448:main.c        ****             int move = 400;
 449:main.c        ****             mishaMoveDynamic(move, SPEED);
 450:main.c        ****             mishaMoveDynamic(-move, SPEED);
 451:main.c        ****             
 452:main.c        ****             mishaMoveDynamic(move, SPEED);
 453:main.c        ****             straightAdjust();
 454:main.c        ****             mishaMoveDynamic(-move, SPEED);
 455:main.c        ****                 
 456:main.c        ****             }
 457:main.c        ****             
 458:main.c        ****             
 459:main.c        ****             straightAdjust();
 460:main.c        ****             moveUntil(-100, BACKWARD, LESS_THAN, BACK, SPEED);
 461:main.c        ****             colourSensingInitialise();      // Initialises wall colour sensor against the black wal
 462:main.c        ****                         
 463:main.c        ****             for (int i = 0; i < 5; i++) { 
 464:main.c        ****                 // scan each of the pucks 
 465:main.c        ****                 //moveUntil(puckRackOffsetsFromWest[i]);
 466:main.c        ****                 puckRackColours[i] = colourSensingOutput();
 467:main.c        ****                 CyDelay(500);
 468:main.c        **** 
 469:main.c        ****             //straightAdjust();
 470:main.c        ****             }
 471:main.c        ****                        
 472:main.c        ****             UART_1_PutString("Found Colours: \n");
 473:main.c        ****             for (int i = 0; i < 5; i++) 
 474:main.c        ****             {
 475:main.c        ****                 sprintf(output, "%i \n", puckRackColours[i]);    // updates UART showing values of 
 476:main.c        ****                 UART_1_PutString(output);
 477:main.c        ****             }
 478:main.c        ****             
 479:main.c        ****             
 480:main.c        ****             control_photodiode_Write(1);    // changes to claw photodiode
 481:main.c        ****             colour_sensing_algorithm = 1;   // changes it to claw algorithm
 482:main.c        ****                        
 483:main.c        ****             //while(1) {}
 484:main.c        ****             
 485:main.c        ****             // THEN WE FILTER THE NO PUCK VALUES:
 486:main.c        ****             int puckConstructionPlanIndex = 0; // Will be used to iterate through the 3 puck colour
 487:main.c        ****             
 488:main.c        ****             // Iterate over all 5 rack slots and place the 3 colours into puckConstructionPlan.
 489:main.c        ****             for (int puckRackIndex = 0; puckRackIndex < 5; puckRackIndex++){
 490:main.c        ****                 if (puckRackColours[puckRackIndex] != BLANK && puckConstructionPlanIndex != 3){
 491:main.c        ****                     puckConstructionPlan[puckConstructionPlanIndex] = puckRackColours[puckRackIndex
 492:main.c        ****                     puckConstructionPlanIndex++;
 493:main.c        ****                 }
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 15


 494:main.c        ****             }
 495:main.c        ****                     
 496:main.c        ****             // MOVE into the next state: 
 497:main.c        ****             state = STATE_LOCATE_BLOCK_AND_PUCKS;
 498:main.c        ****             
 499:main.c        ****             /*
 500:main.c        ****             if (!moving){
 501:main.c        ****                 moving = 1;
 502:main.c        ****             if (initialisation){moveBackwardIndefinitely(); initialisation = 0;}
 503:main.c        ****             else {moveForwardIndefinitely();}        
 504:main.c        **** 
 505:main.c        ****             moveAndAngle(SCAN_INITIALISE_HORIZONTAL,PLAN_SCAN_VERTICAL,WEST_ANGLE); // Move beyond 
 506:main.c        ****             
 507:main.c        ****             // Read the black wall
 508:main.c        ****             
 509:main.c        ****             for (currentPuckRackScanningIndex = 0; currentPuckRackScanningIndex <= 4; currentPuckRa
 510:main.c        ****                 moveAndAngle(puckRackOffsetsFromWest[currentPuckRackScanningIndex],PLAN_SCAN_VERTIC
 511:main.c        ****                 puckRackColours[currentPuckRackScanningIndex] = colourSensingOutput();
 512:main.c        ****             }
 513:main.c        ****    
 514:main.c        ****             */
 515:main.c        ****         }
 516:main.c        **** 
 517:main.c        ****     	if (state == STATE_LOCATE_BLOCK_AND_PUCKS){
 518:main.c        ****             
 519:main.c        ****             
 520:main.c        ****             // move away from home base 
 521:main.c        ****             mishaSwivel(-45, SPEED);  
 522:main.c        ****             mishaMoveDynamic(-150, SPEED);
 523:main.c        ****             mishaSwivel(45, SPEED);
 524:main.c        ****             mishaMoveDynamic(200, SPEED);
 525:main.c        ****             mishaSwivel(90, SPEED);
 526:main.c        ****             mishaMoveDynamic(500, SPEED);
 527:main.c        ****             
 528:main.c        ****             
 529:main.c        ****             // Move until construction zone            
 530:main.c        ****             moveUntil(100, FORWARD, LESS_THAN, FRONT_LEFT, SPEED);
 531:main.c        ****             control_led_Write(1);
 532:main.c        ****             CyDelay(1000);
 533:main.c        ****             control_led_Write(0);
 534:main.c        ****             CyDelay(500);
 535:main.c        ****             //straightAdjust();
 536:main.c        ****             
 537:main.c        ****             // SCAN FOR BLOCKS:
 538:main.c        ****             
 539:main.c        ****             //distanceSensor(SIDE_LEFT);  // takes how far we are away from home base wall
 540:main.c        ****             //int block_check = ARENA_WIDTH - BLOCK_ZONE_SOUTH - WIDTH_SENSOR_TO_SENSOR - ultrasoni
 541:main.c        ****                 // TAKES our distance from north wall, 
 542:main.c        ****                 // takes distance from arena, takes away 
 543:main.c        ****                 // minus 50 is a tolerance
 544:main.c        ****             
 545:main.c        ****             int block_check = 500;
 546:main.c        ****             
 547:main.c        ****             while(0) {
 548:main.c        ****             distanceSensor(SIDE_RIGHT);
 549:main.c        ****             CyDelay(SENSOR_DELAY_MIN);
 550:main.c        ****             sprintf(output, "%d \t", ultrasonic_distances_mm[SIDE_RIGHT]);
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 16


 551:main.c        ****             UART_1_PutString(output);
 552:main.c        ****             }
 553:main.c        **** 
 554:main.c        ****             
 555:main.c        ****             moveUntil(block_check, LESS_THAN, BACKWARD, SIDE_RIGHT, SPEED);   // this will move bac
 556:main.c        ****                         
 557:main.c        ****             CyDelay(2000);
 558:main.c        ****             
 559:main.c        ****             mishaMoveDynamic(-200, SPEED);
 560:main.c        ****             
 561:main.c        ****             distanceSensor(SIDE_RIGHT);
 562:main.c        ****             CyDelay(50);
 563:main.c        ****             
 564:main.c        ****             int check = ultrasonic_distances_mm[SIDE_RIGHT];
 565:main.c        ****             if (check > 500) {                                  // GREEN if no block there
 566:main.c        ****                 control_led_Write(2);
 567:main.c        ****                 CyDelay(1000);
 568:main.c        ****                 control_led_Write(0);
 569:main.c        ****                 CyDelay(500);
 570:main.c        ****                 
 571:main.c        ****             }
 572:main.c        ****             else {                                              // RED if block there 
 573:main.c        ****                 control_led_Write(1);
 574:main.c        ****                 CyDelay(1000);
 575:main.c        ****                 control_led_Write(0);
 576:main.c        ****                 CyDelay(500);
 577:main.c        ****             }
 578:main.c        **** 
 579:main.c        ****             moveUntil(100, BACKWARD, LESS_THAN, BACK, SPEED);
 580:main.c        ****             mishaSwivel(90, SPEED);
 581:main.c        ****             moveUntil(300, FORWARD, LESS_THAN, FRONT_LEFT, SPEED);
 582:main.c        **** 
 583:main.c        ****             
 584:main.c        ****             // Finding where the boundaries of the block are
 585:main.c        ****     		// Sweep across WEST to EAST until discrepancy
 586:main.c        ****             // But first sense the construction plan and then drive to wall and turn around to prep
 587:main.c        ****             
 588:main.c        ****             /*
 589:main.c        ****     		moveForwardIndefinitely();
 590:main.c        ****     		turnRight(180); // Now facing EAST wall
 591:main.c        ****     		moveForwardIndefinitely(); // Do this until we get to EAST wall
 592:main.c        ****             */
 593:main.c        ****             
 594:main.c        ****             //moveAndAngle(20,20,EAST_ANGLE); // Move to a position near construction base in an EA
 595:main.c        ****             //moveForwardIndefinitely(); // Scan until we reach EAST wall.
 596:main.c        ****             
 597:main.c        ****             // Will now know the boundaries of the block.
 598:main.c        ****             // Figure out direction we want to travel
 599:main.c        ****             
 600:main.c        **** 
 601:main.c        ****             //pathPastBlock = (block_edge_location[WEST] >= WIDTH_SENSOR_TO_SENSOR + SAFETY_MARGIN 
 602:main.c        ****             //pathToPucks = (puckPileLocation < ARENA_WIDTH / 2 ? WEST:EAST);
 603:main.c        ****             
 604:main.c        ****             state = STATE_GO_TO_PUCKS;
 605:main.c        **** 	    }
 606:main.c        ****              
 607:main.c        ****         /*
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 17


 608:main.c        ****         if (state == STATE_GO_TO_PUCKS){
 609:main.c        ****             
 610:main.c        ****             
 611:main.c        ****             if (pathPastBlock == WEST){
 612:main.c        ****                 if (pathToPucks != WEST) {
 613:main.c        ****                     moveAndAngle(SAFETY_MARGIN / 2 + WIDTH_SENSOR_TO_SENSOR / 2, ARENA_LENGTH - FRO
 614:main.c        ****                 }
 615:main.c        ****                 else {moveAndAngle(SAFETY_MARGIN / 2 + WIDTH_SENSOR_TO_SENSOR / 2, ARENA_LENGTH - F
 616:main.c        ****             }
 617:main.c        ****             else {
 618:main.c        ****                 if (pathToPucks != EAST) {
 619:main.c        ****                     moveAndAngle(ARENA_WIDTH - SAFETY_MARGIN / 2 - WIDTH_SENSOR_TO_SENSOR / 2, AREN
 620:main.c        ****                 }
 621:main.c        ****                 else {moveAndAngle(ARENA_WIDTH - SAFETY_MARGIN / 2 - WIDTH_SENSOR_TO_SENSOR / 2, AR
 622:main.c        ****             }
 623:main.c        ****             
 624:main.c        ****             // Now depending on if the pucks are in the corner or not, 
 625:main.c        ****             
 626:main.c        ****             // We are now in front of the pucks
 627:main.c        ****             
 628:main.c        ****             
 629:main.c        ****             state = STATE_FIND_REQUIRED_PUCK;
 630:main.c        ****         }
 631:main.c        ****         
 632:main.c        ****         */
 633:main.c        ****         
 634:main.c        ****         /*
 635:main.c        ****         // Ensure that we are @ east wall facing east at a minimum verticaldistance so we can turn 
 636:main.c        ****         if (state == STATE_GO_TO_PUCKS){
 637:main.c        ****             
 638:main.c        ****             if (blockEastClearance && puckEastClearance){
 639:main.c        ****                 
 640:main.c        ****                 moveBackwardUntil(CLEARANCE_RADIUS_CENTER_TO_FRONT,FRONT);
 641:main.c        ****                 faceDirection(NORTH_ANGLE);
 642:main.c        ****                 moveForwardUntil(CLEARANCE_RADIUS_CENTER_TO_FRONT,FRONT);
 643:main.c        ****                 //displaceLeft(); Repeatedly call this if below function not implemented
 644:main.c        ****                 //displaceLeftUntil(CLEARANCE_RADIUS_CENTER_TO_BACK,RIGHT);
 645:main.c        ****                 faceDirection(WEST_ANGLE);
 646:main.c        ****                 //displaceLeft();
 647:main.c        ****                 //displaceLeftUntil(DISTANCE_PUCKS_FROM_NORTH + WIDTH_SENSOR_TO_CENTER ,RIGHT);
 648:main.c        ****                 moveForwardUntil(DISTANCE_STOPPED_FROM_PUCK,FRONT); // Can change 10 to any value r
 649:main.c        ****                 // Now front sensor 10cm away from puck, ready to pick up puck
 650:main.c        ****                 moveForward(DISTANCE_STOPPED_FROM_PUCK + 3); // Adding 3 should move the claw enoug
 651:main.c        ****                 
 652:main.c        ****             }
 653:main.c        ****             
 654:main.c        ****             else if (blockWestClearance && puckWestClearance){
 655:main.c        ****                 
 656:main.c        ****                 moveBackwardUntil(CLEARANCE_RADIUS_CENTER_TO_FRONT,FRONT);
 657:main.c        ****                 faceDirection(NORTH_ANGLE);
 658:main.c        ****                 moveForwardUntil(CLEARANCE_RADIUS_CENTER_TO_FRONT,FRONT);
 659:main.c        ****                 //displaceLeft(); Repeatedly call this if below function not implemented
 660:main.c        ****                 //displaceLeftUntil(CLEARANCE_RADIUS_CENTER_TO_BACK,RIGHT);
 661:main.c        ****                 faceDirection(WEST_ANGLE);
 662:main.c        ****                 //displaceLeft();
 663:main.c        ****                 //displaceLeftUntil(DISTANCE_PUCKS_FROM_NORTH + WIDTH_SENSOR_TO_CENTER ,RIGHT);
 664:main.c        ****                 moveForwardUntil(DISTANCE_STOPPED_FROM_PUCK,FRONT); // Can change 10 to any value r
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 18


 665:main.c        ****                 // Now front sensor 10cm away from puck, ready to pick up puck
 666:main.c        ****                 moveForward(DISTANCE_STOPPED_FROM_PUCK + 3); // Adding 3 should move the claw enoug
 667:main.c        ****                 
 668:main.c        ****             }
 669:main.c        ****             
 670:main.c        ****             else if (blockEastClearance && puckWestClearance){
 671:main.c        ****                 
 672:main.c        ****             }
 673:main.c        ****             
 674:main.c        ****             else if (blockWestClearance && puckEastClearance){
 675:main.c        ****                 
 676:main.c        ****             }
 677:main.c        ****             
 678:main.c        ****             
 679:main.c        ****             
 680:main.c        ****         }
 681:main.c        ****         */
 682:main.c        ****         
 683:main.c        ****         if (state == STATE_FIND_REQUIRED_PUCK){
 684:main.c        ****             
 685:main.c        ****             
 686:main.c        ****         //SPEED = 70;               // need to be able to dynamically change speed of mishaMoveDyna
 687:main.c        ****         int puck_correct = FALSE;   // A flag to determine if the correct puck has been picked up
 688:main.c        ****         int puck_scan;
 689:main.c        ****         
 690:main.c        ****     
 691:main.c        ****         puckConstructionPlan[1] = RED;
 692:main.c        ****     
 693:main.c        ****         // Scanning puck:
 694:main.c        **** 
 695:main.c        ****         while (puck_correct == FALSE) 
 696:main.c        ****         {
 697:main.c        ****             mishaMoveDynamic(50, SPEED);  // robot moves forward towards puck
 698:main.c        ****                                     // could replace this with the distance gathered from the ultra
 699:main.c        ****             changeHeightToPuck(1);  // arm lowers onto robot
 700:main.c        ****             puck_scan = colourSensingOutput();  // colour sensor takes a scan
 701:main.c        ****             changeHeightToPuck(3);  // arm returns to high position
 702:main.c        ****             mishaMoveDynamic(-50, SPEED);   // robot moves backwards
 703:main.c        ****             if (puck_scan == puckConstructionPlan[1]) {puck_correct = TRUE;}
 704:main.c        ****                                     // if colour == true:
 705:main.c        ****                 
 706:main.c        ****             else 
 707:main.c        ****             {
 708:main.c        ****                                     // if colour == false
 709:main.c        ****                                         // robot translates to side to see next puck, and performs 
 710:main.c        ****             }
 711:main.c        ****         }
 712:main.c        ****                 
 713:main.c        ****         // Picking Up puck from pile:
 714:main.c        ****         changeHeightToPuck(0);      // arm lowers to ground
 715:main.c        ****         //changeHeightToPuck(1);
 716:main.c        ****         moveUntilPuck();
 717:main.c        ****         //mishaMoveDynamic(60);       // robot moves forward
 718:main.c        ****         armClose();                 // claw closes on puck
 719:main.c        ****         changeHeightToPuck(3);      // arm lifts up to highest position
 720:main.c        ****         mishaMoveDynamic(-60, SPEED);       // robot moves back away from puck area 
 721:main.c        ****         
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 19


 722:main.c        ****             
 723:main.c        ****         while(1) {};           
 724:main.c        ****             
 725:main.c        ****             /*
 726:main.c        ****             int requiredColour = puckConstructionPlan[currentPuckStackSize];
 727:main.c        ****             int puckFound = 0;
 728:main.c        ****             
 729:main.c        ****             
 730:main.c        ****             // Let's assume that we get to the east or west of the puck pile and we are as close to
 731:main.c        ****             if (roundDirection() == NORTH){
 732:main.c        **** 
 733:main.c        ****             }
 734:main.c        ****             else if (roundDirection() == EAST){
 735:main.c        ****                 // Poll ultrasonics, displaceRight until no longer see the pucks
 736:main.c        ****                 // Drive up to the middle puck
 737:main.c        ****                 // We know that we used moveAndAngle() to get to the exact vertical position of the
 738:main.c        ****                 moveForwardIndefinitely();
 739:main.c        ****                 
 740:main.c        ****                 // May need to displaceRight a bit to ensure that we are perfectly centered with th
 741:main.c        ****                 // Now we need to inch forward with the claw lifted
 742:main.c        ****                 // Also store the horizontal location of the pucks based off our current position. 
 743:main.c        ****                 
 744:main.c        ****                 horizontalPuckGrid = currentPosition[0]; // Take our horizontal position as a refer
 745:main.c        ****                 
 746:main.c        ****                 changeHeightToPuck(1); // Lift up enough so we dont hit the pucks when scanning the
 747:main.c        ****                 moveForward(DISTANCE_STOPPED_FROM_PUCK); // Move forward until colour sensor above 
 748:main.c        ****                
 749:main.c        ****                 if (colourSensingOutput() == puckConstructionPlan[currentPuckStackSize]){ 
 750:main.c        ****                     // This is the puck we need
 751:main.c        ****                     moveBackward(DISTANCE_STOPPED_FROM_PUCK); // Reverse to make room for lowering 
 752:main.c        ****                     lowerAndOpen(0); // We are grabbing the pucks from the ground.
 753:main.c        ****                     moveForward(DISTANCE_STOPPED_FROM_PUCK);
 754:main.c        ****                     closeAndRaise(1); // Lift above the height of the ground pucks
 755:main.c        **** 
 756:main.c        ****                 }
 757:main.c        ****                 
 758:main.c        ****                 // If the colour isn't what we need, we could pick it up and drop it somewhere out 
 759:main.c        ****                 else {
 760:main.c        ****                     moveBackward(DISTANCE_STOPPED_FROM_PUCK); // Need to check the next puck
 761:main.c        ****                     displaceLeft(5,22);
 762:main.c        ****                     changeHeightToPuck(1); // Lift up enough so we dont hit the pucks when scanning
 763:main.c        ****                     moveForward(DISTANCE_STOPPED_FROM_PUCK); // Move forward until colour sensor ab
 764:main.c        ****                     
 765:main.c        ****                     // Scan the next puck
 766:main.c        ****                     if (colourSensingOutput() == puckConstructionPlan[currentPuckStackSize]){ 
 767:main.c        ****                         // This is the puck we need
 768:main.c        ****                         moveBackward(DISTANCE_STOPPED_FROM_PUCK); // Reverse to make room for lower
 769:main.c        ****                         lowerAndOpen(0); // We are grabbing the pucks from the ground.
 770:main.c        ****                         moveForward(DISTANCE_STOPPED_FROM_PUCK);
 771:main.c        ****                         closeAndRaise(1); // Lift above the height of the ground pucks
 772:main.c        **** 
 773:main.c        ****                     }
 774:main.c        ****                     
 775:main.c        ****                     else {
 776:main.c        ****                         moveBackward(DISTANCE_STOPPED_FROM_PUCK); // Need to check the next puck
 777:main.c        ****                         displaceLeft(5,22);
 778:main.c        ****                         changeHeightToPuck(1); // Lift up enough so we dont hit the pucks when scan
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 20


 779:main.c        ****                         moveForward(DISTANCE_STOPPED_FROM_PUCK); // Move forward until colour senso
 780:main.c        ****                         
 781:main.c        ****                         if (colourSensingOutput() == puckConstructionPlan[currentPuckStackSize]){ 
 782:main.c        ****                             // This is the puck we need
 783:main.c        ****                             moveBackward(DISTANCE_STOPPED_FROM_PUCK); // Reverse to make room for l
 784:main.c        ****                             lowerAndOpen(0); // We are grabbing the pucks from the ground.
 785:main.c        ****                             moveForward(DISTANCE_STOPPED_FROM_PUCK);
 786:main.c        ****                             closeAndRaise(1); // Lift above the height of the ground pucks
 787:main.c        **** 
 788:main.c        ****                         }
 789:main.c        ****                     
 790:main.c        ****                     }
 791:main.c        ****                 }
 792:main.c        ****                 
 793:main.c        ****                 if (colourSensingOutput() == puckConstructionPlan[currentPuckStackSize]){ 
 794:main.c        ****                     // This is the puck we need
 795:main.c        ****                     moveBackward(DISTANCE_STOPPED_FROM_PUCK); // Reverse to make room for lowering 
 796:main.c        ****                     lowerAndOpen(0); // We are grabbing the pucks from the ground.
 797:main.c        ****                     moveForward(DISTANCE_STOPPED_FROM_PUCK);
 798:main.c        ****                     closeAndRaise(1); // Lift above the height of the ground pucks
 799:main.c        **** 
 800:main.c        ****                 }
 801:main.c        ****                 
 802:main.c        ****             }
 803:main.c        ****             
 804:main.c        ****             else if (roundDirection() == WEST){
 805:main.c        ****                 // Poll ultrasonics, displaceRight until no longer see the pucks
 806:main.c        ****                 // Drive up to the middle puck
 807:main.c        ****                 // We know that we used moveAndAngle() to get to the exact vertical position of the
 808:main.c        ****                 moveForwardIndefinitely();
 809:main.c        ****             }
 810:main.c        ****             
 811:main.c        ****             */
 812:main.c        ****             
 813:main.c        ****             /*
 814:main.c        ****             while(!puckFound){
 815:main.c        ****                   
 816:main.c        ****             }
 817:main.c        ****             */
 818:main.c        ****             
 819:main.c        ****             
 820:main.c        ****         }
 821:main.c        ****         
 822:main.c        ****         if (state == STATE_DEPOSIT_PUCK){
 823:main.c        **** 
 824:main.c        ****             /*
 825:main.c        ****             moveAndAngle(CONSTRUCTION_MIDPOINT,CONSTRUCTION_DISTANCE_FROM_WALL + 10, SOUTH_ANGLE); 
 826:main.c        ****             lowerAndOpen(currentPuckStackSize);
 827:main.c        ****             moveAndAngle(CONSTRUCTION_MIDPOINT,CONSTRUCTION_DISTANCE_FROM_WALL, SOUTH_ANGLE); // Ta
 828:main.c        ****             changeHeightToPuck(currentPuckStackSize + 1); // Lift claw above stack to avoid hitting
 829:main.c        ****             moveAndAngle(CONSTRUCTION_MIDPOINT,CONSTRUCTION_DISTANCE_FROM_WALL, SOUTH_ANGLE); // Ta
 830:main.c        ****             */
 831:main.c        ****             
 832:main.c        ****             //lowerAndOpen(current_stage);
 833:main.c        ****             changeHeightToPuck(current_stage - 1); // Lift claw above stack to avoid hitting the st
 302              		.loc 1 833 0
 303 0120 1446     		mov	r4, r2
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 21


 304 0122 481E     		subs	r0, r1, #1
 305 0124 FFF7FEFF 		bl	changeHeightToPuck
 306              	.LVL48:
 834:main.c        ****             armOpen();
 307              		.loc 1 834 0
 308 0128 FFF7FEFF 		bl	armOpen
 309              	.LVL49:
 835:main.c        ****             
 836:main.c        ****             changeHeightToPuck(current_stage);
 310              		.loc 1 836 0
 311 012c A068     		ldr	r0, [r4, #8]
 312 012e FFF7FEFF 		bl	changeHeightToPuck
 313              	.LVL50:
 837:main.c        ****             
 838:main.c        ****             moveUntil(CONSTRUCTION_DISTANCE_CLEAR_FROM_STACK, BACKWARD, GREATER_THAN, FRONT_LEFT, S
 314              		.loc 1 838 0
 315 0132 AA23     		movs	r3, #170
 316 0134 0093     		str	r3, [sp]
 317 0136 0023     		movs	r3, #0
 318 0138 0122     		movs	r2, #1
 319 013a 1946     		mov	r1, r3
 320 013c D220     		movs	r0, #210
 321 013e FFF7FEFF 		bl	moveUntil
 322              	.LVL51:
 839:main.c        ****             
 840:main.c        ****             if (current_stage >= 3){state = STATE_PARK_HOME;}        // Returns to home 
 323              		.loc 1 840 0
 324 0142 A368     		ldr	r3, [r4, #8]
 325 0144 022B     		cmp	r3, #2
 326 0146 02DD     		ble	.L17
 327              		.loc 1 840 0 is_stmt 0 discriminator 1
 328 0148 0622     		movs	r2, #6
 329 014a 6260     		str	r2, [r4, #4]
 330 014c 02E0     		b	.L16
 331              	.L17:
 841:main.c        ****             else {current_stage++;}
 332              		.loc 1 841 0 is_stmt 1
 333 014e 0133     		adds	r3, r3, #1
 334 0150 194A     		ldr	r2, .L23+36
 335 0152 9360     		str	r3, [r2, #8]
 336              	.L16:
 842:main.c        **** 
 843:main.c        ****         }
 844:main.c        ****         
 845:main.c        ****         if (state == STATE_PARK_HOME){
 337              		.loc 1 845 0
 338 0154 184B     		ldr	r3, .L23+36
 339 0156 5B68     		ldr	r3, [r3, #4]
 340 0158 062B     		cmp	r3, #6
 341 015a D9D1     		bne	.L18
 846:main.c        ****             
 847:main.c        ****             // When we enter this state we can assume that we have just deposited the final puck on
 848:main.c        ****             // Thus we are facing the stack.
 849:main.c        ****             
 850:main.c        ****             
 851:main.c        ****             mishaSwivel(90, SPEED);
 342              		.loc 1 851 0
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 22


 343 015c AA21     		movs	r1, #170
 344 015e 5A20     		movs	r0, #90
 345 0160 FFF7FEFF 		bl	mishaSwivel
 346              	.LVL52:
 852:main.c        ****             straightAdjust();
 347              		.loc 1 852 0
 348 0164 FFF7FEFF 		bl	straightAdjust
 349              	.LVL53:
 853:main.c        ****             moveUntil(HOME_MIDPOINT - DISTANCE_FRONT_SENSOR_FROM_CENTER , BACKWARD, GREATER_THAN, F
 350              		.loc 1 853 0
 351 0168 AA24     		movs	r4, #170
 352 016a 0094     		str	r4, [sp]
 353 016c 0123     		movs	r3, #1
 354 016e 1A46     		mov	r2, r3
 355 0170 0021     		movs	r1, #0
 356 0172 40F22620 		movw	r0, #550
 357 0176 FFF7FEFF 		bl	moveUntil
 358              	.LVL54:
 854:main.c        ****             mishaSwivel(90, SPEED);
 359              		.loc 1 854 0
 360 017a 2146     		mov	r1, r4
 361 017c 5A20     		movs	r0, #90
 362 017e FFF7FEFF 		bl	mishaSwivel
 363              	.LVL55:
 855:main.c        ****             moveUntil(HOME_PARKING_DISTANCE , BACKWARD, LESS_THAN, BACK, SPEED);
 364              		.loc 1 855 0
 365 0182 0094     		str	r4, [sp]
 366 0184 0423     		movs	r3, #4
 367 0186 0022     		movs	r2, #0
 368 0188 1146     		mov	r1, r2
 369 018a 2820     		movs	r0, #40
 370 018c FFF7FEFF 		bl	moveUntil
 371              	.LVL56:
 372              	.L19:
 373 0190 FEE7     		b	.L19
 374              	.L24:
 375 0192 00BF     		.align	2
 376              	.L23:
 377 0194 00000000 		.word	.LC0
 378 0198 00000000 		.word	.LANCHOR0
 379 019c 00000000 		.word	TIH
 380 01a0 00000000 		.word	StartIH
 381 01a4 18000000 		.word	.LC1
 382 01a8 00000000 		.word	output
 383 01ac 00000000 		.word	ultrasonic_distances_mm
 384 01b0 38000000 		.word	.LC2
 385 01b4 40000000 		.word	.LC3
 386 01b8 00000000 		.word	.LANCHOR1
 387              		.cfi_endproc
 388              	.LFE66:
 389              		.size	main, .-main
 390              		.comm	distance_returned_global,4,4
 391              		.global	current_stage
 392              		.global	PLAN_SCAN_VERTICAL
 393              		.global	moving
 394              		.global	colour_sensing_algorithm
 395              		.global	colour_flag
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 23


 396              		.global	idac_value
 397              		.comm	moveBackwardAllowed,2,2
 398              		.comm	moveForwardAllowed,2,2
 399              		.comm	moveRightAllowed,2,2
 400              		.comm	moveLeftAllowed,2,2
 401              		.global	moveNow
 402              		.comm	desiredOrientation,4,4
 403              		.global	currentOrientation
 404              		.comm	desiredPosition,8,4
 405              		.global	currentPosition
 406              		.global	puckWestClearance
 407              		.global	puckEastClearance
 408              		.global	blockWestClearance
 409              		.global	blockEastClearance
 410              		.comm	pathPastBlock,4,4
 411              		.comm	pathToPucks,4,4
 412              		.global	beginNavigation
 413              		.global	horizontalPuckGrid
 414              		.global	puckConstructionPlan
 415              		.global	currentPuckStackSize
 416              		.global	running
 417              		.global	state
 418              		.comm	ultrasonic_flag,4,4
 419              		.comm	initialisation,4,4
 420              		.comm	output,32,4
 421              		.global	turningRightFlag
 422              		.global	turningLeftFlag
 423              		.global	drivingBackwardFlag
 424              		.global	drivingForwardFlag
 425              		.comm	puckPileLocation,4,4
 426              		.global	block_edge_location
 427              		.global	sweeping
 428              		.global	puckRackOffsetsFromWest
 429              		.global	puckRackColours
 430              		.global	currentPuckRackScanningIndex
 431              		.comm	driveStraightEnable,4,4
 432              		.section	.rodata
 433              		.align	2
 434              		.type	PLAN_SCAN_VERTICAL, %object
 435              		.size	PLAN_SCAN_VERTICAL, 4
 436              	PLAN_SCAN_VERTICAL:
 437 0000 0A000000 		.word	10
 438              		.data
 439              		.align	2
 440              		.set	.LANCHOR1,. + 0
 441              		.type	colour_flag, %object
 442              		.size	colour_flag, 4
 443              	colour_flag:
 444 0000 01000000 		.word	1
 445              		.type	state, %object
 446              		.size	state, 4
 447              	state:
 448 0004 01000000 		.word	1
 449              		.type	current_stage, %object
 450              		.size	current_stage, 4
 451              	current_stage:
 452 0008 01000000 		.word	1
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 24


 453              		.type	moveNow, %object
 454              		.size	moveNow, 2
 455              	moveNow:
 456 000c 0100     		.short	1
 457 000e 0000     		.space	2
 458              		.type	currentOrientation, %object
 459              		.size	currentOrientation, 4
 460              	currentOrientation:
 461 0010 5A000000 		.word	90
 462              		.type	running, %object
 463              		.size	running, 4
 464              	running:
 465 0014 01000000 		.word	1
 466              		.type	puckRackOffsetsFromWest, %object
 467              		.size	puckRackOffsetsFromWest, 20
 468              	puckRackOffsetsFromWest:
 469 0018 D0020000 		.word	720
 470 001c 94020000 		.word	660
 471 0020 58020000 		.word	600
 472 0024 1C020000 		.word	540
 473 0028 E0010000 		.word	480
 474              		.section	.rodata.str1.4,"aMS",%progbits,1
 475              		.align	2
 476              	.LC0:
 477 0000 55415254 		.ascii	"UART commencing... \012\000"
 477      20636F6D 
 477      6D656E63 
 477      696E672E 
 477      2E2E200A 
 478 0015 000000   		.space	3
 479              	.LC1:
 480 0018 556C7472 		.ascii	"Ultrasonic Calibration tests: \012\000"
 480      61736F6E 
 480      69632043 
 480      616C6962 
 480      72617469 
 481              	.LC2:
 482 0038 25642009 		.ascii	"%d \011\000"
 482      00
 483 003d 000000   		.space	3
 484              	.LC3:
 485 0040 0A0A00   		.ascii	"\012\012\000"
 486              		.bss
 487              		.align	2
 488              		.set	.LANCHOR0,. + 0
 489              		.type	beginNavigation, %object
 490              		.size	beginNavigation, 4
 491              	beginNavigation:
 492 0000 00000000 		.space	4
 493              		.type	idac_value, %object
 494              		.size	idac_value, 4
 495              	idac_value:
 496 0004 00000000 		.space	4
 497              		.type	colour_sensing_algorithm, %object
 498              		.size	colour_sensing_algorithm, 4
 499              	colour_sensing_algorithm:
 500 0008 00000000 		.space	4
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 25


 501              		.type	currentPuckStackSize, %object
 502              		.size	currentPuckStackSize, 4
 503              	currentPuckStackSize:
 504 000c 00000000 		.space	4
 505              		.type	puckConstructionPlan, %object
 506              		.size	puckConstructionPlan, 12
 507              	puckConstructionPlan:
 508 0010 00000000 		.space	12
 508      00000000 
 508      00000000 
 509              		.type	moving, %object
 510              		.size	moving, 4
 511              	moving:
 512 001c 00000000 		.space	4
 513              		.type	currentPosition, %object
 514              		.size	currentPosition, 8
 515              	currentPosition:
 516 0020 00000000 		.space	8
 516      00000000 
 517              		.type	puckWestClearance, %object
 518              		.size	puckWestClearance, 2
 519              	puckWestClearance:
 520 0028 0000     		.space	2
 521              		.type	puckEastClearance, %object
 522              		.size	puckEastClearance, 2
 523              	puckEastClearance:
 524 002a 0000     		.space	2
 525              		.type	blockWestClearance, %object
 526              		.size	blockWestClearance, 2
 527              	blockWestClearance:
 528 002c 0000     		.space	2
 529              		.type	blockEastClearance, %object
 530              		.size	blockEastClearance, 2
 531              	blockEastClearance:
 532 002e 0000     		.space	2
 533              		.type	horizontalPuckGrid, %object
 534              		.size	horizontalPuckGrid, 4
 535              	horizontalPuckGrid:
 536 0030 00000000 		.space	4
 537              		.type	turningRightFlag, %object
 538              		.size	turningRightFlag, 2
 539              	turningRightFlag:
 540 0034 0000     		.space	2
 541              		.type	turningLeftFlag, %object
 542              		.size	turningLeftFlag, 2
 543              	turningLeftFlag:
 544 0036 0000     		.space	2
 545              		.type	drivingBackwardFlag, %object
 546              		.size	drivingBackwardFlag, 2
 547              	drivingBackwardFlag:
 548 0038 0000     		.space	2
 549              		.type	drivingForwardFlag, %object
 550              		.size	drivingForwardFlag, 2
 551              	drivingForwardFlag:
 552 003a 0000     		.space	2
 553              		.type	block_edge_location, %object
 554              		.size	block_edge_location, 16
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 26


 555              	block_edge_location:
 556 003c 00000000 		.space	16
 556      00000000 
 556      00000000 
 556      00000000 
 557              		.type	sweeping, %object
 558              		.size	sweeping, 4
 559              	sweeping:
 560 004c 00000000 		.space	4
 561              		.type	puckRackColours, %object
 562              		.size	puckRackColours, 20
 563              	puckRackColours:
 564 0050 00000000 		.space	20
 564      00000000 
 564      00000000 
 564      00000000 
 564      00000000 
 565              		.type	currentPuckRackScanningIndex, %object
 566              		.size	currentPuckRackScanningIndex, 4
 567              	currentPuckRackScanningIndex:
 568 0064 00000000 		.space	4
 569              		.text
 570              	.Letext0:
 571              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 572              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 573              		.file 4 "Generated_Source\\PSoC5/core_cm3.h"
 574              		.file 5 "ultrasonic.h"
 575              		.file 6 "main.h"
 576              		.file 7 "Generated_Source\\PSoC5/CyLib.h"
 577              		.file 8 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 578              		.file 9 "Generated_Source\\PSoC5/UART_1.h"
 579              		.file 10 "Generated_Source\\PSoC5/TIA_1.h"
 580              		.file 11 "Generated_Source\\PSoC5/ADC.h"
 581              		.file 12 "Generated_Source\\PSoC5/IDAC8_1.h"
 582              		.file 13 "Generated_Source\\PSoC5/control_photodiode.h"
 583              		.file 14 "Generated_Source\\PSoC5/control_led.h"
 584              		.file 15 "colour.h"
 585              		.file 16 "Generated_Source\\PSoC5/Rack_Servo_PWM.h"
 586              		.file 17 "Generated_Source\\PSoC5/Gripper_Servo_PWM.h"
 587              		.file 18 "Generated_Source\\PSoC5/Motor_Left_Driver.h"
 588              		.file 19 "Generated_Source\\PSoC5/Motor_Right_Driver.h"
 589              		.file 20 "Generated_Source\\PSoC5/Motor_Left_Decoder.h"
 590              		.file 21 "Generated_Source\\PSoC5/Motor_Right_Decoder.h"
 591              		.file 22 "Generated_Source\\PSoC5/Timer_1.h"
 592              		.file 23 "Generated_Source\\PSoC5/Sonic.h"
 593              		.file 24 "Generated_Source\\PSoC5/Start.h"
 594              		.file 25 "servo.h"
 595              		.file 26 "navigation.h"
 596              		.file 27 "mishamotor.h"
 597              		.section	.debug_info,"",%progbits
 598              	.Ldebug_info0:
 599 0000 7D090000 		.4byte	0x97d
 600 0004 0400     		.2byte	0x4
 601 0006 00000000 		.4byte	.Ldebug_abbrev0
 602 000a 04       		.byte	0x4
 603 000b 01       		.uleb128 0x1
 604 000c B4060000 		.4byte	.LASF100
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 27


 605 0010 0C       		.byte	0xc
 606 0011 BC050000 		.4byte	.LASF101
 607 0015 C4030000 		.4byte	.LASF102
 608 0019 18000000 		.4byte	.Ldebug_ranges0+0x18
 609 001d 00000000 		.4byte	0
 610 0021 00000000 		.4byte	.Ldebug_line0
 611 0025 02       		.uleb128 0x2
 612 0026 01       		.byte	0x1
 613 0027 06       		.byte	0x6
 614 0028 1B000000 		.4byte	.LASF0
 615 002c 02       		.uleb128 0x2
 616 002d 01       		.byte	0x1
 617 002e 08       		.byte	0x8
 618 002f 49030000 		.4byte	.LASF1
 619 0033 02       		.uleb128 0x2
 620 0034 02       		.byte	0x2
 621 0035 05       		.byte	0x5
 622 0036 5F000000 		.4byte	.LASF2
 623 003a 02       		.uleb128 0x2
 624 003b 02       		.byte	0x2
 625 003c 07       		.byte	0x7
 626 003d 98050000 		.4byte	.LASF3
 627 0041 03       		.uleb128 0x3
 628 0042 28060000 		.4byte	.LASF9
 629 0046 02       		.byte	0x2
 630 0047 3F       		.byte	0x3f
 631 0048 4C000000 		.4byte	0x4c
 632 004c 02       		.uleb128 0x2
 633 004d 04       		.byte	0x4
 634 004e 05       		.byte	0x5
 635 004f 7E020000 		.4byte	.LASF4
 636 0053 02       		.uleb128 0x2
 637 0054 04       		.byte	0x4
 638 0055 07       		.byte	0x7
 639 0056 C3050000 		.4byte	.LASF5
 640 005a 02       		.uleb128 0x2
 641 005b 08       		.byte	0x8
 642 005c 05       		.byte	0x5
 643 005d 4D020000 		.4byte	.LASF6
 644 0061 02       		.uleb128 0x2
 645 0062 08       		.byte	0x8
 646 0063 07       		.byte	0x7
 647 0064 49040000 		.4byte	.LASF7
 648 0068 04       		.uleb128 0x4
 649 0069 04       		.byte	0x4
 650 006a 05       		.byte	0x5
 651 006b 696E7400 		.ascii	"int\000"
 652 006f 02       		.uleb128 0x2
 653 0070 04       		.byte	0x4
 654 0071 07       		.byte	0x7
 655 0072 80040000 		.4byte	.LASF8
 656 0076 03       		.uleb128 0x3
 657 0077 1E050000 		.4byte	.LASF10
 658 007b 03       		.byte	0x3
 659 007c 2C       		.byte	0x2c
 660 007d 41000000 		.4byte	0x41
 661 0081 02       		.uleb128 0x2
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 28


 662 0082 04       		.byte	0x4
 663 0083 04       		.byte	0x4
 664 0084 34020000 		.4byte	.LASF11
 665 0088 02       		.uleb128 0x2
 666 0089 08       		.byte	0x8
 667 008a 04       		.byte	0x4
 668 008b E3050000 		.4byte	.LASF12
 669 008f 02       		.uleb128 0x2
 670 0090 01       		.byte	0x1
 671 0091 08       		.byte	0x8
 672 0092 14050000 		.4byte	.LASF13
 673 0096 02       		.uleb128 0x2
 674 0097 08       		.byte	0x8
 675 0098 04       		.byte	0x4
 676 0099 12010000 		.4byte	.LASF14
 677 009d 02       		.uleb128 0x2
 678 009e 04       		.byte	0x4
 679 009f 07       		.byte	0x7
 680 00a0 5F060000 		.4byte	.LASF15
 681 00a4 05       		.uleb128 0x5
 682 00a5 54494800 		.ascii	"TIH\000"
 683 00a9 01       		.byte	0x1
 684 00aa 70       		.byte	0x70
 685 00ab 00000000 		.4byte	.LFB64
 686 00af 08000000 		.4byte	.LFE64-.LFB64
 687 00b3 01       		.uleb128 0x1
 688 00b4 9C       		.byte	0x9c
 689 00b5 C3000000 		.4byte	0xc3
 690 00b9 06       		.uleb128 0x6
 691 00ba 06000000 		.4byte	.LVL0
 692 00be FF070000 		.4byte	0x7ff
 693 00c2 00       		.byte	0
 694 00c3 07       		.uleb128 0x7
 695 00c4 1E010000 		.4byte	.LASF16
 696 00c8 01       		.byte	0x1
 697 00c9 75       		.byte	0x75
 698 00ca 00000000 		.4byte	.LFB65
 699 00ce 20000000 		.4byte	.LFE65-.LFB65
 700 00d2 01       		.uleb128 0x1
 701 00d3 9C       		.byte	0x9c
 702 00d4 E9000000 		.4byte	0xe9
 703 00d8 08       		.uleb128 0x8
 704 00d9 08000000 		.4byte	.LVL1
 705 00dd 0A080000 		.4byte	0x80a
 706 00e1 09       		.uleb128 0x9
 707 00e2 01       		.uleb128 0x1
 708 00e3 50       		.byte	0x50
 709 00e4 02       		.uleb128 0x2
 710 00e5 08       		.byte	0x8
 711 00e6 64       		.byte	0x64
 712 00e7 00       		.byte	0
 713 00e8 00       		.byte	0
 714 00e9 0A       		.uleb128 0xa
 715 00ea 19050000 		.4byte	.LASF103
 716 00ee 01       		.byte	0x1
 717 00ef 90       		.byte	0x90
 718 00f0 68000000 		.4byte	0x68
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 29


 719 00f4 00000000 		.4byte	.LFB66
 720 00f8 BC010000 		.4byte	.LFE66-.LFB66
 721 00fc 01       		.uleb128 0x1
 722 00fd 9C       		.byte	0x9c
 723 00fe C4040000 		.4byte	0x4c4
 724 0102 0B       		.uleb128 0xb
 725 0103 B4000000 		.4byte	.LASF17
 726 0107 01       		.byte	0x1
 727 0108 9C       		.byte	0x9c
 728 0109 68000000 		.4byte	0x68
 729 010d 00       		.byte	0
 730 010e 0B       		.uleb128 0xb
 731 010f 72040000 		.4byte	.LASF18
 732 0113 01       		.byte	0x1
 733 0114 9D       		.byte	0x9d
 734 0115 68000000 		.4byte	0x68
 735 0119 00       		.byte	0
 736 011a 0B       		.uleb128 0xb
 737 011b 6F060000 		.4byte	.LASF19
 738 011f 01       		.byte	0x1
 739 0120 9E       		.byte	0x9e
 740 0121 68000000 		.4byte	0x68
 741 0125 00       		.byte	0
 742 0126 0B       		.uleb128 0xb
 743 0127 08000000 		.4byte	.LASF20
 744 012b 01       		.byte	0x1
 745 012c 9F       		.byte	0x9f
 746 012d 68000000 		.4byte	0x68
 747 0131 00       		.byte	0
 748 0132 0C       		.uleb128 0xc
 749 0133 D4000000 		.4byte	.LBB2
 750 0137 3C000000 		.4byte	.LBE2-.LBB2
 751 013b CC010000 		.4byte	0x1cc
 752 013f 0D       		.uleb128 0xd
 753 0140 6A00     		.ascii	"j\000"
 754 0142 01       		.byte	0x1
 755 0143 D1       		.byte	0xd1
 756 0144 68000000 		.4byte	0x68
 757 0148 00000000 		.4byte	.LLST0
 758 014c 0E       		.uleb128 0xe
 759 014d 00000000 		.4byte	.Ldebug_ranges0+0
 760 0151 B8010000 		.4byte	0x1b8
 761 0155 0D       		.uleb128 0xd
 762 0156 6900     		.ascii	"i\000"
 763 0158 01       		.byte	0x1
 764 0159 D3       		.byte	0xd3
 765 015a 68000000 		.4byte	0x68
 766 015e 1F000000 		.4byte	.LLST1
 767 0162 0F       		.uleb128 0xf
 768 0163 DE000000 		.4byte	.LVL39
 769 0167 15080000 		.4byte	0x815
 770 016b 76010000 		.4byte	0x176
 771 016f 09       		.uleb128 0x9
 772 0170 01       		.uleb128 0x1
 773 0171 50       		.byte	0x50
 774 0172 02       		.uleb128 0x2
 775 0173 74       		.byte	0x74
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 30


 776 0174 00       		.sleb128 0
 777 0175 00       		.byte	0
 778 0176 0F       		.uleb128 0xf
 779 0177 E4000000 		.4byte	.LVL40
 780 017b 0A080000 		.4byte	0x80a
 781 017f 8A010000 		.4byte	0x18a
 782 0183 09       		.uleb128 0x9
 783 0184 01       		.uleb128 0x1
 784 0185 50       		.byte	0x50
 785 0186 02       		.uleb128 0x2
 786 0187 08       		.byte	0x8
 787 0188 64       		.byte	0x64
 788 0189 00       		.byte	0
 789 018a 0F       		.uleb128 0xf
 790 018b F4000000 		.4byte	.LVL41
 791 018f 20080000 		.4byte	0x820
 792 0193 A7010000 		.4byte	0x1a7
 793 0197 09       		.uleb128 0x9
 794 0198 01       		.uleb128 0x1
 795 0199 50       		.byte	0x50
 796 019a 02       		.uleb128 0x2
 797 019b 76       		.byte	0x76
 798 019c 00       		.sleb128 0
 799 019d 09       		.uleb128 0x9
 800 019e 01       		.uleb128 0x1
 801 019f 51       		.byte	0x51
 802 01a0 05       		.uleb128 0x5
 803 01a1 03       		.byte	0x3
 804 01a2 38000000 		.4byte	.LC2
 805 01a6 00       		.byte	0
 806 01a7 08       		.uleb128 0x8
 807 01a8 FA000000 		.4byte	.LVL42
 808 01ac 2B080000 		.4byte	0x82b
 809 01b0 09       		.uleb128 0x9
 810 01b1 01       		.uleb128 0x1
 811 01b2 50       		.byte	0x50
 812 01b3 02       		.uleb128 0x2
 813 01b4 76       		.byte	0x76
 814 01b5 00       		.sleb128 0
 815 01b6 00       		.byte	0
 816 01b7 00       		.byte	0
 817 01b8 08       		.uleb128 0x8
 818 01b9 0A010000 		.4byte	.LVL46
 819 01bd 2B080000 		.4byte	0x82b
 820 01c1 09       		.uleb128 0x9
 821 01c2 01       		.uleb128 0x1
 822 01c3 50       		.byte	0x50
 823 01c4 05       		.uleb128 0x5
 824 01c5 03       		.byte	0x3
 825 01c6 40000000 		.4byte	.LC3
 826 01ca 00       		.byte	0
 827 01cb 00       		.byte	0
 828 01cc 06       		.uleb128 0x6
 829 01cd 0A000000 		.4byte	.LVL2
 830 01d1 36080000 		.4byte	0x836
 831 01d5 06       		.uleb128 0x6
 832 01d6 0E000000 		.4byte	.LVL3
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 31


 833 01da 41080000 		.4byte	0x841
 834 01de 0F       		.uleb128 0xf
 835 01df 14000000 		.4byte	.LVL4
 836 01e3 2B080000 		.4byte	0x82b
 837 01e7 F5010000 		.4byte	0x1f5
 838 01eb 09       		.uleb128 0x9
 839 01ec 01       		.uleb128 0x1
 840 01ed 50       		.byte	0x50
 841 01ee 05       		.uleb128 0x5
 842 01ef 03       		.byte	0x3
 843 01f0 00000000 		.4byte	.LC0
 844 01f4 00       		.byte	0
 845 01f5 06       		.uleb128 0x6
 846 01f6 18000000 		.4byte	.LVL5
 847 01fa 4C080000 		.4byte	0x84c
 848 01fe 06       		.uleb128 0x6
 849 01ff 1C000000 		.4byte	.LVL6
 850 0203 57080000 		.4byte	0x857
 851 0207 0F       		.uleb128 0xf
 852 0208 22000000 		.4byte	.LVL7
 853 020c 62080000 		.4byte	0x862
 854 0210 1A020000 		.4byte	0x21a
 855 0214 09       		.uleb128 0x9
 856 0215 01       		.uleb128 0x1
 857 0216 50       		.byte	0x50
 858 0217 01       		.uleb128 0x1
 859 0218 30       		.byte	0x30
 860 0219 00       		.byte	0
 861 021a 06       		.uleb128 0x6
 862 021b 2A000000 		.4byte	.LVL8
 863 021f 6D080000 		.4byte	0x86d
 864 0223 0F       		.uleb128 0xf
 865 0224 34000000 		.4byte	.LVL9
 866 0228 78080000 		.4byte	0x878
 867 022c 37020000 		.4byte	0x237
 868 0230 09       		.uleb128 0x9
 869 0231 01       		.uleb128 0x1
 870 0232 50       		.byte	0x50
 871 0233 02       		.uleb128 0x2
 872 0234 74       		.byte	0x74
 873 0235 00       		.sleb128 0
 874 0236 00       		.byte	0
 875 0237 0F       		.uleb128 0xf
 876 0238 3A000000 		.4byte	.LVL10
 877 023c 83080000 		.4byte	0x883
 878 0240 4A020000 		.4byte	0x24a
 879 0244 09       		.uleb128 0x9
 880 0245 01       		.uleb128 0x1
 881 0246 50       		.byte	0x50
 882 0247 01       		.uleb128 0x1
 883 0248 31       		.byte	0x31
 884 0249 00       		.byte	0
 885 024a 0F       		.uleb128 0xf
 886 024b 42000000 		.4byte	.LVL11
 887 024f 0A080000 		.4byte	0x80a
 888 0253 5F020000 		.4byte	0x25f
 889 0257 09       		.uleb128 0x9
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 32


 890 0258 01       		.uleb128 0x1
 891 0259 50       		.byte	0x50
 892 025a 03       		.uleb128 0x3
 893 025b 0A       		.byte	0xa
 894 025c F401     		.2byte	0x1f4
 895 025e 00       		.byte	0
 896 025f 0F       		.uleb128 0xf
 897 0260 48000000 		.4byte	.LVL12
 898 0264 83080000 		.4byte	0x883
 899 0268 72020000 		.4byte	0x272
 900 026c 09       		.uleb128 0x9
 901 026d 01       		.uleb128 0x1
 902 026e 50       		.byte	0x50
 903 026f 01       		.uleb128 0x1
 904 0270 32       		.byte	0x32
 905 0271 00       		.byte	0
 906 0272 0F       		.uleb128 0xf
 907 0273 50000000 		.4byte	.LVL13
 908 0277 0A080000 		.4byte	0x80a
 909 027b 87020000 		.4byte	0x287
 910 027f 09       		.uleb128 0x9
 911 0280 01       		.uleb128 0x1
 912 0281 50       		.byte	0x50
 913 0282 03       		.uleb128 0x3
 914 0283 0A       		.byte	0xa
 915 0284 F401     		.2byte	0x1f4
 916 0286 00       		.byte	0
 917 0287 0F       		.uleb128 0xf
 918 0288 56000000 		.4byte	.LVL14
 919 028c 83080000 		.4byte	0x883
 920 0290 9A020000 		.4byte	0x29a
 921 0294 09       		.uleb128 0x9
 922 0295 01       		.uleb128 0x1
 923 0296 50       		.byte	0x50
 924 0297 01       		.uleb128 0x1
 925 0298 33       		.byte	0x33
 926 0299 00       		.byte	0
 927 029a 0F       		.uleb128 0xf
 928 029b 5E000000 		.4byte	.LVL15
 929 029f 0A080000 		.4byte	0x80a
 930 02a3 AF020000 		.4byte	0x2af
 931 02a7 09       		.uleb128 0x9
 932 02a8 01       		.uleb128 0x1
 933 02a9 50       		.byte	0x50
 934 02aa 03       		.uleb128 0x3
 935 02ab 0A       		.byte	0xa
 936 02ac F401     		.2byte	0x1f4
 937 02ae 00       		.byte	0
 938 02af 0F       		.uleb128 0xf
 939 02b0 64000000 		.4byte	.LVL16
 940 02b4 83080000 		.4byte	0x883
 941 02b8 C3020000 		.4byte	0x2c3
 942 02bc 09       		.uleb128 0x9
 943 02bd 01       		.uleb128 0x1
 944 02be 50       		.byte	0x50
 945 02bf 02       		.uleb128 0x2
 946 02c0 74       		.byte	0x74
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 33


 947 02c1 00       		.sleb128 0
 948 02c2 00       		.byte	0
 949 02c3 0F       		.uleb128 0xf
 950 02c4 6C000000 		.4byte	.LVL17
 951 02c8 0A080000 		.4byte	0x80a
 952 02cc D8020000 		.4byte	0x2d8
 953 02d0 09       		.uleb128 0x9
 954 02d1 01       		.uleb128 0x1
 955 02d2 50       		.byte	0x50
 956 02d3 03       		.uleb128 0x3
 957 02d4 0A       		.byte	0xa
 958 02d5 F401     		.2byte	0x1f4
 959 02d7 00       		.byte	0
 960 02d8 06       		.uleb128 0x6
 961 02d9 70000000 		.4byte	.LVL18
 962 02dd 8E080000 		.4byte	0x88e
 963 02e1 06       		.uleb128 0x6
 964 02e2 74000000 		.4byte	.LVL19
 965 02e6 99080000 		.4byte	0x899
 966 02ea 0F       		.uleb128 0xf
 967 02eb 7C000000 		.4byte	.LVL20
 968 02ef A4080000 		.4byte	0x8a4
 969 02f3 FF020000 		.4byte	0x2ff
 970 02f7 09       		.uleb128 0x9
 971 02f8 01       		.uleb128 0x1
 972 02f9 50       		.byte	0x50
 973 02fa 03       		.uleb128 0x3
 974 02fb 0A       		.byte	0xa
 975 02fc E803     		.2byte	0x3e8
 976 02fe 00       		.byte	0
 977 02ff 0F       		.uleb128 0xf
 978 0300 84000000 		.4byte	.LVL21
 979 0304 0A080000 		.4byte	0x80a
 980 0308 14030000 		.4byte	0x314
 981 030c 09       		.uleb128 0x9
 982 030d 01       		.uleb128 0x1
 983 030e 50       		.byte	0x50
 984 030f 03       		.uleb128 0x3
 985 0310 0A       		.byte	0xa
 986 0311 F401     		.2byte	0x1f4
 987 0313 00       		.byte	0
 988 0314 06       		.uleb128 0x6
 989 0315 88000000 		.4byte	.LVL22
 990 0319 AF080000 		.4byte	0x8af
 991 031d 06       		.uleb128 0x6
 992 031e 8C000000 		.4byte	.LVL23
 993 0322 BA080000 		.4byte	0x8ba
 994 0326 0F       		.uleb128 0xf
 995 0327 94000000 		.4byte	.LVL24
 996 032b C5080000 		.4byte	0x8c5
 997 032f 3B030000 		.4byte	0x33b
 998 0333 09       		.uleb128 0x9
 999 0334 01       		.uleb128 0x1
 1000 0335 50       		.byte	0x50
 1001 0336 03       		.uleb128 0x3
 1002 0337 0A       		.byte	0xa
 1003 0338 6004     		.2byte	0x460
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 34


 1004 033a 00       		.byte	0
 1005 033b 0F       		.uleb128 0xf
 1006 033c 9C000000 		.4byte	.LVL25
 1007 0340 0A080000 		.4byte	0x80a
 1008 0344 50030000 		.4byte	0x350
 1009 0348 09       		.uleb128 0x9
 1010 0349 01       		.uleb128 0x1
 1011 034a 50       		.byte	0x50
 1012 034b 03       		.uleb128 0x3
 1013 034c 0A       		.byte	0xa
 1014 034d F401     		.2byte	0x1f4
 1015 034f 00       		.byte	0
 1016 0350 06       		.uleb128 0x6
 1017 0351 A0000000 		.4byte	.LVL26
 1018 0355 D0080000 		.4byte	0x8d0
 1019 0359 06       		.uleb128 0x6
 1020 035a A4000000 		.4byte	.LVL27
 1021 035e DB080000 		.4byte	0x8db
 1022 0362 06       		.uleb128 0x6
 1023 0363 A8000000 		.4byte	.LVL28
 1024 0367 E6080000 		.4byte	0x8e6
 1025 036b 06       		.uleb128 0x6
 1026 036c AC000000 		.4byte	.LVL29
 1027 0370 F1080000 		.4byte	0x8f1
 1028 0374 06       		.uleb128 0x6
 1029 0375 B0000000 		.4byte	.LVL30
 1030 0379 FC080000 		.4byte	0x8fc
 1031 037d 06       		.uleb128 0x6
 1032 037e B4000000 		.4byte	.LVL31
 1033 0382 07090000 		.4byte	0x907
 1034 0386 06       		.uleb128 0x6
 1035 0387 B8000000 		.4byte	.LVL32
 1036 038b 12090000 		.4byte	0x912
 1037 038f 06       		.uleb128 0x6
 1038 0390 BC000000 		.4byte	.LVL33
 1039 0394 1D090000 		.4byte	0x91d
 1040 0398 06       		.uleb128 0x6
 1041 0399 C0000000 		.4byte	.LVL34
 1042 039d 28090000 		.4byte	0x928
 1043 03a1 0F       		.uleb128 0xf
 1044 03a2 C6000000 		.4byte	.LVL35
 1045 03a6 33090000 		.4byte	0x933
 1046 03aa B8030000 		.4byte	0x3b8
 1047 03ae 09       		.uleb128 0x9
 1048 03af 01       		.uleb128 0x1
 1049 03b0 50       		.byte	0x50
 1050 03b1 05       		.uleb128 0x5
 1051 03b2 03       		.byte	0x3
 1052 03b3 00000000 		.4byte	TIH
 1053 03b7 00       		.byte	0
 1054 03b8 0F       		.uleb128 0xf
 1055 03b9 CC000000 		.4byte	.LVL36
 1056 03bd 3E090000 		.4byte	0x93e
 1057 03c1 CF030000 		.4byte	0x3cf
 1058 03c5 09       		.uleb128 0x9
 1059 03c6 01       		.uleb128 0x1
 1060 03c7 50       		.byte	0x50
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 35


 1061 03c8 05       		.uleb128 0x5
 1062 03c9 03       		.byte	0x3
 1063 03ca 00000000 		.4byte	StartIH
 1064 03ce 00       		.byte	0
 1065 03cf 0F       		.uleb128 0xf
 1066 03d0 D4000000 		.4byte	.LVL37
 1067 03d4 2B080000 		.4byte	0x82b
 1068 03d8 E6030000 		.4byte	0x3e6
 1069 03dc 09       		.uleb128 0x9
 1070 03dd 01       		.uleb128 0x1
 1071 03de 50       		.byte	0x50
 1072 03df 05       		.uleb128 0x5
 1073 03e0 03       		.byte	0x3
 1074 03e1 18000000 		.4byte	.LC1
 1075 03e5 00       		.byte	0
 1076 03e6 0F       		.uleb128 0xf
 1077 03e7 28010000 		.4byte	.LVL48
 1078 03eb 49090000 		.4byte	0x949
 1079 03ef F9030000 		.4byte	0x3f9
 1080 03f3 09       		.uleb128 0x9
 1081 03f4 01       		.uleb128 0x1
 1082 03f5 50       		.byte	0x50
 1083 03f6 01       		.uleb128 0x1
 1084 03f7 32       		.byte	0x32
 1085 03f8 00       		.byte	0
 1086 03f9 06       		.uleb128 0x6
 1087 03fa 2C010000 		.4byte	.LVL49
 1088 03fe 54090000 		.4byte	0x954
 1089 0402 06       		.uleb128 0x6
 1090 0403 32010000 		.4byte	.LVL50
 1091 0407 49090000 		.4byte	0x949
 1092 040b 0F       		.uleb128 0xf
 1093 040c 42010000 		.4byte	.LVL51
 1094 0410 5F090000 		.4byte	0x95f
 1095 0414 35040000 		.4byte	0x435
 1096 0418 09       		.uleb128 0x9
 1097 0419 01       		.uleb128 0x1
 1098 041a 50       		.byte	0x50
 1099 041b 02       		.uleb128 0x2
 1100 041c 08       		.byte	0x8
 1101 041d D2       		.byte	0xd2
 1102 041e 09       		.uleb128 0x9
 1103 041f 01       		.uleb128 0x1
 1104 0420 51       		.byte	0x51
 1105 0421 01       		.uleb128 0x1
 1106 0422 30       		.byte	0x30
 1107 0423 09       		.uleb128 0x9
 1108 0424 01       		.uleb128 0x1
 1109 0425 52       		.byte	0x52
 1110 0426 01       		.uleb128 0x1
 1111 0427 31       		.byte	0x31
 1112 0428 09       		.uleb128 0x9
 1113 0429 01       		.uleb128 0x1
 1114 042a 53       		.byte	0x53
 1115 042b 01       		.uleb128 0x1
 1116 042c 30       		.byte	0x30
 1117 042d 09       		.uleb128 0x9
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 36


 1118 042e 02       		.uleb128 0x2
 1119 042f 7D       		.byte	0x7d
 1120 0430 00       		.sleb128 0
 1121 0431 02       		.uleb128 0x2
 1122 0432 08       		.byte	0x8
 1123 0433 AA       		.byte	0xaa
 1124 0434 00       		.byte	0
 1125 0435 0F       		.uleb128 0xf
 1126 0436 64010000 		.4byte	.LVL52
 1127 043a 6A090000 		.4byte	0x96a
 1128 043e 4F040000 		.4byte	0x44f
 1129 0442 09       		.uleb128 0x9
 1130 0443 01       		.uleb128 0x1
 1131 0444 50       		.byte	0x50
 1132 0445 02       		.uleb128 0x2
 1133 0446 08       		.byte	0x8
 1134 0447 5A       		.byte	0x5a
 1135 0448 09       		.uleb128 0x9
 1136 0449 01       		.uleb128 0x1
 1137 044a 51       		.byte	0x51
 1138 044b 02       		.uleb128 0x2
 1139 044c 08       		.byte	0x8
 1140 044d AA       		.byte	0xaa
 1141 044e 00       		.byte	0
 1142 044f 06       		.uleb128 0x6
 1143 0450 68010000 		.4byte	.LVL53
 1144 0454 75090000 		.4byte	0x975
 1145 0458 0F       		.uleb128 0xf
 1146 0459 7A010000 		.4byte	.LVL54
 1147 045d 5F090000 		.4byte	0x95f
 1148 0461 83040000 		.4byte	0x483
 1149 0465 09       		.uleb128 0x9
 1150 0466 01       		.uleb128 0x1
 1151 0467 50       		.byte	0x50
 1152 0468 03       		.uleb128 0x3
 1153 0469 0A       		.byte	0xa
 1154 046a 2602     		.2byte	0x226
 1155 046c 09       		.uleb128 0x9
 1156 046d 01       		.uleb128 0x1
 1157 046e 51       		.byte	0x51
 1158 046f 01       		.uleb128 0x1
 1159 0470 30       		.byte	0x30
 1160 0471 09       		.uleb128 0x9
 1161 0472 01       		.uleb128 0x1
 1162 0473 52       		.byte	0x52
 1163 0474 01       		.uleb128 0x1
 1164 0475 31       		.byte	0x31
 1165 0476 09       		.uleb128 0x9
 1166 0477 01       		.uleb128 0x1
 1167 0478 53       		.byte	0x53
 1168 0479 01       		.uleb128 0x1
 1169 047a 31       		.byte	0x31
 1170 047b 09       		.uleb128 0x9
 1171 047c 02       		.uleb128 0x2
 1172 047d 7D       		.byte	0x7d
 1173 047e 00       		.sleb128 0
 1174 047f 02       		.uleb128 0x2
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 37


 1175 0480 74       		.byte	0x74
 1176 0481 00       		.sleb128 0
 1177 0482 00       		.byte	0
 1178 0483 0F       		.uleb128 0xf
 1179 0484 82010000 		.4byte	.LVL55
 1180 0488 6A090000 		.4byte	0x96a
 1181 048c 9D040000 		.4byte	0x49d
 1182 0490 09       		.uleb128 0x9
 1183 0491 01       		.uleb128 0x1
 1184 0492 50       		.byte	0x50
 1185 0493 02       		.uleb128 0x2
 1186 0494 08       		.byte	0x8
 1187 0495 5A       		.byte	0x5a
 1188 0496 09       		.uleb128 0x9
 1189 0497 01       		.uleb128 0x1
 1190 0498 51       		.byte	0x51
 1191 0499 02       		.uleb128 0x2
 1192 049a 74       		.byte	0x74
 1193 049b 00       		.sleb128 0
 1194 049c 00       		.byte	0
 1195 049d 08       		.uleb128 0x8
 1196 049e 90010000 		.4byte	.LVL56
 1197 04a2 5F090000 		.4byte	0x95f
 1198 04a6 09       		.uleb128 0x9
 1199 04a7 01       		.uleb128 0x1
 1200 04a8 50       		.byte	0x50
 1201 04a9 02       		.uleb128 0x2
 1202 04aa 08       		.byte	0x8
 1203 04ab 28       		.byte	0x28
 1204 04ac 09       		.uleb128 0x9
 1205 04ad 01       		.uleb128 0x1
 1206 04ae 51       		.byte	0x51
 1207 04af 01       		.uleb128 0x1
 1208 04b0 30       		.byte	0x30
 1209 04b1 09       		.uleb128 0x9
 1210 04b2 01       		.uleb128 0x1
 1211 04b3 52       		.byte	0x52
 1212 04b4 01       		.uleb128 0x1
 1213 04b5 30       		.byte	0x30
 1214 04b6 09       		.uleb128 0x9
 1215 04b7 01       		.uleb128 0x1
 1216 04b8 53       		.byte	0x53
 1217 04b9 01       		.uleb128 0x1
 1218 04ba 34       		.byte	0x34
 1219 04bb 09       		.uleb128 0x9
 1220 04bc 02       		.uleb128 0x2
 1221 04bd 7D       		.byte	0x7d
 1222 04be 00       		.sleb128 0
 1223 04bf 02       		.uleb128 0x2
 1224 04c0 74       		.byte	0x74
 1225 04c1 00       		.sleb128 0
 1226 04c2 00       		.byte	0
 1227 04c3 00       		.byte	0
 1228 04c4 10       		.uleb128 0x10
 1229 04c5 A7060000 		.4byte	.LASF21
 1230 04c9 04       		.byte	0x4
 1231 04ca 1207     		.2byte	0x712
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 38


 1232 04cc D0040000 		.4byte	0x4d0
 1233 04d0 11       		.uleb128 0x11
 1234 04d1 76000000 		.4byte	0x76
 1235 04d5 12       		.uleb128 0x12
 1236 04d6 9B010000 		.4byte	.LASF22
 1237 04da 05       		.byte	0x5
 1238 04db 1E       		.byte	0x1e
 1239 04dc 68000000 		.4byte	0x68
 1240 04e0 05       		.uleb128 0x5
 1241 04e1 03       		.byte	0x3
 1242 04e2 00000000 		.4byte	driveStraightEnable
 1243 04e6 12       		.uleb128 0x12
 1244 04e7 FD020000 		.4byte	.LASF23
 1245 04eb 01       		.byte	0x1
 1246 04ec 2C       		.byte	0x2c
 1247 04ed 68000000 		.4byte	0x68
 1248 04f1 05       		.uleb128 0x5
 1249 04f2 03       		.byte	0x3
 1250 04f3 00000000 		.4byte	currentPuckRackScanningIndex
 1251 04f7 13       		.uleb128 0x13
 1252 04f8 68000000 		.4byte	0x68
 1253 04fc 07050000 		.4byte	0x507
 1254 0500 14       		.uleb128 0x14
 1255 0501 9D000000 		.4byte	0x9d
 1256 0505 04       		.byte	0x4
 1257 0506 00       		.byte	0
 1258 0507 12       		.uleb128 0x12
 1259 0508 D7000000 		.4byte	.LASF24
 1260 050c 01       		.byte	0x1
 1261 050d 2A       		.byte	0x2a
 1262 050e F7040000 		.4byte	0x4f7
 1263 0512 05       		.uleb128 0x5
 1264 0513 03       		.byte	0x3
 1265 0514 00000000 		.4byte	puckRackColours
 1266 0518 12       		.uleb128 0x12
 1267 0519 E7000000 		.4byte	.LASF25
 1268 051d 01       		.byte	0x1
 1269 051e 2D       		.byte	0x2d
 1270 051f F7040000 		.4byte	0x4f7
 1271 0523 05       		.uleb128 0x5
 1272 0524 03       		.byte	0x3
 1273 0525 00000000 		.4byte	puckRackOffsetsFromWest
 1274 0529 12       		.uleb128 0x12
 1275 052a 92010000 		.4byte	.LASF26
 1276 052e 01       		.byte	0x1
 1277 052f 25       		.byte	0x25
 1278 0530 68000000 		.4byte	0x68
 1279 0534 05       		.uleb128 0x5
 1280 0535 03       		.byte	0x3
 1281 0536 00000000 		.4byte	sweeping
 1282 053a 13       		.uleb128 0x13
 1283 053b 81000000 		.4byte	0x81
 1284 053f 4A050000 		.4byte	0x54a
 1285 0543 14       		.uleb128 0x14
 1286 0544 9D000000 		.4byte	0x9d
 1287 0548 03       		.byte	0x3
 1288 0549 00       		.byte	0
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 39


 1289 054a 12       		.uleb128 0x12
 1290 054b 35040000 		.4byte	.LASF27
 1291 054f 01       		.byte	0x1
 1292 0550 26       		.byte	0x26
 1293 0551 3A050000 		.4byte	0x53a
 1294 0555 05       		.uleb128 0x5
 1295 0556 03       		.byte	0x3
 1296 0557 00000000 		.4byte	block_edge_location
 1297 055b 12       		.uleb128 0x12
 1298 055c D8020000 		.4byte	.LASF28
 1299 0560 06       		.byte	0x6
 1300 0561 86       		.byte	0x86
 1301 0562 81000000 		.4byte	0x81
 1302 0566 05       		.uleb128 0x5
 1303 0567 03       		.byte	0x3
 1304 0568 00000000 		.4byte	puckPileLocation
 1305 056c 12       		.uleb128 0x12
 1306 056d 87000000 		.4byte	.LASF29
 1307 0571 01       		.byte	0x1
 1308 0572 4F       		.byte	0x4f
 1309 0573 33000000 		.4byte	0x33
 1310 0577 05       		.uleb128 0x5
 1311 0578 03       		.byte	0x3
 1312 0579 00000000 		.4byte	drivingForwardFlag
 1313 057d 12       		.uleb128 0x12
 1314 057e E9020000 		.4byte	.LASF30
 1315 0582 01       		.byte	0x1
 1316 0583 50       		.byte	0x50
 1317 0584 33000000 		.4byte	0x33
 1318 0588 05       		.uleb128 0x5
 1319 0589 03       		.byte	0x3
 1320 058a 00000000 		.4byte	drivingBackwardFlag
 1321 058e 12       		.uleb128 0x12
 1322 058f 40000000 		.4byte	.LASF31
 1323 0593 01       		.byte	0x1
 1324 0594 51       		.byte	0x51
 1325 0595 33000000 		.4byte	0x33
 1326 0599 05       		.uleb128 0x5
 1327 059a 03       		.byte	0x3
 1328 059b 00000000 		.4byte	turningLeftFlag
 1329 059f 12       		.uleb128 0x12
 1330 05a0 11020000 		.4byte	.LASF32
 1331 05a4 01       		.byte	0x1
 1332 05a5 52       		.byte	0x52
 1333 05a6 33000000 		.4byte	0x33
 1334 05aa 05       		.uleb128 0x5
 1335 05ab 03       		.byte	0x3
 1336 05ac 00000000 		.4byte	turningRightFlag
 1337 05b0 12       		.uleb128 0x12
 1338 05b1 6B070000 		.4byte	.LASF33
 1339 05b5 05       		.byte	0x5
 1340 05b6 2C       		.byte	0x2c
 1341 05b7 68000000 		.4byte	0x68
 1342 05bb 05       		.uleb128 0x5
 1343 05bc 03       		.byte	0x3
 1344 05bd 00000000 		.4byte	initialisation
 1345 05c1 13       		.uleb128 0x13
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 40


 1346 05c2 8F000000 		.4byte	0x8f
 1347 05c6 D1050000 		.4byte	0x5d1
 1348 05ca 14       		.uleb128 0x14
 1349 05cb 9D000000 		.4byte	0x9d
 1350 05cf 1F       		.byte	0x1f
 1351 05d0 00       		.byte	0
 1352 05d1 12       		.uleb128 0x12
 1353 05d2 68060000 		.4byte	.LASF34
 1354 05d6 01       		.byte	0x1
 1355 05d7 20       		.byte	0x20
 1356 05d8 C1050000 		.4byte	0x5c1
 1357 05dc 05       		.uleb128 0x5
 1358 05dd 03       		.byte	0x3
 1359 05de 00000000 		.4byte	output
 1360 05e2 15       		.uleb128 0x15
 1361 05e3 26010000 		.4byte	.LASF35
 1362 05e7 06       		.byte	0x6
 1363 05e8 A4       		.byte	0xa4
 1364 05e9 F7040000 		.4byte	0x4f7
 1365 05ed 12       		.uleb128 0x12
 1366 05ee 57030000 		.4byte	.LASF36
 1367 05f2 01       		.byte	0x1
 1368 05f3 5E       		.byte	0x5e
 1369 05f4 68000000 		.4byte	0x68
 1370 05f8 05       		.uleb128 0x5
 1371 05f9 03       		.byte	0x3
 1372 05fa 00000000 		.4byte	colour_flag
 1373 05fe 12       		.uleb128 0x12
 1374 05ff 36030000 		.4byte	.LASF37
 1375 0603 01       		.byte	0x1
 1376 0604 23       		.byte	0x23
 1377 0605 68000000 		.4byte	0x68
 1378 0609 05       		.uleb128 0x5
 1379 060a 03       		.byte	0x3
 1380 060b 00000000 		.4byte	state
 1381 060f 12       		.uleb128 0x12
 1382 0610 65050000 		.4byte	.LASF38
 1383 0614 01       		.byte	0x1
 1384 0615 64       		.byte	0x64
 1385 0616 68000000 		.4byte	0x68
 1386 061a 05       		.uleb128 0x5
 1387 061b 03       		.byte	0x3
 1388 061c 00000000 		.4byte	moving
 1389 0620 12       		.uleb128 0x12
 1390 0621 3E010000 		.4byte	.LASF39
 1391 0625 05       		.byte	0x5
 1392 0626 2E       		.byte	0x2e
 1393 0627 68000000 		.4byte	0x68
 1394 062b 05       		.uleb128 0x5
 1395 062c 03       		.byte	0x3
 1396 062d 00000000 		.4byte	ultrasonic_flag
 1397 0631 12       		.uleb128 0x12
 1398 0632 A6040000 		.4byte	.LASF40
 1399 0636 01       		.byte	0x1
 1400 0637 45       		.byte	0x45
 1401 0638 68000000 		.4byte	0x68
 1402 063c 05       		.uleb128 0x5
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 41


 1403 063d 03       		.byte	0x3
 1404 063e 00000000 		.4byte	currentOrientation
 1405 0642 13       		.uleb128 0x13
 1406 0643 68000000 		.4byte	0x68
 1407 0647 52060000 		.4byte	0x652
 1408 064b 14       		.uleb128 0x14
 1409 064c 9D000000 		.4byte	0x9d
 1410 0650 02       		.byte	0x2
 1411 0651 00       		.byte	0
 1412 0652 12       		.uleb128 0x12
 1413 0653 FB050000 		.4byte	.LASF41
 1414 0657 01       		.byte	0x1
 1415 0658 2B       		.byte	0x2b
 1416 0659 42060000 		.4byte	0x642
 1417 065d 05       		.uleb128 0x5
 1418 065e 03       		.byte	0x3
 1419 065f 00000000 		.4byte	puckConstructionPlan
 1420 0663 12       		.uleb128 0x12
 1421 0664 CC040000 		.4byte	.LASF42
 1422 0668 01       		.byte	0x1
 1423 0669 68       		.byte	0x68
 1424 066a 68000000 		.4byte	0x68
 1425 066e 05       		.uleb128 0x5
 1426 066f 03       		.byte	0x3
 1427 0670 00000000 		.4byte	current_stage
 1428 0674 12       		.uleb128 0x12
 1429 0675 4C050000 		.4byte	.LASF43
 1430 0679 01       		.byte	0x1
 1431 067a 5F       		.byte	0x5f
 1432 067b 68000000 		.4byte	0x68
 1433 067f 05       		.uleb128 0x5
 1434 0680 03       		.byte	0x3
 1435 0681 00000000 		.4byte	colour_sensing_algorithm
 1436 0685 12       		.uleb128 0x12
 1437 0686 C4010000 		.4byte	.LASF44
 1438 068a 01       		.byte	0x1
 1439 068b 24       		.byte	0x24
 1440 068c 68000000 		.4byte	0x68
 1441 0690 05       		.uleb128 0x5
 1442 0691 03       		.byte	0x3
 1443 0692 00000000 		.4byte	running
 1444 0696 12       		.uleb128 0x12
 1445 0697 AF010000 		.4byte	.LASF45
 1446 069b 01       		.byte	0x1
 1447 069c 29       		.byte	0x29
 1448 069d 68000000 		.4byte	0x68
 1449 06a1 05       		.uleb128 0x5
 1450 06a2 03       		.byte	0x3
 1451 06a3 00000000 		.4byte	currentPuckStackSize
 1452 06a7 12       		.uleb128 0x12
 1453 06a8 39050000 		.4byte	.LASF46
 1454 06ac 01       		.byte	0x1
 1455 06ad 33       		.byte	0x33
 1456 06ae 81000000 		.4byte	0x81
 1457 06b2 05       		.uleb128 0x5
 1458 06b3 03       		.byte	0x3
 1459 06b4 00000000 		.4byte	horizontalPuckGrid
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 42


 1460 06b8 12       		.uleb128 0x12
 1461 06b9 C7000000 		.4byte	.LASF47
 1462 06bd 01       		.byte	0x1
 1463 06be 37       		.byte	0x37
 1464 06bf 68000000 		.4byte	0x68
 1465 06c3 05       		.uleb128 0x5
 1466 06c4 03       		.byte	0x3
 1467 06c5 00000000 		.4byte	beginNavigation
 1468 06c9 12       		.uleb128 0x12
 1469 06ca 4A070000 		.4byte	.LASF48
 1470 06ce 01       		.byte	0x1
 1471 06cf 39       		.byte	0x39
 1472 06d0 68000000 		.4byte	0x68
 1473 06d4 05       		.uleb128 0x5
 1474 06d5 03       		.byte	0x3
 1475 06d6 00000000 		.4byte	pathToPucks
 1476 06da 12       		.uleb128 0x12
 1477 06db 8A050000 		.4byte	.LASF49
 1478 06df 01       		.byte	0x1
 1479 06e0 3A       		.byte	0x3a
 1480 06e1 68000000 		.4byte	0x68
 1481 06e5 05       		.uleb128 0x5
 1482 06e6 03       		.byte	0x3
 1483 06e7 00000000 		.4byte	pathPastBlock
 1484 06eb 12       		.uleb128 0x12
 1485 06ec C5020000 		.4byte	.LASF50
 1486 06f0 01       		.byte	0x1
 1487 06f1 3E       		.byte	0x3e
 1488 06f2 33000000 		.4byte	0x33
 1489 06f6 05       		.uleb128 0x5
 1490 06f7 03       		.byte	0x3
 1491 06f8 00000000 		.4byte	blockEastClearance
 1492 06fc 12       		.uleb128 0x12
 1493 06fd 32060000 		.4byte	.LASF51
 1494 0701 01       		.byte	0x1
 1495 0702 3F       		.byte	0x3f
 1496 0703 33000000 		.4byte	0x33
 1497 0707 05       		.uleb128 0x5
 1498 0708 03       		.byte	0x3
 1499 0709 00000000 		.4byte	blockWestClearance
 1500 070d 12       		.uleb128 0x12
 1501 070e 22020000 		.4byte	.LASF52
 1502 0712 01       		.byte	0x1
 1503 0713 40       		.byte	0x40
 1504 0714 33000000 		.4byte	0x33
 1505 0718 05       		.uleb128 0x5
 1506 0719 03       		.byte	0x3
 1507 071a 00000000 		.4byte	puckEastClearance
 1508 071e 12       		.uleb128 0x12
 1509 071f E4010000 		.4byte	.LASF53
 1510 0723 01       		.byte	0x1
 1511 0724 41       		.byte	0x41
 1512 0725 33000000 		.4byte	0x33
 1513 0729 05       		.uleb128 0x5
 1514 072a 03       		.byte	0x3
 1515 072b 00000000 		.4byte	puckWestClearance
 1516 072f 13       		.uleb128 0x13
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 43


 1517 0730 81000000 		.4byte	0x81
 1518 0734 3F070000 		.4byte	0x73f
 1519 0738 14       		.uleb128 0x14
 1520 0739 9D000000 		.4byte	0x9d
 1521 073d 01       		.byte	0x1
 1522 073e 00       		.byte	0
 1523 073f 12       		.uleb128 0x12
 1524 0740 69000000 		.4byte	.LASF54
 1525 0744 01       		.byte	0x1
 1526 0745 43       		.byte	0x43
 1527 0746 2F070000 		.4byte	0x72f
 1528 074a 05       		.uleb128 0x5
 1529 074b 03       		.byte	0x3
 1530 074c 00000000 		.4byte	currentPosition
 1531 0750 12       		.uleb128 0x12
 1532 0751 7A050000 		.4byte	.LASF55
 1533 0755 01       		.byte	0x1
 1534 0756 44       		.byte	0x44
 1535 0757 2F070000 		.4byte	0x72f
 1536 075b 05       		.uleb128 0x5
 1537 075c 03       		.byte	0x3
 1538 075d 00000000 		.4byte	desiredPosition
 1539 0761 12       		.uleb128 0x12
 1540 0762 FF000000 		.4byte	.LASF56
 1541 0766 01       		.byte	0x1
 1542 0767 46       		.byte	0x46
 1543 0768 68000000 		.4byte	0x68
 1544 076c 05       		.uleb128 0x5
 1545 076d 03       		.byte	0x3
 1546 076e 00000000 		.4byte	desiredOrientation
 1547 0772 12       		.uleb128 0x12
 1548 0773 2D040000 		.4byte	.LASF57
 1549 0777 01       		.byte	0x1
 1550 0778 48       		.byte	0x48
 1551 0779 33000000 		.4byte	0x33
 1552 077d 05       		.uleb128 0x5
 1553 077e 03       		.byte	0x3
 1554 077f 00000000 		.4byte	moveNow
 1555 0783 12       		.uleb128 0x12
 1556 0784 45060000 		.4byte	.LASF58
 1557 0788 01       		.byte	0x1
 1558 0789 55       		.byte	0x55
 1559 078a 33000000 		.4byte	0x33
 1560 078e 05       		.uleb128 0x5
 1561 078f 03       		.byte	0x3
 1562 0790 00000000 		.4byte	moveLeftAllowed
 1563 0794 12       		.uleb128 0x12
 1564 0795 7D060000 		.4byte	.LASF59
 1565 0799 01       		.byte	0x1
 1566 079a 56       		.byte	0x56
 1567 079b 33000000 		.4byte	0x33
 1568 079f 05       		.uleb128 0x5
 1569 07a0 03       		.byte	0x3
 1570 07a1 00000000 		.4byte	moveRightAllowed
 1571 07a5 12       		.uleb128 0x12
 1572 07a6 B9040000 		.4byte	.LASF60
 1573 07aa 01       		.byte	0x1
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 44


 1574 07ab 57       		.byte	0x57
 1575 07ac 33000000 		.4byte	0x33
 1576 07b0 05       		.uleb128 0x5
 1577 07b1 03       		.byte	0x3
 1578 07b2 00000000 		.4byte	moveForwardAllowed
 1579 07b6 12       		.uleb128 0x12
 1580 07b7 63010000 		.4byte	.LASF61
 1581 07bb 01       		.byte	0x1
 1582 07bc 58       		.byte	0x58
 1583 07bd 33000000 		.4byte	0x33
 1584 07c1 05       		.uleb128 0x5
 1585 07c2 03       		.byte	0x3
 1586 07c3 00000000 		.4byte	moveBackwardAllowed
 1587 07c7 12       		.uleb128 0x12
 1588 07c8 8D040000 		.4byte	.LASF62
 1589 07cc 01       		.byte	0x1
 1590 07cd 5D       		.byte	0x5d
 1591 07ce 68000000 		.4byte	0x68
 1592 07d2 05       		.uleb128 0x5
 1593 07d3 03       		.byte	0x3
 1594 07d4 00000000 		.4byte	idac_value
 1595 07d8 12       		.uleb128 0x12
 1596 07d9 26050000 		.4byte	.LASF63
 1597 07dd 01       		.byte	0x1
 1598 07de 66       		.byte	0x66
 1599 07df E9070000 		.4byte	0x7e9
 1600 07e3 05       		.uleb128 0x5
 1601 07e4 03       		.byte	0x3
 1602 07e5 00000000 		.4byte	PLAN_SCAN_VERTICAL
 1603 07e9 16       		.uleb128 0x16
 1604 07ea 68000000 		.4byte	0x68
 1605 07ee 12       		.uleb128 0x12
 1606 07ef 8E060000 		.4byte	.LASF64
 1607 07f3 01       		.byte	0x1
 1608 07f4 6C       		.byte	0x6c
 1609 07f5 68000000 		.4byte	0x68
 1610 07f9 05       		.uleb128 0x5
 1611 07fa 03       		.byte	0x3
 1612 07fb 00000000 		.4byte	distance_returned_global
 1613 07ff 17       		.uleb128 0x17
 1614 0800 F6010000 		.4byte	.LASF65
 1615 0804 F6010000 		.4byte	.LASF65
 1616 0808 05       		.byte	0x5
 1617 0809 19       		.byte	0x19
 1618 080a 17       		.uleb128 0x17
 1619 080b 42070000 		.4byte	.LASF66
 1620 080f 42070000 		.4byte	.LASF66
 1621 0813 07       		.byte	0x7
 1622 0814 76       		.byte	0x76
 1623 0815 17       		.uleb128 0x17
 1624 0816 05050000 		.4byte	.LASF67
 1625 081a 05050000 		.4byte	.LASF67
 1626 081e 05       		.byte	0x5
 1627 081f 16       		.byte	0x16
 1628 0820 17       		.uleb128 0x17
 1629 0821 93030000 		.4byte	.LASF68
 1630 0825 93030000 		.4byte	.LASF68
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 45


 1631 0829 08       		.byte	0x8
 1632 082a E7       		.byte	0xe7
 1633 082b 17       		.uleb128 0x17
 1634 082c EA050000 		.4byte	.LASF69
 1635 0830 EA050000 		.4byte	.LASF69
 1636 0834 09       		.byte	0x9
 1637 0835 8B       		.byte	0x8b
 1638 0836 17       		.uleb128 0x17
 1639 0837 F9040000 		.4byte	.LASF70
 1640 083b F9040000 		.4byte	.LASF70
 1641 083f 0A       		.byte	0xa
 1642 0840 3D       		.byte	0x3d
 1643 0841 17       		.uleb128 0x17
 1644 0842 3C030000 		.4byte	.LASF71
 1645 0846 3C030000 		.4byte	.LASF71
 1646 084a 09       		.byte	0x9
 1647 084b 54       		.byte	0x54
 1648 084c 17       		.uleb128 0x17
 1649 084d 74020000 		.4byte	.LASF72
 1650 0851 74020000 		.4byte	.LASF72
 1651 0855 0B       		.byte	0xb
 1652 0856 3A       		.byte	0x3a
 1653 0857 17       		.uleb128 0x17
 1654 0858 98040000 		.4byte	.LASF73
 1655 085c 98040000 		.4byte	.LASF73
 1656 0860 0C       		.byte	0xc
 1657 0861 3C       		.byte	0x3c
 1658 0862 17       		.uleb128 0x17
 1659 0863 B3030000 		.4byte	.LASF74
 1660 0867 B3030000 		.4byte	.LASF74
 1661 086b 0C       		.byte	0xc
 1662 086c 40       		.byte	0x40
 1663 086d 17       		.uleb128 0x17
 1664 086e AB050000 		.4byte	.LASF75
 1665 0872 AB050000 		.4byte	.LASF75
 1666 0876 0C       		.byte	0xc
 1667 0877 41       		.byte	0x41
 1668 0878 17       		.uleb128 0x17
 1669 0879 A0020000 		.4byte	.LASF76
 1670 087d A0020000 		.4byte	.LASF76
 1671 0881 0D       		.byte	0xd
 1672 0882 2F       		.byte	0x2f
 1673 0883 17       		.uleb128 0x17
 1674 0884 60040000 		.4byte	.LASF77
 1675 0888 60040000 		.4byte	.LASF77
 1676 088c 0E       		.byte	0xe
 1677 088d 2F       		.byte	0x2f
 1678 088e 17       		.uleb128 0x17
 1679 088f 9B030000 		.4byte	.LASF78
 1680 0893 9B030000 		.4byte	.LASF78
 1681 0897 0F       		.byte	0xf
 1682 0898 19       		.byte	0x19
 1683 0899 17       		.uleb128 0x17
 1684 089a 56070000 		.4byte	.LASF79
 1685 089e 56070000 		.4byte	.LASF79
 1686 08a2 10       		.byte	0x10
 1687 08a3 92       		.byte	0x92
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 46


 1688 08a4 17       		.uleb128 0x17
 1689 08a5 1A030000 		.4byte	.LASF80
 1690 08a9 1A030000 		.4byte	.LASF80
 1691 08ad 10       		.byte	0x10
 1692 08ae C3       		.byte	0xc3
 1693 08af 17       		.uleb128 0x17
 1694 08b0 4E010000 		.4byte	.LASF81
 1695 08b4 4E010000 		.4byte	.LASF81
 1696 08b8 10       		.byte	0x10
 1697 08b9 DC       		.byte	0xdc
 1698 08ba 17       		.uleb128 0x17
 1699 08bb CC010000 		.4byte	.LASF82
 1700 08bf CC010000 		.4byte	.LASF82
 1701 08c3 11       		.byte	0x11
 1702 08c4 92       		.byte	0x92
 1703 08c5 17       		.uleb128 0x17
 1704 08c6 DA040000 		.4byte	.LASF83
 1705 08ca DA040000 		.4byte	.LASF83
 1706 08ce 11       		.byte	0x11
 1707 08cf C3       		.byte	0xc3
 1708 08d0 17       		.uleb128 0x17
 1709 08d1 10060000 		.4byte	.LASF84
 1710 08d5 10060000 		.4byte	.LASF84
 1711 08d9 11       		.byte	0x11
 1712 08da DC       		.byte	0xdc
 1713 08db 17       		.uleb128 0x17
 1714 08dc 7B030000 		.4byte	.LASF85
 1715 08e0 7B030000 		.4byte	.LASF85
 1716 08e4 12       		.byte	0x12
 1717 08e5 92       		.byte	0x92
 1718 08e6 17       		.uleb128 0x17
 1719 08e7 63030000 		.4byte	.LASF86
 1720 08eb 63030000 		.4byte	.LASF86
 1721 08ef 12       		.byte	0x12
 1722 08f0 DC       		.byte	0xdc
 1723 08f1 17       		.uleb128 0x17
 1724 08f2 87020000 		.4byte	.LASF87
 1725 08f6 87020000 		.4byte	.LASF87
 1726 08fa 13       		.byte	0x13
 1727 08fb 92       		.byte	0x92
 1728 08fc 17       		.uleb128 0x17
 1729 08fd 5B020000 		.4byte	.LASF88
 1730 0901 5B020000 		.4byte	.LASF88
 1731 0905 13       		.byte	0x13
 1732 0906 DC       		.byte	0xdc
 1733 0907 17       		.uleb128 0x17
 1734 0908 27000000 		.4byte	.LASF89
 1735 090c 27000000 		.4byte	.LASF89
 1736 0910 14       		.byte	0x14
 1737 0911 48       		.byte	0x48
 1738 0912 17       		.uleb128 0x17
 1739 0913 9A000000 		.4byte	.LASF90
 1740 0917 9A000000 		.4byte	.LASF90
 1741 091b 15       		.byte	0x15
 1742 091c 48       		.byte	0x48
 1743 091d 17       		.uleb128 0x17
 1744 091e 6C050000 		.4byte	.LASF91
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 47


 1745 0922 6C050000 		.4byte	.LASF91
 1746 0926 16       		.byte	0x16
 1747 0927 5A       		.byte	0x5a
 1748 0928 17       		.uleb128 0x17
 1749 0929 77010000 		.4byte	.LASF92
 1750 092d 77010000 		.4byte	.LASF92
 1751 0931 16       		.byte	0x16
 1752 0932 5E       		.byte	0x5e
 1753 0933 17       		.uleb128 0x17
 1754 0934 79000000 		.4byte	.LASF93
 1755 0938 79000000 		.4byte	.LASF93
 1756 093c 17       		.byte	0x17
 1757 093d 18       		.byte	0x18
 1758 093e 17       		.uleb128 0x17
 1759 093f D5050000 		.4byte	.LASF94
 1760 0943 D5050000 		.4byte	.LASF94
 1761 0947 18       		.byte	0x18
 1762 0948 18       		.byte	0x18
 1763 0949 17       		.uleb128 0x17
 1764 094a 3A020000 		.4byte	.LASF95
 1765 094e 3A020000 		.4byte	.LASF95
 1766 0952 19       		.byte	0x19
 1767 0953 0F       		.byte	0xf
 1768 0954 17       		.uleb128 0x17
 1769 0955 00000000 		.4byte	.LASF96
 1770 0959 00000000 		.4byte	.LASF96
 1771 095d 19       		.byte	0x19
 1772 095e 10       		.byte	0x10
 1773 095f 17       		.uleb128 0x17
 1774 0960 55060000 		.4byte	.LASF97
 1775 0964 55060000 		.4byte	.LASF97
 1776 0968 1A       		.byte	0x1a
 1777 0969 11       		.byte	0x11
 1778 096a 17       		.uleb128 0x17
 1779 096b B9020000 		.4byte	.LASF98
 1780 096f B9020000 		.4byte	.LASF98
 1781 0973 1B       		.byte	0x1b
 1782 0974 10       		.byte	0x10
 1783 0975 17       		.uleb128 0x17
 1784 0976 50000000 		.4byte	.LASF99
 1785 097a 50000000 		.4byte	.LASF99
 1786 097e 1A       		.byte	0x1a
 1787 097f 10       		.byte	0x10
 1788 0980 00       		.byte	0
 1789              		.section	.debug_abbrev,"",%progbits
 1790              	.Ldebug_abbrev0:
 1791 0000 01       		.uleb128 0x1
 1792 0001 11       		.uleb128 0x11
 1793 0002 01       		.byte	0x1
 1794 0003 25       		.uleb128 0x25
 1795 0004 0E       		.uleb128 0xe
 1796 0005 13       		.uleb128 0x13
 1797 0006 0B       		.uleb128 0xb
 1798 0007 03       		.uleb128 0x3
 1799 0008 0E       		.uleb128 0xe
 1800 0009 1B       		.uleb128 0x1b
 1801 000a 0E       		.uleb128 0xe
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 48


 1802 000b 55       		.uleb128 0x55
 1803 000c 17       		.uleb128 0x17
 1804 000d 11       		.uleb128 0x11
 1805 000e 01       		.uleb128 0x1
 1806 000f 10       		.uleb128 0x10
 1807 0010 17       		.uleb128 0x17
 1808 0011 00       		.byte	0
 1809 0012 00       		.byte	0
 1810 0013 02       		.uleb128 0x2
 1811 0014 24       		.uleb128 0x24
 1812 0015 00       		.byte	0
 1813 0016 0B       		.uleb128 0xb
 1814 0017 0B       		.uleb128 0xb
 1815 0018 3E       		.uleb128 0x3e
 1816 0019 0B       		.uleb128 0xb
 1817 001a 03       		.uleb128 0x3
 1818 001b 0E       		.uleb128 0xe
 1819 001c 00       		.byte	0
 1820 001d 00       		.byte	0
 1821 001e 03       		.uleb128 0x3
 1822 001f 16       		.uleb128 0x16
 1823 0020 00       		.byte	0
 1824 0021 03       		.uleb128 0x3
 1825 0022 0E       		.uleb128 0xe
 1826 0023 3A       		.uleb128 0x3a
 1827 0024 0B       		.uleb128 0xb
 1828 0025 3B       		.uleb128 0x3b
 1829 0026 0B       		.uleb128 0xb
 1830 0027 49       		.uleb128 0x49
 1831 0028 13       		.uleb128 0x13
 1832 0029 00       		.byte	0
 1833 002a 00       		.byte	0
 1834 002b 04       		.uleb128 0x4
 1835 002c 24       		.uleb128 0x24
 1836 002d 00       		.byte	0
 1837 002e 0B       		.uleb128 0xb
 1838 002f 0B       		.uleb128 0xb
 1839 0030 3E       		.uleb128 0x3e
 1840 0031 0B       		.uleb128 0xb
 1841 0032 03       		.uleb128 0x3
 1842 0033 08       		.uleb128 0x8
 1843 0034 00       		.byte	0
 1844 0035 00       		.byte	0
 1845 0036 05       		.uleb128 0x5
 1846 0037 2E       		.uleb128 0x2e
 1847 0038 01       		.byte	0x1
 1848 0039 3F       		.uleb128 0x3f
 1849 003a 19       		.uleb128 0x19
 1850 003b 03       		.uleb128 0x3
 1851 003c 08       		.uleb128 0x8
 1852 003d 3A       		.uleb128 0x3a
 1853 003e 0B       		.uleb128 0xb
 1854 003f 3B       		.uleb128 0x3b
 1855 0040 0B       		.uleb128 0xb
 1856 0041 27       		.uleb128 0x27
 1857 0042 19       		.uleb128 0x19
 1858 0043 11       		.uleb128 0x11
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 49


 1859 0044 01       		.uleb128 0x1
 1860 0045 12       		.uleb128 0x12
 1861 0046 06       		.uleb128 0x6
 1862 0047 40       		.uleb128 0x40
 1863 0048 18       		.uleb128 0x18
 1864 0049 9742     		.uleb128 0x2117
 1865 004b 19       		.uleb128 0x19
 1866 004c 01       		.uleb128 0x1
 1867 004d 13       		.uleb128 0x13
 1868 004e 00       		.byte	0
 1869 004f 00       		.byte	0
 1870 0050 06       		.uleb128 0x6
 1871 0051 898201   		.uleb128 0x4109
 1872 0054 00       		.byte	0
 1873 0055 11       		.uleb128 0x11
 1874 0056 01       		.uleb128 0x1
 1875 0057 31       		.uleb128 0x31
 1876 0058 13       		.uleb128 0x13
 1877 0059 00       		.byte	0
 1878 005a 00       		.byte	0
 1879 005b 07       		.uleb128 0x7
 1880 005c 2E       		.uleb128 0x2e
 1881 005d 01       		.byte	0x1
 1882 005e 3F       		.uleb128 0x3f
 1883 005f 19       		.uleb128 0x19
 1884 0060 03       		.uleb128 0x3
 1885 0061 0E       		.uleb128 0xe
 1886 0062 3A       		.uleb128 0x3a
 1887 0063 0B       		.uleb128 0xb
 1888 0064 3B       		.uleb128 0x3b
 1889 0065 0B       		.uleb128 0xb
 1890 0066 27       		.uleb128 0x27
 1891 0067 19       		.uleb128 0x19
 1892 0068 11       		.uleb128 0x11
 1893 0069 01       		.uleb128 0x1
 1894 006a 12       		.uleb128 0x12
 1895 006b 06       		.uleb128 0x6
 1896 006c 40       		.uleb128 0x40
 1897 006d 18       		.uleb128 0x18
 1898 006e 9742     		.uleb128 0x2117
 1899 0070 19       		.uleb128 0x19
 1900 0071 01       		.uleb128 0x1
 1901 0072 13       		.uleb128 0x13
 1902 0073 00       		.byte	0
 1903 0074 00       		.byte	0
 1904 0075 08       		.uleb128 0x8
 1905 0076 898201   		.uleb128 0x4109
 1906 0079 01       		.byte	0x1
 1907 007a 11       		.uleb128 0x11
 1908 007b 01       		.uleb128 0x1
 1909 007c 31       		.uleb128 0x31
 1910 007d 13       		.uleb128 0x13
 1911 007e 00       		.byte	0
 1912 007f 00       		.byte	0
 1913 0080 09       		.uleb128 0x9
 1914 0081 8A8201   		.uleb128 0x410a
 1915 0084 00       		.byte	0
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 50


 1916 0085 02       		.uleb128 0x2
 1917 0086 18       		.uleb128 0x18
 1918 0087 9142     		.uleb128 0x2111
 1919 0089 18       		.uleb128 0x18
 1920 008a 00       		.byte	0
 1921 008b 00       		.byte	0
 1922 008c 0A       		.uleb128 0xa
 1923 008d 2E       		.uleb128 0x2e
 1924 008e 01       		.byte	0x1
 1925 008f 3F       		.uleb128 0x3f
 1926 0090 19       		.uleb128 0x19
 1927 0091 03       		.uleb128 0x3
 1928 0092 0E       		.uleb128 0xe
 1929 0093 3A       		.uleb128 0x3a
 1930 0094 0B       		.uleb128 0xb
 1931 0095 3B       		.uleb128 0x3b
 1932 0096 0B       		.uleb128 0xb
 1933 0097 27       		.uleb128 0x27
 1934 0098 19       		.uleb128 0x19
 1935 0099 49       		.uleb128 0x49
 1936 009a 13       		.uleb128 0x13
 1937 009b 8701     		.uleb128 0x87
 1938 009d 19       		.uleb128 0x19
 1939 009e 11       		.uleb128 0x11
 1940 009f 01       		.uleb128 0x1
 1941 00a0 12       		.uleb128 0x12
 1942 00a1 06       		.uleb128 0x6
 1943 00a2 40       		.uleb128 0x40
 1944 00a3 18       		.uleb128 0x18
 1945 00a4 9742     		.uleb128 0x2117
 1946 00a6 19       		.uleb128 0x19
 1947 00a7 01       		.uleb128 0x1
 1948 00a8 13       		.uleb128 0x13
 1949 00a9 00       		.byte	0
 1950 00aa 00       		.byte	0
 1951 00ab 0B       		.uleb128 0xb
 1952 00ac 34       		.uleb128 0x34
 1953 00ad 00       		.byte	0
 1954 00ae 03       		.uleb128 0x3
 1955 00af 0E       		.uleb128 0xe
 1956 00b0 3A       		.uleb128 0x3a
 1957 00b1 0B       		.uleb128 0xb
 1958 00b2 3B       		.uleb128 0x3b
 1959 00b3 0B       		.uleb128 0xb
 1960 00b4 49       		.uleb128 0x49
 1961 00b5 13       		.uleb128 0x13
 1962 00b6 1C       		.uleb128 0x1c
 1963 00b7 0B       		.uleb128 0xb
 1964 00b8 00       		.byte	0
 1965 00b9 00       		.byte	0
 1966 00ba 0C       		.uleb128 0xc
 1967 00bb 0B       		.uleb128 0xb
 1968 00bc 01       		.byte	0x1
 1969 00bd 11       		.uleb128 0x11
 1970 00be 01       		.uleb128 0x1
 1971 00bf 12       		.uleb128 0x12
 1972 00c0 06       		.uleb128 0x6
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 51


 1973 00c1 01       		.uleb128 0x1
 1974 00c2 13       		.uleb128 0x13
 1975 00c3 00       		.byte	0
 1976 00c4 00       		.byte	0
 1977 00c5 0D       		.uleb128 0xd
 1978 00c6 34       		.uleb128 0x34
 1979 00c7 00       		.byte	0
 1980 00c8 03       		.uleb128 0x3
 1981 00c9 08       		.uleb128 0x8
 1982 00ca 3A       		.uleb128 0x3a
 1983 00cb 0B       		.uleb128 0xb
 1984 00cc 3B       		.uleb128 0x3b
 1985 00cd 0B       		.uleb128 0xb
 1986 00ce 49       		.uleb128 0x49
 1987 00cf 13       		.uleb128 0x13
 1988 00d0 02       		.uleb128 0x2
 1989 00d1 17       		.uleb128 0x17
 1990 00d2 00       		.byte	0
 1991 00d3 00       		.byte	0
 1992 00d4 0E       		.uleb128 0xe
 1993 00d5 0B       		.uleb128 0xb
 1994 00d6 01       		.byte	0x1
 1995 00d7 55       		.uleb128 0x55
 1996 00d8 17       		.uleb128 0x17
 1997 00d9 01       		.uleb128 0x1
 1998 00da 13       		.uleb128 0x13
 1999 00db 00       		.byte	0
 2000 00dc 00       		.byte	0
 2001 00dd 0F       		.uleb128 0xf
 2002 00de 898201   		.uleb128 0x4109
 2003 00e1 01       		.byte	0x1
 2004 00e2 11       		.uleb128 0x11
 2005 00e3 01       		.uleb128 0x1
 2006 00e4 31       		.uleb128 0x31
 2007 00e5 13       		.uleb128 0x13
 2008 00e6 01       		.uleb128 0x1
 2009 00e7 13       		.uleb128 0x13
 2010 00e8 00       		.byte	0
 2011 00e9 00       		.byte	0
 2012 00ea 10       		.uleb128 0x10
 2013 00eb 34       		.uleb128 0x34
 2014 00ec 00       		.byte	0
 2015 00ed 03       		.uleb128 0x3
 2016 00ee 0E       		.uleb128 0xe
 2017 00ef 3A       		.uleb128 0x3a
 2018 00f0 0B       		.uleb128 0xb
 2019 00f1 3B       		.uleb128 0x3b
 2020 00f2 05       		.uleb128 0x5
 2021 00f3 49       		.uleb128 0x49
 2022 00f4 13       		.uleb128 0x13
 2023 00f5 3F       		.uleb128 0x3f
 2024 00f6 19       		.uleb128 0x19
 2025 00f7 3C       		.uleb128 0x3c
 2026 00f8 19       		.uleb128 0x19
 2027 00f9 00       		.byte	0
 2028 00fa 00       		.byte	0
 2029 00fb 11       		.uleb128 0x11
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 52


 2030 00fc 35       		.uleb128 0x35
 2031 00fd 00       		.byte	0
 2032 00fe 49       		.uleb128 0x49
 2033 00ff 13       		.uleb128 0x13
 2034 0100 00       		.byte	0
 2035 0101 00       		.byte	0
 2036 0102 12       		.uleb128 0x12
 2037 0103 34       		.uleb128 0x34
 2038 0104 00       		.byte	0
 2039 0105 03       		.uleb128 0x3
 2040 0106 0E       		.uleb128 0xe
 2041 0107 3A       		.uleb128 0x3a
 2042 0108 0B       		.uleb128 0xb
 2043 0109 3B       		.uleb128 0x3b
 2044 010a 0B       		.uleb128 0xb
 2045 010b 49       		.uleb128 0x49
 2046 010c 13       		.uleb128 0x13
 2047 010d 3F       		.uleb128 0x3f
 2048 010e 19       		.uleb128 0x19
 2049 010f 02       		.uleb128 0x2
 2050 0110 18       		.uleb128 0x18
 2051 0111 00       		.byte	0
 2052 0112 00       		.byte	0
 2053 0113 13       		.uleb128 0x13
 2054 0114 01       		.uleb128 0x1
 2055 0115 01       		.byte	0x1
 2056 0116 49       		.uleb128 0x49
 2057 0117 13       		.uleb128 0x13
 2058 0118 01       		.uleb128 0x1
 2059 0119 13       		.uleb128 0x13
 2060 011a 00       		.byte	0
 2061 011b 00       		.byte	0
 2062 011c 14       		.uleb128 0x14
 2063 011d 21       		.uleb128 0x21
 2064 011e 00       		.byte	0
 2065 011f 49       		.uleb128 0x49
 2066 0120 13       		.uleb128 0x13
 2067 0121 2F       		.uleb128 0x2f
 2068 0122 0B       		.uleb128 0xb
 2069 0123 00       		.byte	0
 2070 0124 00       		.byte	0
 2071 0125 15       		.uleb128 0x15
 2072 0126 34       		.uleb128 0x34
 2073 0127 00       		.byte	0
 2074 0128 03       		.uleb128 0x3
 2075 0129 0E       		.uleb128 0xe
 2076 012a 3A       		.uleb128 0x3a
 2077 012b 0B       		.uleb128 0xb
 2078 012c 3B       		.uleb128 0x3b
 2079 012d 0B       		.uleb128 0xb
 2080 012e 49       		.uleb128 0x49
 2081 012f 13       		.uleb128 0x13
 2082 0130 3F       		.uleb128 0x3f
 2083 0131 19       		.uleb128 0x19
 2084 0132 3C       		.uleb128 0x3c
 2085 0133 19       		.uleb128 0x19
 2086 0134 00       		.byte	0
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 53


 2087 0135 00       		.byte	0
 2088 0136 16       		.uleb128 0x16
 2089 0137 26       		.uleb128 0x26
 2090 0138 00       		.byte	0
 2091 0139 49       		.uleb128 0x49
 2092 013a 13       		.uleb128 0x13
 2093 013b 00       		.byte	0
 2094 013c 00       		.byte	0
 2095 013d 17       		.uleb128 0x17
 2096 013e 2E       		.uleb128 0x2e
 2097 013f 00       		.byte	0
 2098 0140 3F       		.uleb128 0x3f
 2099 0141 19       		.uleb128 0x19
 2100 0142 3C       		.uleb128 0x3c
 2101 0143 19       		.uleb128 0x19
 2102 0144 6E       		.uleb128 0x6e
 2103 0145 0E       		.uleb128 0xe
 2104 0146 03       		.uleb128 0x3
 2105 0147 0E       		.uleb128 0xe
 2106 0148 3A       		.uleb128 0x3a
 2107 0149 0B       		.uleb128 0xb
 2108 014a 3B       		.uleb128 0x3b
 2109 014b 0B       		.uleb128 0xb
 2110 014c 00       		.byte	0
 2111 014d 00       		.byte	0
 2112 014e 00       		.byte	0
 2113              		.section	.debug_loc,"",%progbits
 2114              	.Ldebug_loc0:
 2115              	.LLST0:
 2116 0000 D4000000 		.4byte	.LVL37
 2117 0004 D8000000 		.4byte	.LVL38
 2118 0008 0200     		.2byte	0x2
 2119 000a 30       		.byte	0x30
 2120 000b 9F       		.byte	0x9f
 2121 000c D8000000 		.4byte	.LVL38
 2122 0010 BC010000 		.4byte	.LFE66
 2123 0014 0100     		.2byte	0x1
 2124 0016 55       		.byte	0x55
 2125 0017 00000000 		.4byte	0
 2126 001b 00000000 		.4byte	0
 2127              	.LLST1:
 2128 001f D8000000 		.4byte	.LVL38
 2129 0023 FE000000 		.4byte	.LVL44
 2130 0027 0100     		.2byte	0x1
 2131 0029 54       		.byte	0x54
 2132 002a 00010000 		.4byte	.LVL45
 2133 002e 0C010000 		.4byte	.LVL47
 2134 0032 0100     		.2byte	0x1
 2135 0034 54       		.byte	0x54
 2136 0035 00000000 		.4byte	0
 2137 0039 00000000 		.4byte	0
 2138              		.section	.debug_aranges,"",%progbits
 2139 0000 2C000000 		.4byte	0x2c
 2140 0004 0200     		.2byte	0x2
 2141 0006 00000000 		.4byte	.Ldebug_info0
 2142 000a 04       		.byte	0x4
 2143 000b 00       		.byte	0
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 54


 2144 000c 0000     		.2byte	0
 2145 000e 0000     		.2byte	0
 2146 0010 00000000 		.4byte	.LFB64
 2147 0014 08000000 		.4byte	.LFE64-.LFB64
 2148 0018 00000000 		.4byte	.LFB65
 2149 001c 20000000 		.4byte	.LFE65-.LFB65
 2150 0020 00000000 		.4byte	.LFB66
 2151 0024 BC010000 		.4byte	.LFE66-.LFB66
 2152 0028 00000000 		.4byte	0
 2153 002c 00000000 		.4byte	0
 2154              		.section	.debug_ranges,"",%progbits
 2155              	.Ldebug_ranges0:
 2156 0000 D8000000 		.4byte	.LBB3
 2157 0004 FE000000 		.4byte	.LBE3
 2158 0008 00010000 		.4byte	.LBB4
 2159 000c 04010000 		.4byte	.LBE4
 2160 0010 00000000 		.4byte	0
 2161 0014 00000000 		.4byte	0
 2162 0018 00000000 		.4byte	.LFB64
 2163 001c 08000000 		.4byte	.LFE64
 2164 0020 00000000 		.4byte	.LFB65
 2165 0024 20000000 		.4byte	.LFE65
 2166 0028 00000000 		.4byte	.LFB66
 2167 002c BC010000 		.4byte	.LFE66
 2168 0030 00000000 		.4byte	0
 2169 0034 00000000 		.4byte	0
 2170              		.section	.debug_line,"",%progbits
 2171              	.Ldebug_line0:
 2172 0000 C1030000 		.section	.debug_str,"MS",%progbits,1
 2172      02001203 
 2172      00000201 
 2172      FB0E0D00 
 2172      01010101 
 2173              	.LASF96:
 2174 0000 61726D4F 		.ascii	"armOpen\000"
 2174      70656E00 
 2175              	.LASF20:
 2176 0008 756C7472 		.ascii	"ultrasonic_testing\000"
 2176      61736F6E 
 2176      69635F74 
 2176      65737469 
 2176      6E6700
 2177              	.LASF0:
 2178 001b 7369676E 		.ascii	"signed char\000"
 2178      65642063 
 2178      68617200 
 2179              	.LASF89:
 2180 0027 4D6F746F 		.ascii	"Motor_Left_Decoder_Start\000"
 2180      725F4C65 
 2180      66745F44 
 2180      65636F64 
 2180      65725F53 
 2181              	.LASF31:
 2182 0040 7475726E 		.ascii	"turningLeftFlag\000"
 2182      696E674C 
 2182      65667446 
 2182      6C616700 
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 55


 2183              	.LASF99:
 2184 0050 73747261 		.ascii	"straightAdjust\000"
 2184      69676874 
 2184      41646A75 
 2184      737400
 2185              	.LASF2:
 2186 005f 73686F72 		.ascii	"short int\000"
 2186      7420696E 
 2186      7400
 2187              	.LASF54:
 2188 0069 63757272 		.ascii	"currentPosition\000"
 2188      656E7450 
 2188      6F736974 
 2188      696F6E00 
 2189              	.LASF93:
 2190 0079 536F6E69 		.ascii	"Sonic_StartEx\000"
 2190      635F5374 
 2190      61727445 
 2190      7800
 2191              	.LASF29:
 2192 0087 64726976 		.ascii	"drivingForwardFlag\000"
 2192      696E6746 
 2192      6F727761 
 2192      7264466C 
 2192      616700
 2193              	.LASF90:
 2194 009a 4D6F746F 		.ascii	"Motor_Right_Decoder_Start\000"
 2194      725F5269 
 2194      6768745F 
 2194      4465636F 
 2194      6465725F 
 2195              	.LASF17:
 2196 00b4 636F6C6F 		.ascii	"colour_calibration\000"
 2196      75725F63 
 2196      616C6962 
 2196      72617469 
 2196      6F6E00
 2197              	.LASF47:
 2198 00c7 62656769 		.ascii	"beginNavigation\000"
 2198      6E4E6176 
 2198      69676174 
 2198      696F6E00 
 2199              	.LASF24:
 2200 00d7 7075636B 		.ascii	"puckRackColours\000"
 2200      5261636B 
 2200      436F6C6F 
 2200      75727300 
 2201              	.LASF25:
 2202 00e7 7075636B 		.ascii	"puckRackOffsetsFromWest\000"
 2202      5261636B 
 2202      4F666673 
 2202      65747346 
 2202      726F6D57 
 2203              	.LASF56:
 2204 00ff 64657369 		.ascii	"desiredOrientation\000"
 2204      7265644F 
 2204      7269656E 
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 56


 2204      74617469 
 2204      6F6E00
 2205              	.LASF14:
 2206 0112 6C6F6E67 		.ascii	"long double\000"
 2206      20646F75 
 2206      626C6500 
 2207              	.LASF16:
 2208 011e 53746172 		.ascii	"StartIH\000"
 2208      74494800 
 2209              	.LASF35:
 2210 0126 756C7472 		.ascii	"ultrasonic_distances_mm\000"
 2210      61736F6E 
 2210      69635F64 
 2210      69737461 
 2210      6E636573 
 2211              	.LASF39:
 2212 013e 756C7472 		.ascii	"ultrasonic_flag\000"
 2212      61736F6E 
 2212      69635F66 
 2212      6C616700 
 2213              	.LASF81:
 2214 014e 5261636B 		.ascii	"Rack_Servo_PWM_Sleep\000"
 2214      5F536572 
 2214      766F5F50 
 2214      574D5F53 
 2214      6C656570 
 2215              	.LASF61:
 2216 0163 6D6F7665 		.ascii	"moveBackwardAllowed\000"
 2216      4261636B 
 2216      77617264 
 2216      416C6C6F 
 2216      77656400 
 2217              	.LASF92:
 2218 0177 54696D65 		.ascii	"Timer_1_ReadStatusRegister\000"
 2218      725F315F 
 2218      52656164 
 2218      53746174 
 2218      75735265 
 2219              	.LASF26:
 2220 0192 73776565 		.ascii	"sweeping\000"
 2220      70696E67 
 2220      00
 2221              	.LASF22:
 2222 019b 64726976 		.ascii	"driveStraightEnable\000"
 2222      65537472 
 2222      61696768 
 2222      74456E61 
 2222      626C6500 
 2223              	.LASF45:
 2224 01af 63757272 		.ascii	"currentPuckStackSize\000"
 2224      656E7450 
 2224      75636B53 
 2224      7461636B 
 2224      53697A65 
 2225              	.LASF44:
 2226 01c4 72756E6E 		.ascii	"running\000"
 2226      696E6700 
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 57


 2227              	.LASF82:
 2228 01cc 47726970 		.ascii	"Gripper_Servo_PWM_Start\000"
 2228      7065725F 
 2228      53657276 
 2228      6F5F5057 
 2228      4D5F5374 
 2229              	.LASF53:
 2230 01e4 7075636B 		.ascii	"puckWestClearance\000"
 2230      57657374 
 2230      436C6561 
 2230      72616E63 
 2230      6500
 2231              	.LASF65:
 2232 01f6 756C7472 		.ascii	"ultrasonicInterruptHandler\000"
 2232      61736F6E 
 2232      6963496E 
 2232      74657272 
 2232      75707448 
 2233              	.LASF32:
 2234 0211 7475726E 		.ascii	"turningRightFlag\000"
 2234      696E6752 
 2234      69676874 
 2234      466C6167 
 2234      00
 2235              	.LASF52:
 2236 0222 7075636B 		.ascii	"puckEastClearance\000"
 2236      45617374 
 2236      436C6561 
 2236      72616E63 
 2236      6500
 2237              	.LASF11:
 2238 0234 666C6F61 		.ascii	"float\000"
 2238      7400
 2239              	.LASF95:
 2240 023a 6368616E 		.ascii	"changeHeightToPuck\000"
 2240      67654865 
 2240      69676874 
 2240      546F5075 
 2240      636B00
 2241              	.LASF6:
 2242 024d 6C6F6E67 		.ascii	"long long int\000"
 2242      206C6F6E 
 2242      6720696E 
 2242      7400
 2243              	.LASF88:
 2244 025b 4D6F746F 		.ascii	"Motor_Right_Driver_Sleep\000"
 2244      725F5269 
 2244      6768745F 
 2244      44726976 
 2244      65725F53 
 2245              	.LASF72:
 2246 0274 4144435F 		.ascii	"ADC_Start\000"
 2246      53746172 
 2246      7400
 2247              	.LASF4:
 2248 027e 6C6F6E67 		.ascii	"long int\000"
 2248      20696E74 
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 58


 2248      00
 2249              	.LASF87:
 2250 0287 4D6F746F 		.ascii	"Motor_Right_Driver_Start\000"
 2250      725F5269 
 2250      6768745F 
 2250      44726976 
 2250      65725F53 
 2251              	.LASF76:
 2252 02a0 636F6E74 		.ascii	"control_photodiode_Write\000"
 2252      726F6C5F 
 2252      70686F74 
 2252      6F64696F 
 2252      64655F57 
 2253              	.LASF98:
 2254 02b9 6D697368 		.ascii	"mishaSwivel\000"
 2254      61537769 
 2254      76656C00 
 2255              	.LASF50:
 2256 02c5 626C6F63 		.ascii	"blockEastClearance\000"
 2256      6B456173 
 2256      74436C65 
 2256      6172616E 
 2256      636500
 2257              	.LASF28:
 2258 02d8 7075636B 		.ascii	"puckPileLocation\000"
 2258      50696C65 
 2258      4C6F6361 
 2258      74696F6E 
 2258      00
 2259              	.LASF30:
 2260 02e9 64726976 		.ascii	"drivingBackwardFlag\000"
 2260      696E6742 
 2260      61636B77 
 2260      61726446 
 2260      6C616700 
 2261              	.LASF23:
 2262 02fd 63757272 		.ascii	"currentPuckRackScanningIndex\000"
 2262      656E7450 
 2262      75636B52 
 2262      61636B53 
 2262      63616E6E 
 2263              	.LASF80:
 2264 031a 5261636B 		.ascii	"Rack_Servo_PWM_WriteCompare\000"
 2264      5F536572 
 2264      766F5F50 
 2264      574D5F57 
 2264      72697465 
 2265              	.LASF37:
 2266 0336 73746174 		.ascii	"state\000"
 2266      6500
 2267              	.LASF71:
 2268 033c 55415254 		.ascii	"UART_1_Start\000"
 2268      5F315F53 
 2268      74617274 
 2268      00
 2269              	.LASF1:
 2270 0349 756E7369 		.ascii	"unsigned char\000"
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 59


 2270      676E6564 
 2270      20636861 
 2270      7200
 2271              	.LASF36:
 2272 0357 636F6C6F 		.ascii	"colour_flag\000"
 2272      75725F66 
 2272      6C616700 
 2273              	.LASF86:
 2274 0363 4D6F746F 		.ascii	"Motor_Left_Driver_Sleep\000"
 2274      725F4C65 
 2274      66745F44 
 2274      72697665 
 2274      725F536C 
 2275              	.LASF85:
 2276 037b 4D6F746F 		.ascii	"Motor_Left_Driver_Start\000"
 2276      725F4C65 
 2276      66745F44 
 2276      72697665 
 2276      725F5374 
 2277              	.LASF68:
 2278 0393 73707269 		.ascii	"sprintf\000"
 2278      6E746600 
 2279              	.LASF78:
 2280 039b 636F6C6F 		.ascii	"colourSensingInitialise\000"
 2280      75725365 
 2280      6E73696E 
 2280      67496E69 
 2280      7469616C 
 2281              	.LASF74:
 2282 03b3 49444143 		.ascii	"IDAC8_1_SetRange\000"
 2282      385F315F 
 2282      53657452 
 2282      616E6765 
 2282      00
 2283              	.LASF102:
 2284 03c4 5C5C6164 		.ascii	"\\\\ad.monash.edu\\home\\User026\\bamcg3\\Documents"
 2284      2E6D6F6E 
 2284      6173682E 
 2284      6564755C 
 2284      686F6D65 
 2285 03f1 5C476974 		.ascii	"\\GitHub\\ECE3091_Group17\\Group17RobotReal\\Group1"
 2285      4875625C 
 2285      45434533 
 2285      3039315F 
 2285      47726F75 
 2286 0420 37526F62 		.ascii	"7Robot.cydsn\000"
 2286      6F742E63 
 2286      7964736E 
 2286      00
 2287              	.LASF57:
 2288 042d 6D6F7665 		.ascii	"moveNow\000"
 2288      4E6F7700 
 2289              	.LASF27:
 2290 0435 626C6F63 		.ascii	"block_edge_location\000"
 2290      6B5F6564 
 2290      67655F6C 
 2290      6F636174 
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 60


 2290      696F6E00 
 2291              	.LASF7:
 2292 0449 6C6F6E67 		.ascii	"long long unsigned int\000"
 2292      206C6F6E 
 2292      6720756E 
 2292      7369676E 
 2292      65642069 
 2293              	.LASF77:
 2294 0460 636F6E74 		.ascii	"control_led_Write\000"
 2294      726F6C5F 
 2294      6C65645F 
 2294      57726974 
 2294      6500
 2295              	.LASF18:
 2296 0472 73657276 		.ascii	"servo_testing\000"
 2296      6F5F7465 
 2296      7374696E 
 2296      6700
 2297              	.LASF8:
 2298 0480 756E7369 		.ascii	"unsigned int\000"
 2298      676E6564 
 2298      20696E74 
 2298      00
 2299              	.LASF62:
 2300 048d 69646163 		.ascii	"idac_value\000"
 2300      5F76616C 
 2300      756500
 2301              	.LASF73:
 2302 0498 49444143 		.ascii	"IDAC8_1_Start\000"
 2302      385F315F 
 2302      53746172 
 2302      7400
 2303              	.LASF40:
 2304 04a6 63757272 		.ascii	"currentOrientation\000"
 2304      656E744F 
 2304      7269656E 
 2304      74617469 
 2304      6F6E00
 2305              	.LASF60:
 2306 04b9 6D6F7665 		.ascii	"moveForwardAllowed\000"
 2306      466F7277 
 2306      61726441 
 2306      6C6C6F77 
 2306      656400
 2307              	.LASF42:
 2308 04cc 63757272 		.ascii	"current_stage\000"
 2308      656E745F 
 2308      73746167 
 2308      6500
 2309              	.LASF83:
 2310 04da 47726970 		.ascii	"Gripper_Servo_PWM_WriteCompare\000"
 2310      7065725F 
 2310      53657276 
 2310      6F5F5057 
 2310      4D5F5772 
 2311              	.LASF70:
 2312 04f9 5449415F 		.ascii	"TIA_1_Start\000"
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 61


 2312      315F5374 
 2312      61727400 
 2313              	.LASF67:
 2314 0505 64697374 		.ascii	"distanceSensor\000"
 2314      616E6365 
 2314      53656E73 
 2314      6F7200
 2315              	.LASF13:
 2316 0514 63686172 		.ascii	"char\000"
 2316      00
 2317              	.LASF103:
 2318 0519 6D61696E 		.ascii	"main\000"
 2318      00
 2319              	.LASF10:
 2320 051e 696E7433 		.ascii	"int32_t\000"
 2320      325F7400 
 2321              	.LASF63:
 2322 0526 504C414E 		.ascii	"PLAN_SCAN_VERTICAL\000"
 2322      5F534341 
 2322      4E5F5645 
 2322      52544943 
 2322      414C00
 2323              	.LASF46:
 2324 0539 686F7269 		.ascii	"horizontalPuckGrid\000"
 2324      7A6F6E74 
 2324      616C5075 
 2324      636B4772 
 2324      696400
 2325              	.LASF43:
 2326 054c 636F6C6F 		.ascii	"colour_sensing_algorithm\000"
 2326      75725F73 
 2326      656E7369 
 2326      6E675F61 
 2326      6C676F72 
 2327              	.LASF38:
 2328 0565 6D6F7669 		.ascii	"moving\000"
 2328      6E6700
 2329              	.LASF91:
 2330 056c 54696D65 		.ascii	"Timer_1_Start\000"
 2330      725F315F 
 2330      53746172 
 2330      7400
 2331              	.LASF55:
 2332 057a 64657369 		.ascii	"desiredPosition\000"
 2332      72656450 
 2332      6F736974 
 2332      696F6E00 
 2333              	.LASF49:
 2334 058a 70617468 		.ascii	"pathPastBlock\000"
 2334      50617374 
 2334      426C6F63 
 2334      6B00
 2335              	.LASF3:
 2336 0598 73686F72 		.ascii	"short unsigned int\000"
 2336      7420756E 
 2336      7369676E 
 2336      65642069 
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 62


 2336      6E7400
 2337              	.LASF75:
 2338 05ab 49444143 		.ascii	"IDAC8_1_SetValue\000"
 2338      385F315F 
 2338      53657456 
 2338      616C7565 
 2338      00
 2339              	.LASF101:
 2340 05bc 6D61696E 		.ascii	"main.c\000"
 2340      2E6300
 2341              	.LASF5:
 2342 05c3 6C6F6E67 		.ascii	"long unsigned int\000"
 2342      20756E73 
 2342      69676E65 
 2342      6420696E 
 2342      7400
 2343              	.LASF94:
 2344 05d5 53746172 		.ascii	"Start_StartEx\000"
 2344      745F5374 
 2344      61727445 
 2344      7800
 2345              	.LASF12:
 2346 05e3 646F7562 		.ascii	"double\000"
 2346      6C6500
 2347              	.LASF69:
 2348 05ea 55415254 		.ascii	"UART_1_PutString\000"
 2348      5F315F50 
 2348      75745374 
 2348      72696E67 
 2348      00
 2349              	.LASF41:
 2350 05fb 7075636B 		.ascii	"puckConstructionPlan\000"
 2350      436F6E73 
 2350      74727563 
 2350      74696F6E 
 2350      506C616E 
 2351              	.LASF84:
 2352 0610 47726970 		.ascii	"Gripper_Servo_PWM_Sleep\000"
 2352      7065725F 
 2352      53657276 
 2352      6F5F5057 
 2352      4D5F536C 
 2353              	.LASF9:
 2354 0628 5F5F696E 		.ascii	"__int32_t\000"
 2354      7433325F 
 2354      7400
 2355              	.LASF51:
 2356 0632 626C6F63 		.ascii	"blockWestClearance\000"
 2356      6B576573 
 2356      74436C65 
 2356      6172616E 
 2356      636500
 2357              	.LASF58:
 2358 0645 6D6F7665 		.ascii	"moveLeftAllowed\000"
 2358      4C656674 
 2358      416C6C6F 
 2358      77656400 
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 63


 2359              	.LASF97:
 2360 0655 6D6F7665 		.ascii	"moveUntil\000"
 2360      556E7469 
 2360      6C00
 2361              	.LASF15:
 2362 065f 73697A65 		.ascii	"sizetype\000"
 2362      74797065 
 2362      00
 2363              	.LASF34:
 2364 0668 6F757470 		.ascii	"output\000"
 2364      757400
 2365              	.LASF19:
 2366 066f 6D6F746F 		.ascii	"motor_testing\000"
 2366      725F7465 
 2366      7374696E 
 2366      6700
 2367              	.LASF59:
 2368 067d 6D6F7665 		.ascii	"moveRightAllowed\000"
 2368      52696768 
 2368      74416C6C 
 2368      6F776564 
 2368      00
 2369              	.LASF64:
 2370 068e 64697374 		.ascii	"distance_returned_global\000"
 2370      616E6365 
 2370      5F726574 
 2370      75726E65 
 2370      645F676C 
 2371              	.LASF21:
 2372 06a7 49544D5F 		.ascii	"ITM_RxBuffer\000"
 2372      52784275 
 2372      66666572 
 2372      00
 2373              	.LASF100:
 2374 06b4 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2374      43313120 
 2374      352E342E 
 2374      31203230 
 2374      31363036 
 2375 06e7 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 2375      20726576 
 2375      6973696F 
 2375      6E203233 
 2375      37373135 
 2376 071a 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 2376      66756E63 
 2376      74696F6E 
 2376      2D736563 
 2376      74696F6E 
 2377              	.LASF66:
 2378 0742 43794465 		.ascii	"CyDelay\000"
 2378      6C617900 
 2379              	.LASF48:
 2380 074a 70617468 		.ascii	"pathToPucks\000"
 2380      546F5075 
 2380      636B7300 
 2381              	.LASF79:
ARM GAS  C:\Users\bamcg3\AppData\Local\Temp\ccd2vam3.s 			page 64


 2382 0756 5261636B 		.ascii	"Rack_Servo_PWM_Start\000"
 2382      5F536572 
 2382      766F5F50 
 2382      574D5F53 
 2382      74617274 
 2383              	.LASF33:
 2384 076b 696E6974 		.ascii	"initialisation\000"
 2384      69616C69 
 2384      73617469 
 2384      6F6E00
 2385              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
